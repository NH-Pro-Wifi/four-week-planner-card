{"mappings":"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AMpO,GAGfjI,IAAAA,CAAKoW,EAAAA,GAAkB;YAI7B3K,YAAiBzL,IAAAA,CAAKkD,WAAAA,CACnBoT,UAAAA;YACHrO,SAAAA;YACAY,QAAQ,EAAA;QAAA;IAEX;AAAA;AAlDMgN,0CAAaM,aAAAA,GAAG,cAChBN,0CAAUS,UAAAA,GAJC;AAAA,MAkEPC,4CAAaC,CAAAA,GAAAA,yCAAAA,EAAUX;;;;A;A,O,c,C,2B,c;I,O;A;A,S,wC,M,E,K;I,I,I,I,G,I,M,M,E,I;Q,I,a,K,C,E;Q,W,U,G,W,U,I;Q,W,Y,G;Q,I,W,Y,W,Q,G;Q,O,c,C,Q,qC,W,G,G;I;A;A,S,mC,W,E,U,E,W;I,I,Y,wC,Y,S,E;I,I,a,wC,a;I,O,c,C,a,a;Q,U;I;I,O;A;A,S;I,iC,O,M,G,O,M,C,I,K,S,M;Q,I,I,I,G,I,U,M,E,I;Y,I,S,S,C,E;Y,I,I,O,O,I,O,S,C,c,C,I,C,Q,M,M,C,I,G,M,C,I;Q;Q,O;I;I,O,+B,K,C,I,E;A;A,S,qC,Q,E,U;I,S,S,G,O,M,C,W,S;I,S,S,C,W,G;I,sC,U;A;A,S,sC,C;I,wC,O,c,G,O,c,C,I,K,S,gB,C;Q,O,E,S,I,O,c,C;I;I,O,sC;A;A,S,sC,C,E,C;I,wC,O,c,G,O,c,C,I,K,S,gB,C,E,C;Q,E,S,G;Q,O;I;I,O,sC,G;A;A,S;I,I,O,Y,e,C,Q,S,E,O;I,I,Q,S,C,I,E,O;I,I,O,U,Y,O;I,I;Q,Q,S,C,O,C,I,C,Q,S,C,S,E,E,Y;Q,O;I,E,O,G;Q,O;I;A;A,S,iC,M,E,I,E,K;I,I,mD,mC,Q,S,C,I;S,mC,S,W,M,E,I,E,K;Q,I,I;Y;S;Q,E,I,C,K,C,G;Q,I,c,S,I,C,K,C,Q;Q,I,W,I;Q,I,O,sC,U,M,S;Q,O;I;I,O,iC,K,C,M;A;A,S,wC,E;I,O,S,Q,C,I,C,I,O,C,qB;A;A,S,uC,K;I,I,S,O,Q,a,I,Q;I,yC,S,iB,K;Q,I,U,Q,C,wC,Q,O;Q,I,O,U,Y,M,I,U;Q,I,O,W,a;Y,I,O,G,C,Q,O,O,G,C;Y,O,G,C,O;Q;Q,S;Y,O,iC,O,W,sC,I,E,W;Q;Q,Q,S,G,O,M,C,M,S,E;Y,a;gB,O;gB,Y;gB,U;gB,c;Y;Q;Q,O,sC,S;I;I,O,uC;A;A,S,oD,M,E,Q;I,I,U,M,O,C;I,I,S,C;I,I,a,O,I,C;I,I,K;I,I,I,G,I,W,M,E,I;Q,M,U,C,E;Q,I,S,O,C,Q,G;Q,M,C,I,G,M,C,I;I;I,O;A;A,S,kD,C,E,M;I,I,C,G;I,I,O,M,U,O,wC,G;I,I,I,O,S,C,Q,C,I,C,G,K,C,G;I,I,M,Y,E,W,E,I,E,W,C,I;I,I,M,S,M,O,O,M,I,C;I,I,M,e,2C,I,C,I,O,wC,G;A;A,S,wC,G,E,G;I,I,O,Q,M,I,M,E,M,I,M;I,I,I,I,G,O,I,M,M,I,K,I,I,C,E,G,G,C,E;I,O;A;A,S,sD,C,E,c;I,I,K,O,W,e,C,C,O,Q,C,I,C,C,a;I,I,I,O,A,C,K,G,I,C,E,E,I,C,I,C;I,I,M,O,C,M,C,K,kD,E,K,kB,K,O,E,M,K,U;Q,I,I,I;Q,I,I;Q,O;Y,I,K,E,M,E,O;gB,M;Y;Y,O;gB,M;gB,O,C,C,I;Y;Q;I;I,M,I,U;A;A,S,mC,K,E,I;I,I,O,U,Y,U,M,O;I,I,O,K,C,O,W,C;I,I,S,W;Q,I,M,K,I,C,O,Q;Q,I,O,Q,U,O;Q,M,I,U;I;I,O,A,C,S,W,S,M,E;A;A,S,qC,G;I,I,M,mC,K;I,O,O,Q,W,M,O;A;AI3EpC,0EAAA;AAEA;;CAEA,GAFA,IAGMsB,mCAAU,WAAA,GAAA,SAAAC,MAAA;IAAAC,qCAAAF,YAAAC;IAAA,SAAAD;QAAA,OAAAC,OAAAE,KAAA,CAAA,IAAA,EAAAC,cAAA,IAAA;IAAA;IAAA,OAAAJ;AAAA,EAAAK,WAAAA,GAAAA,uCAASrP;AAEzB;;CAEA,GACasP,IAAAA,6CAAoB,WAAA,GAAA,SAAAC,WAAA;IAAAL,qCAAAI,sBAAAC;IAC/B,SAAAD,qBAAYE,MAAM;QAAE,OAClBD,YAAApW,IAAA,CAAA,IAAA,EAAA,uBAA2BqW,OAAOC,SAAS,OAAK,IAAA;IAClD;IAAC,OAAAH;AAAA,EAHuCN;AAM1C;;CAEA,GACaU,IAAAA,6CAAoB,WAAA,GAAA,SAAAC,YAAA;IAAAT,qCAAAQ,sBAAAC;IAC/B,SAAAD,qBAAYF,MAAM;QAAE,OAClBG,aAAAxW,IAAA,CAAA,IAA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","sources":["src/index.js","src/card.js","node_modules/@lit/reactive-element/reactive-element.js","node_modules/@lit/reactive-element/src/reactive-element.ts","node_modules/@lit/reactive-element/css-tag.js","node_modules/@lit/reactive-element/src/css-tag.ts","node_modules/lit-html/lit-html.js","node_modules/lit-html/src/lit-html.ts","node_modules/lit-element/lit-element.js","node_modules/lit-element/src/lit-element.ts","node_modules/lit-html/is-server.js","node_modules/lit-html/src/is-server.ts","node_modules/lit-html/directives/unsafe-html.js","node_modules/lit-html/src/directives/unsafe-html.ts","node_modules/lit-html/directive.js","node_modules/lit-html/src/directive.ts","node_modules/luxon/build/cjs-browser/luxon.js","node_modules/luxon/src/errors.js","node_modules/luxon/src/impl/formats.js","node_modules/luxon/src/zone.js","node_modules/luxon/src/zones/systemZone.js","node_modules/luxon/src/zones/IANAZone.js","node_modules/luxon/src/impl/locale.js","node_modules/luxon/src/zones/fixedOffsetZone.js","node_modules/luxon/src/zones/invalidZone.js","node_modules/luxon/src/impl/zoneUtil.js","node_modules/luxon/src/impl/digits.js","node_modules/luxon/src/settings.js","node_modules/luxon/src/impl/invalid.js","node_modules/luxon/src/impl/conversions.js","node_modules/luxon/src/impl/util.js","node_modules/luxon/src/impl/english.js","node_modules/luxon/src/impl/formatter.js","node_modules/luxon/src/impl/regexParser.js","node_modules/luxon/src/duration.js","node_modules/luxon/src/interval.js","node_modules/luxon/src/info.js","node_modules/luxon/src/impl/diff.js","node_modules/luxon/src/impl/tokenParser.js","node_modules/luxon/src/datetime.js","node_modules/luxon/src/luxon.js","src/card.styles.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-072c31d619a3cd83.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-950f23aa719bdbd1.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-9d974f6164bf8a39.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-cc514eee9d7ade2d.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-854f60404daac72f.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-0427a25037004009.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-389495f2134d0e2d.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-32770749432afe0f.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-5a6ea3f39f5e6749.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-37c277c5dadbb067.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-56ef1d72b645616a.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-304b265766e774b0.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-8f0ce705b4133907.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-f8b5316c1be381ec.js","src/editor.js","src/editor.styles.js","package.json"],"sourcesContent":["import { FourWeekPlannerCard } from './card';\nimport { FourWeekPlannerCardEditor } from \"./editor\";\nimport { version } from '../package.json';\n\ncustomElements.define(\n    'four-week-planner-card',\n    FourWeekPlannerCard\n);\n\nwindow.customCards = window.customCards || [];\nwindow.customCards.push({\n    type: 'four-week-planner-card',\n    name: 'Four week Planner Card',\n    description: 'Card to display events 4 weeks.'\n});\n\ncustomElements.define(\n    'four-week-planner-card-editor',\n    FourWeekPlannerCardEditor\n);\n\nconsole.info(\n    `%c FOUR-WEEK-PLANNER-CARD %c v${version} `,\n    'color: white; background: black; font-weight: 700;',\n    'color: black; background: white; font-weight: 700;',\n);","import { html, LitElement } from 'lit';\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html.js';\nimport { DateTime, Settings as LuxonSettings, Info as LuxonInfo } from 'luxon';\nimport styles from './card.styles';\nimport clear_night from 'data-url:./icons/clear_night.png';\nimport cloudy from 'data-url:./icons/cloudy.png';\nimport fog from 'data-url:./icons/fog.png';\nimport lightning from 'data-url:./icons/lightning.png';\nimport storm from 'data-url:./icons/storm.png';\nimport storm_night from 'data-url:./icons/storm_night.png';\nimport mostly_cloudy from 'data-url:./icons/mostly_cloudy.png';\nimport mostly_cloudy_night from 'data-url:./icons/mostly_cloudy_night.png';\nimport heavy_rain from 'data-url:./icons/heavy_rain.png';\nimport rainy from 'data-url:./icons/rainy.png';\nimport snowy from 'data-url:./icons/snowy.png';\nimport mixed_rain from 'data-url:./icons/mixed_rain.png';\nimport sunny from 'data-url:./icons/sunny.png';\nimport windy from 'data-url:./icons/windy.svg';\n\nconst ICONS = {\n  'clear-day': sunny,\n  'clear-night': clear_night,\n  cloudy,\n  overcast: cloudy,\n  fog,\n  hail: mixed_rain,\n  lightning,\n  'lightning-rainy': storm,\n  'partly-cloudy-day': mostly_cloudy,\n  'partly-cloudy-night': mostly_cloudy_night,\n  partlycloudy: mostly_cloudy,\n  pouring: heavy_rain,\n  rain: rainy,\n  rainy,\n  sleet: mixed_rain,\n  snow: snowy,\n  snowy,\n  'snowy-rainy': mixed_rain,\n  sunny,\n  wind: windy,\n  windy,\n  'windy-variant': windy\n};\n\nconst ICONS_NIGHT = {\n  ...ICONS,\n  sunny: clear_night,\n  partlycloudy: mostly_cloudy_night,\n  'lightning-rainy': storm_night\n};\n\nexport class FourWeekPlannerCard extends LitElement {\n    static styles = styles;\n\n    _initialized = false;\n    _loading = 0;\n    _events = {};\n    _calendarEvents = {};\n    _calendarMap = []\n    _jsonDays = '';\n    _calendars;\n    _numberOfDays;\n    _updateInterval;\n    _language;\n    _dateFormat;\n    _timeFormat;\n    _locationLink;\n    _startDate;\n    _hideWeekend;\n    _startingDay;\n    _startingDayOffset;\n    _loader;\n    _hardrefresh = false;\n    _grid_rows = 0;\n    _endDate;\n    _weatherForecast = null;\n\n    /**\n     * Get config element\n     *\n     * @returns {HTMLElement}\n     */\n    static getConfigElement() {\n        // Create and return an editor element\n        return document.createElement(\"week-planner-card-editor-2\");\n    }\n\n    /**\n     * Get stub config\n     *\n     * @returns {}\n     */\n    static getStubConfig() {\n        return {\n            calendars: [],\n            days: 7,\n            startingDay: 'today',\n            startingDayOffset: 0,\n            hideWeekend: false,\n            noCardBackground: false,\n            compact: false,\n            weather: {\n                showCondition: true,\n                showTemperature: false,\n                showLowTemperature: false,\n                useTwiceDaily: false,\n            },\n            locale: 'en',\n            showLocation: false,\n            hidePastEvents: false,\n            hideDaysWithoutEvents: false,\n            hideTodayWithoutEvents: false,\n            combineSimilarEvents: false,\n            showLegend: false\n        };\n    }\n\n    /**\n     * Get properties\n     *\n     * @return {Object}\n     */\n    static get properties() {\n        return {\n            _days: { type: Array },\n            _config: { type: Object },\n            _error: { type: String },\n            _currentEventDetails: { type: Object },\n        }\n    }\n\n    /**\n     * Set configuration\n     *\n     * @param {Object} config\n     */\n    setConfig(config) {\n        this._config = config;\n\n        if (!config.calendars) {\n            throw new Error('No calendars are configured');\n        }\n\n        this._title = config.title ?? null;\n        this._calendars = config.calendars;\n        this._hideWeekend = config.hideWeekend ?? false;\n        this._startingDay = config.startingDay ?? 'today';\n        this._startingDayOffset = config.startingDayOffset ?? 0;\n        this._startDate = this._getStartDate();\n        this._updateInterval = config.updateInterval ?? 60;\n        this._dayFormat = config.dayFormat ?? null;\n        this._dateFormat = config.dateFormat ?? 'cccc d LLLL yyyy';\n        this._timeFormat = config.timeFormat ?? 'HH:mm';\n        this._weather = this._getWeatherConfig(config.weather);\n\n        if (config.locale) {\n            LuxonSettings.defaultLocale = config.locale;\n        }\n        this._language = Object.assign(\n            {},\n            {\n                fullDay: 'Entire day',\n                noEvents: 'No events',\n                moreEvents: 'More events',\n                today: 'Today',\n                tomorrow: 'Tomorrow',\n                yesterday: 'Yesterday',\n                sunday: LuxonInfo.weekdays('long')[6],\n                monday: LuxonInfo.weekdays('long')[0],\n                tuesday: LuxonInfo.weekdays('long')[1],\n                wednesday: LuxonInfo.weekdays('long')[2],\n                thursday: LuxonInfo.weekdays('long')[3],\n                friday: LuxonInfo.weekdays('long')[4],\n                saturday: LuxonInfo.weekdays('long')[5]\n            },\n            config.texts ?? {}\n        );\n    }\n\n    /**\n     * Render\n     *\n     * @return {Object}\n     */\n    render() {\n        if (!this._loader) {\n            this._loader = this._getLoader();\n        }\n\n        if (!this._initialized) {\n            this._initialized = true;\n            return this._waitForHassAndConfig();\n        }\n\n        if (!this._hardrefresh) {\n            this._hardrefresh = true;\n            window.setTimeout(()=>{\n                location.reload(true);\n            }, 3600 * 1000);\n        }\n\n        const itemTemplates = []\n        let daysinrow = 7\n        let weeks = 4\n        for (let k=0; k < weeks; k++) {\n            for (let j=0; j< this._calendarMap[k * daysinrow].length; j++) {\n                for( let i=0; i < daysinrow; i++) {\n                    let index = daysinrow * k + i\n                    if (j == 0) {\n                        let date_classes = ['grid-item','date']\n                        if (this._isSameDay(this._calendarMap[index][j]['date'], DateTime.now().startOf('day'))){\n                            date_classes.unshift('today') \n                        }\n                        let weather = null\n                        if (this._calendarMap[index][j]['weather']) {\n                            weather =  html`<span class=\"icon\"><img class=\"icon\" src=\"${this._calendarMap[index][j]['weather']['icon']}\" alt=\"${this._calendarMap[index][j]['weather']['condition']}\"></span><span class=\"high\"> H: ${this._calendarMap[index][j]['weather']['temperature']}</span>`\n                        }\n                        itemTemplates.push(html`<div class=\"${date_classes.join(' ')}\"><span class=\"text\">${this._calendarMap[index][j]['date'].weekdayLong}</span><span class=\"month\">${this._calendarMap[index][j]['date'].monthLong}</span><span class=\"number\">${this._calendarMap[index][j]['date'].day}</span>${weather}</div>`);\n                    } else {\n                        let item = this._calendarMap[index][j]\n                        if (item == null ) {\n                            itemTemplates.push(html`<div class=\"grid-item\"></div>`);\n                        } else if (item.title.substring(0,4) == 'x - '){\n                            // pass    \n                        } else  {\n                            itemTemplates.push(html`<div class=\"grid-item event\" style=\"grid-column: span ${item.span + 1};\"><p>${item.title}</p></div>`);\n                        }\n                    }\n                }\n            }\n        }\n        \n        this._grid_rows = 0;\n        for (let k=0; k < weeks; k++) {\n            this._grid_rows += this._calendarMap[k * daysinrow].length\n        }\n\n        return html`\n            <ha-card id=\"ha-card\" class=\"\" style=\"\">\n                <div class=\"card-content\">\n                    ${itemTemplates}\n                </div>\n                ${this._loader}\n            </ha-card>\n        `;\n    }\n\n    updated() {\n        this.shadowRoot.querySelector(\"ha-card\").style.setProperty('--page-height', Math.max(window.innerHeight, 1080) + \"px\")\n        this.shadowRoot.querySelector(\"ha-card\").style.setProperty('--page-width', Math.max(window.innerWidth, 1920) + \"px\")\n        this.shadowRoot.querySelector(\"ha-card\").style.setProperty('--rows', this._grid_rows)\n\n      }\n\n    _getLoader() {\n        const loader = document.createElement('div');\n        loader.className = 'loader';\n        loader.style.display = 'none';\n        return loader;\n    }\n\n    _updateLoader() {\n        if (this._loading > 0) {\n            this._loader.style.display = 'inherit';\n        } else {\n            this._loader.style.display = 'none';\n        }\n    }\n\n\n    _waitForHassAndConfig() {\n        if (!this.hass || !this._calendars) {\n            window.setTimeout(() => {\n                this._waitForHassAndConfig();\n            }, 50)\n            return;\n        }\n\n        this._updateEvents();\n    }\n\n    _Empty2DArray(rows, cols) {\n        const array = [];\n        for (let i = 0; i < rows; i++) {\n            array[i] = [];\n            for (let j = 0; j < cols; j++) {\n                array[i][j] = null;\n            }\n        }\n        return array;\n    }\n\n    _updateEvents() {\n        if (this._loading > 0) {\n            return;\n        }\n\n        this._loading++;\n        this._updateLoader();\n        this._error = '';\n        this._events = {};\n        let eventsperday = 1;\n        let weeksperview = 4;\n        let daysperweek = 7;\n        this._startDate = this._getStartDate();\n        let startDate = this._startDate;\n        this._calendarMap = this._Empty2DArray( daysperweek * weeksperview, (eventsperday+1) );\n        this._endDate = this._startDate.plus({ days: daysperweek * weeksperview });\n\n        for (let i = 0; i < 7 * weeksperview ; i++) {\n            this._calendarMap[i][0] = {\n                'date': startDate.plus({days: i}),\n                'weather': null\n            };\n\n        }\n\n        if (this._weather && this._weatherForecast === null) {\n            this._subscribeToWeatherForecast();\n        }\n\n        let calendarNumber = 0;\n        this._calendars.forEach(calendar => {\n            if (!calendar.entity || !this.hass.states[calendar.entity]) {\n                return;\n            }\n\n            if (!calendar.name) {\n                calendar = {\n                    ...calendar,\n                    name: this.hass.formatEntityAttributeValue(this.hass.states[calendar.entity], 'friendly_name')\n                }\n            }\n            let calendarSorting = calendarNumber;\n            this._loading++;\n            this.hass.callApi(\n                'get',\n                'calendars/' + calendar.entity + '?start=' + encodeURIComponent(startDate.toISO()) + '&end=' + encodeURIComponent(this._endDate.toISO())\n            ).then(response => {\n                response.forEach(event => {\n                    let startDate = this._convertApiDate(event.start);\n                    let endDate = this._convertApiDate(event.end);\n                    \n                    // Update start and end date if events do beyond the calender window\n                    if ( this._startDate > startDate)\n                        startDate = this._startDate\n                    if ( this._endDate < endDate)\n                        endDate = this._endDate\n\n                    startDate = startDate.startOf('day')\n                    endDate = endDate.startOf('day')\n\n                    let title = event.summary\n                    // if the endDate is greater then end of week, we are going to loop over each week to add the event\n                    let e = endDate\n                    while(endDate > this._getEndofWeekDate(startDate)){\n                        endDate = this._getEndofWeekDate(startDate)\n                        this._pushCalender(title, startDate, endDate)\n                        startDate = this._getWeekDayDate(startDate, 1).plus({days: 7})\n                        if (e < endDate.plus({days: 7})) {\n                            endDate = e\n                        } else {\n                            endDate = endDate.plus({days: 7})\n                        }\n                    }\n                    this._pushCalender(title, startDate, e)\n                });\n\n                this._loading--;\n            }).catch(error => {\n                if (!error.error) {\n                    console.log(error);\n                }\n                this._error = 'Error while fetching calendar: ' + error.error;\n                this._loading = 0;\n                throw new Error(this._error);\n            }).finally(() => {\n                //pass\n            });\n            calendarNumber++;\n            \n        });\n\n        let checkLoading = window.setInterval(() => {\n            if (this._loading === 0) {\n                clearInterval(checkLoading);\n                this._updateLoader();\n                if (!this._error) {\n                    this._mergeCalenderWeather()\n                    this._days = this._calendarMap;\n                    console.log(this._days)\n                }\n\n                window.setTimeout(() => {\n                    this._updateEvents();\n                }, this._updateInterval * 1000);\n            }\n        }, 50);\n\n        this._loading--;\n    }\n\n    _mergeCalenderWeather(){\n        const weatherState = this._weather ? this.hass.states[this._weather.entity] : null;\n        for (let i = 0; i < this._calendarMap.length; i++) {\n            this._weatherForecast?.forEach((forecast) => {\n                // Only use day time forecasts\n                if (forecast.hasOwnProperty('is_daytime') && forecast.is_daytime === false) {\n                    return;\n                }\n    \n                const dateKey = DateTime.fromISO(forecast.datetime).toISODate();\n                if (dateKey == this._calendarMap[i][0]['date'].toISODate()) { \n                    this._calendarMap[i][0]['weather'] = {\n                        icon: this._getWeatherIcon(forecast),\n                        condition: this.hass.formatEntityState(weatherState, forecast.condition),\n                        temperature: this.hass.formatEntityAttributeValue(weatherState, 'temperature', forecast.temperature),\n                        templow: this.hass.formatEntityAttributeValue(weatherState, 'templow', forecast.templow)\n                    };\n                }\n            });\n        }\n    }\n\n    _getWeatherIcon(weatherState) {\n        const condition = weatherState?.condition;\n        if (!condition) {\n            return null;\n        }\n\n        const state = condition.toLowerCase();\n        return ICONS[state];\n    }\n\n    _pushCalender(title, startDate, endDate){\n        let startdaykey = Math.min(this._getDateDiff(this._startDate, startDate), 27)\n        let spanDays = this._getDateDiff(startDate, endDate)\n                    \n        let startdayrowkey = null\n        for(let i = 0; i < this._calendarMap[startdaykey].length; i++) {\n            if (this._calendarMap[startdaykey][i] === null) {\n                startdayrowkey = i;\n                break;\n            }\n        }\n\n        // If we cant find an empty row add a new row \n        if (startdayrowkey == null) {\n            startdayrowkey = this._calendarMap[startdaykey].length;\n            // Find the Dates that mark the begining and of of the week the event starts in \n            let startOfWeek = this._getWeekDayDate(startDate, 1);\n            let endOfWeek = this._getEndofWeekDate(startDate);\n            // Find the indexes in the month array and push in null\n            let startOfWeekIndex = this._getDateDiff(this._startDate, startOfWeek)\n            let endOfWeekIndex = this._getDateDiff(this._startDate, endOfWeek)\n            for (let i = startOfWeekIndex; i <= endOfWeekIndex; i++) {\n                this._calendarMap[i].push(null)\n            }\n        }\n\n                    \n        this._calendarMap[startdaykey][startdayrowkey] = {\n            'title': title,\n            'span': spanDays\n        };\n\n        for(let i = startdaykey + 1; i < startdaykey + spanDays + 1; i++){\n            if (i + 1 >= this._calendarMap.length) {\n                break;\n            } else {\n                this._calendarMap[i][startdayrowkey] = {'title': 'x - ' + title}\n            }\n        }\n    }\n\n    _getStartDate(alternativeStartingDay) {\n        let startDate = DateTime.now();\n\n        switch (alternativeStartingDay ?? this._startingDay) {\n            case 'yesterday':\n                startDate = startDate.minus({ days: 1 })\n                break;\n            case 'tomorrow':\n                startDate = startDate.plus({ days: 1 })\n                break;\n            case 'sunday':\n                startDate = this._getWeekDayDate(startDate, 7);\n                break;\n            case 'monday':\n                startDate = this._getWeekDayDate(startDate, 1);\n                break;\n            case 'tuesday':\n                startDate = this._getWeekDayDate(startDate, 2);\n                break;\n            case 'wednesday':\n                startDate = this._getWeekDayDate(startDate, 3);\n                break;\n            case 'thursday':\n                startDate = this._getWeekDayDate(startDate, 4);\n                break;\n            case 'friday':\n                startDate = this._getWeekDayDate(startDate, 5);\n                break;\n            case 'saturday':\n                startDate = this._getWeekDayDate(startDate, 6);\n                break;\n            case 'month':\n                startDate = startDate.startOf('month');\n                break;\n        }\n\n        if (this._startingDayOffset !== 0) {\n            startDate = startDate.plus({ days: this._startingDayOffset });\n        }\n\n        if (this._hideWeekend && startDate.weekday >= 6) {\n            startDate = this._getStartDate('monday');\n        }\n\n        return startDate.startOf('day');\n    }\n\n    _getWeekDayDate(currentDate, weekday) {\n        const currentWeekDay = currentDate.weekday;\n        if (currentWeekDay > weekday) {\n            return currentDate.minus({ days: currentWeekDay - weekday })\n        }\n        if (currentWeekDay < weekday) {\n            return currentDate.minus({ days: 7 - weekday + currentWeekDay })\n        }\n\n        return currentDate;\n    }\n\n    _getEndofWeekDate(currentDate) {\n        const currentWeekDay = currentDate.weekday;\n        return currentDate.plus({ days: 7 - currentWeekDay })\n    }\n\n    _convertApiDate(apiDate) {\n        let date = null;\n\n        if (apiDate) {\n            if (apiDate.dateTime) {\n                date = DateTime.fromISO(apiDate.dateTime);\n            } else if (apiDate.date) {\n                date = DateTime.fromISO(apiDate.date);\n            }\n        }\n\n        return date;\n    }\n\n    _isSameDay(date1, date2) {\n        if (date1 === null && date2 === null) {\n            return true;\n        }\n\n        if (date1 === null || date2 === null) {\n            return false;\n        }\n\n        return date1.day === date2.day\n            && date1.month === date2.month\n            && date1.year === date2.year\n    }\n\n    _getDateDiff(date1, date2){\n\n        if (date1 === null && date2 === null) {\n            return true;\n        }\n\n        if (date1 === null || date2 === null) {\n            return false;\n        }\n\n        if (date1 > date2) {\n            throw new Error(\"Bad Dates\");\n        }\n\n        date1=date1.startOf('day')\n        date2=date2.startOf('day')\n        let i = 0\n        while (!this._isSameDay(date1, date2)) {\n            i = i + 1\n            date1 = date1.plus({days: 1})\n        }\n        return i\n    }\n\n    _isToday(date) {\n        const today = DateTime.now().startOf('day');\n        return this._isSameDay(date, today);\n    }\n\n    _isTomorrow(date) {\n        const tomorrow = DateTime.now().startOf('day').plus({ days: 1 });\n        return this._isSameDay(date, tomorrow);\n    }\n\n    _isYesterday(date) {\n        const yesterday = DateTime.now().startOf('day').minus({ days: 1 });\n        return this._isSameDay(date, yesterday);\n    }\n\n    _getWeekDayText(date) {\n        if (this._language.today && this._isToday(date)) {\n            return this._language.today;\n        } else if (this._language.tomorrow && this._isTomorrow(date)) {\n            return this._language.tomorrow;\n        } else if (this._language.yesterday && this._isYesterday(date)) {\n            return this._language.yesterday;\n        } else {\n            const weekDays = [\n                this._language.sunday,\n                this._language.monday,\n                this._language.tuesday,\n                this._language.wednesday,\n                this._language.thursday,\n                this._language.friday,\n                this._language.saturday,\n                this._language.sunday,\n            ];\n            const weekDay = date.weekday;\n            return weekDays[weekDay];\n        }\n    }\n\n    _subscribeToWeatherForecast() {\n        this._loading++;\n        this._updateLoader();\n        let loadingWeather = true;\n        this.hass.connection.subscribeMessage((event) => {\n            this._weatherForecast = event.forecast ?? [];\n            if (loadingWeather) {\n                this._loading--;\n                loadingWeather = false;\n            }\n        }, {\n            type: 'weather/subscribe_forecast',\n            forecast_type:  'daily',\n            entity_id: this._weather.entity\n        });\n    }\n\n    _getWeatherConfig(weatherConfiguration) {\n        if (\n            !weatherConfiguration\n            || typeof weatherConfiguration !== 'string'\n            && typeof weatherConfiguration !== 'object'\n        ) {\n            return null;\n        }\n\n        let configuration = {\n            entity: null,\n            showCondition: true,\n            showTemperature: false,\n            showLowTemperature: false\n        };\n        if (typeof weatherConfiguration === 'string') {\n            configuration.entity = weatherConfiguration;\n        } else {\n            Object.assign(configuration, weatherConfiguration);\n        }\n\n        if (!configuration.hasOwnProperty('entity') || configuration.entity === null) {\n            return null;\n        }\n\n        return configuration;\n    }\n}\n","import{getCompatibleStyle as t,adoptStyles as s}from\"./css-tag.js\";export{CSSResult,adoptStyles,css,getCompatibleStyle,supportsAdoptingStyleSheets,unsafeCSS}from\"./css-tag.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const{is:i,defineProperty:e,getOwnPropertyDescriptor:r,getOwnPropertyNames:h,getOwnPropertySymbols:o,getPrototypeOf:n}=Object,a=globalThis,c=a.trustedTypes,l=c?c.emptyScript:\"\",p=a.reactiveElementPolyfillSupport,d=(t,s)=>t,u={toAttribute(t,s){switch(s){case Boolean:t=t?l:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,s){let i=t;switch(s){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},f=(t,s)=>!i(t,s),y={attribute:!0,type:String,converter:u,reflect:!1,hasChanged:f};Symbol.metadata??=Symbol(\"metadata\"),a.litPropertyMetadata??=new WeakMap;class b extends HTMLElement{static addInitializer(t){this._$Ei(),(this.l??=[]).push(t)}static get observedAttributes(){return this.finalize(),this._$Eh&&[...this._$Eh.keys()]}static createProperty(t,s=y){if(s.state&&(s.attribute=!1),this._$Ei(),this.elementProperties.set(t,s),!s.noAccessor){const i=Symbol(),r=this.getPropertyDescriptor(t,i,s);void 0!==r&&e(this.prototype,t,r)}}static getPropertyDescriptor(t,s,i){const{get:e,set:h}=r(this.prototype,t)??{get(){return this[s]},set(t){this[s]=t}};return{get(){return e?.call(this)},set(s){const r=e?.call(this);h.call(this,s),this.requestUpdate(t,r,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)??y}static _$Ei(){if(this.hasOwnProperty(d(\"elementProperties\")))return;const t=n(this);t.finalize(),void 0!==t.l&&(this.l=[...t.l]),this.elementProperties=new Map(t.elementProperties)}static finalize(){if(this.hasOwnProperty(d(\"finalized\")))return;if(this.finalized=!0,this._$Ei(),this.hasOwnProperty(d(\"properties\"))){const t=this.properties,s=[...h(t),...o(t)];for(const i of s)this.createProperty(i,t[i])}const t=this[Symbol.metadata];if(null!==t){const s=litPropertyMetadata.get(t);if(void 0!==s)for(const[t,i]of s)this.elementProperties.set(t,i)}this._$Eh=new Map;for(const[t,s]of this.elementProperties){const i=this._$Eu(t,s);void 0!==i&&this._$Eh.set(i,t)}this.elementStyles=this.finalizeStyles(this.styles)}static finalizeStyles(s){const i=[];if(Array.isArray(s)){const e=new Set(s.flat(1/0).reverse());for(const s of e)i.unshift(t(s))}else void 0!==s&&i.push(t(s));return i}static _$Eu(t,s){const i=s.attribute;return!1===i?void 0:\"string\"==typeof i?i:\"string\"==typeof t?t.toLowerCase():void 0}constructor(){super(),this._$Ep=void 0,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Em=null,this._$Ev()}_$Ev(){this._$ES=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$E_(),this.requestUpdate(),this.constructor.l?.forEach((t=>t(this)))}addController(t){(this._$EO??=new Set).add(t),void 0!==this.renderRoot&&this.isConnected&&t.hostConnected?.()}removeController(t){this._$EO?.delete(t)}_$E_(){const t=new Map,s=this.constructor.elementProperties;for(const i of s.keys())this.hasOwnProperty(i)&&(t.set(i,this[i]),delete this[i]);t.size>0&&(this._$Ep=t)}createRenderRoot(){const t=this.shadowRoot??this.attachShadow(this.constructor.shadowRootOptions);return s(t,this.constructor.elementStyles),t}connectedCallback(){this.renderRoot??=this.createRenderRoot(),this.enableUpdating(!0),this._$EO?.forEach((t=>t.hostConnected?.()))}enableUpdating(t){}disconnectedCallback(){this._$EO?.forEach((t=>t.hostDisconnected?.()))}attributeChangedCallback(t,s,i){this._$AK(t,i)}_$EC(t,s){const i=this.constructor.elementProperties.get(t),e=this.constructor._$Eu(t,i);if(void 0!==e&&!0===i.reflect){const r=(void 0!==i.converter?.toAttribute?i.converter:u).toAttribute(s,i.type);this._$Em=t,null==r?this.removeAttribute(e):this.setAttribute(e,r),this._$Em=null}}_$AK(t,s){const i=this.constructor,e=i._$Eh.get(t);if(void 0!==e&&this._$Em!==e){const t=i.getPropertyOptions(e),r=\"function\"==typeof t.converter?{fromAttribute:t.converter}:void 0!==t.converter?.fromAttribute?t.converter:u;this._$Em=e,this[e]=r.fromAttribute(s,t.type),this._$Em=null}}requestUpdate(t,s,i){if(void 0!==t){if(i??=this.constructor.getPropertyOptions(t),!(i.hasChanged??f)(this[t],s))return;this.P(t,s,i)}!1===this.isUpdatePending&&(this._$ES=this._$ET())}P(t,s,i){this._$AL.has(t)||this._$AL.set(t,s),!0===i.reflect&&this._$Em!==t&&(this._$Ej??=new Set).add(t)}async _$ET(){this.isUpdatePending=!0;try{await this._$ES}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){if(!this.isUpdatePending)return;if(!this.hasUpdated){if(this.renderRoot??=this.createRenderRoot(),this._$Ep){for(const[t,s]of this._$Ep)this[t]=s;this._$Ep=void 0}const t=this.constructor.elementProperties;if(t.size>0)for(const[s,i]of t)!0!==i.wrapped||this._$AL.has(s)||void 0===this[s]||this.P(s,this[s],i)}let t=!1;const s=this._$AL;try{t=this.shouldUpdate(s),t?(this.willUpdate(s),this._$EO?.forEach((t=>t.hostUpdate?.())),this.update(s)):this._$EU()}catch(s){throw t=!1,this._$EU(),s}t&&this._$AE(s)}willUpdate(t){}_$AE(t){this._$EO?.forEach((t=>t.hostUpdated?.())),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$EU(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$ES}shouldUpdate(t){return!0}update(t){this._$Ej&&=this._$Ej.forEach((t=>this._$EC(t,this[t]))),this._$EU()}updated(t){}firstUpdated(t){}}b.elementStyles=[],b.shadowRootOptions={mode:\"open\"},b[d(\"elementProperties\")]=new Map,b[d(\"finalized\")]=new Map,p?.({ReactiveElement:b}),(a.reactiveElementVersions??=[]).push(\"2.0.4\");export{b as ReactiveElement,u as defaultConverter,f as notEqual};\n//# sourceMappingURL=reactive-element.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\n\nimport {\n  getCompatibleStyle,\n  adoptStyles,\n  CSSResultGroup,\n  CSSResultOrNative,\n} from './css-tag.js';\nimport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n// In the Node build, this import will be injected by Rollup:\n// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';\n\nexport * from './css-tag.js';\nexport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n/**\n * Removes the `readonly` modifier from properties in the union K.\n *\n * This is a safer way to cast a value to a type with a mutable version of a\n * readonly field, than casting to an interface with the field re-declared\n * because it preserves the type of all the fields and warns on typos.\n */\ntype Mutable<T, K extends keyof T> = Omit<T, K> & {\n  -readonly [P in keyof Pick<T, K>]: P extends K ? T[P] : never;\n};\n\n// TODO (justinfagnani): Add `hasOwn` here when we ship ES2022\nconst {\n  is,\n  defineProperty,\n  getOwnPropertyDescriptor,\n  getOwnPropertyNames,\n  getOwnPropertySymbols,\n  getPrototypeOf,\n} = Object;\n\nconst NODE_MODE = false;\n\n// Lets a minifier replace globalThis references with a minified name\nconst global = globalThis;\n\nif (NODE_MODE) {\n  global.customElements ??= customElements;\n}\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nconst trustedTypes = (global as unknown as {trustedTypes?: {emptyScript: ''}})\n  .trustedTypes;\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nconst polyfillSupport = DEV_MODE\n  ? global.reactiveElementPolyfillSupportDevMode\n  : global.reactiveElementPolyfillSupport;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> = (global.litIssuedWarnings ??=\n    new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n\n  // Issue polyfill support warning.\n  if (global.ShadyDOM?.inUse && polyfillSupport === undefined) {\n    issueWarning(\n      'polyfill-support-missing',\n      `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` +\n        `the \\`polyfill-support\\` module has not been loaded.`\n    );\n  }\n}\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace ReactiveUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry = Update;\n    export interface Update {\n      kind: 'update';\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: ReactiveUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<ReactiveUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string | null, type?: TypeHint): Type;\n\n  /**\n   * Called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n  | ComplexAttributeConverter<Type>\n  | ((value: string | null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * When set to `true`, indicates the property is internal private state. The\n   * property should not be set by users. When using TypeScript, this property\n   * should be marked as `private` or `protected`, and it is also a common\n   * practice to use a leading `_` in the name. The property is not added to\n   * `observedAttributes`.\n   */\n  readonly state?: boolean;\n\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean | string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n\n  /**\n   * Whether this property is wrapping accessors. This is set by `@property`\n   * to control the initial value change and reflection logic.\n   *\n   * @internal\n   */\n  wrapped?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * A Map of property keys to values.\n *\n * Takes an optional type parameter T, which when specified as a non-any,\n * non-unknown type, will make the Map more strongly-typed, associating the map\n * keys with their corresponding value type on T.\n *\n * Use `PropertyValues<this>` when overriding ReactiveElement.update() and\n * other lifecycle methods in order to get stronger type-checking on keys\n * and values.\n */\n// This type is conditional so that if the parameter T is not specified, or\n// is `any`, the type will include `Map<PropertyKey, unknown>`. Since T is not\n// given in the uses of PropertyValues in this file, all uses here fallback to\n// meaning `Map<PropertyKey, unknown>`, but if a developer uses\n// `PropertyValues<this>` (or any other value for T) they will get a\n// strongly-typed Map type.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PropertyValues<T = any> = T extends object\n  ? PropertyValueMap<T>\n  : Map<PropertyKey, unknown>;\n\n/**\n * Do not use, instead prefer {@linkcode PropertyValues}.\n */\n// This type must be exported such that JavaScript generated by the Google\n// Closure Compiler can import a type reference.\nexport interface PropertyValueMap<T> extends Map<PropertyKey, unknown> {\n  get<K extends keyof T>(k: K): T[K] | undefined;\n  set<K extends keyof T>(key: K, value: T[K]): this;\n  has<K extends keyof T>(k: K): boolean;\n  delete<K extends keyof T>(k: K): boolean;\n}\n\nexport const defaultConverter: ComplexAttributeConverter = {\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n\n  fromAttribute(value: string | null, type?: unknown) {\n    let fromValue: unknown = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value!) as unknown;\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  },\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean =>\n  !is(value, old);\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n/**\n * A string representing one of the supported dev mode warning categories.\n */\nexport type WarningKind =\n  | 'change-in-update'\n  | 'migration'\n  | 'async-perform-update';\n\nexport type Initializer = (element: ReactiveElement) => void;\n\n// Temporary, until google3 is on TypeScript 5.2\ndeclare global {\n  interface SymbolConstructor {\n    readonly metadata: unique symbol;\n  }\n}\n\n// Ensure metadata is enabled. TypeScript does not polyfill\n// Symbol.metadata, so we must ensure that it exists.\n(Symbol as {metadata: symbol}).metadata ??= Symbol('metadata');\n\ndeclare global {\n  // This is public global API, do not change!\n  // eslint-disable-next-line no-var\n  var litPropertyMetadata: WeakMap<\n    object,\n    Map<PropertyKey, PropertyDeclaration>\n  >;\n}\n\n// Map from a class's metadata object to property options\n// Note that we must use nullish-coalescing assignment so that we only use one\n// map even if we load multiple version of this module.\nglobal.litPropertyMetadata ??= new WeakMap<\n  object,\n  Map<PropertyKey, PropertyDeclaration>\n>();\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclasses to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class ReactiveElement\n  // In the Node build, this `extends` clause will be substituted with\n  // `(globalThis.HTMLElement ?? HTMLElement)`.\n  //\n  // This way, we will first prefer any global `HTMLElement` polyfill that the\n  // user has assigned, and then fall back to the `HTMLElement` shim which has\n  // been imported (see note at the top of this file about how this import is\n  // generated by Rollup). Note that the `HTMLElement` variable has been\n  // shadowed by this import, so it no longer refers to the global.\n  extends HTMLElement\n  implements ReactiveControllerHost\n{\n  // Note: these are patched in only in DEV_MODE.\n  /**\n   * Read or set all the enabled warning categories for this class.\n   *\n   * This property is only used in development builds.\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enabledWarnings?: WarningKind[];\n\n  /**\n   * Enable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Enable for all ReactiveElement subclasses\n   * ReactiveElement.enableWarning?.('migration');\n   *\n   * // Enable for only MyElement and subclasses\n   * MyElement.enableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Disable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Disable for all ReactiveElement subclasses\n   * ReactiveElement.disableWarning?.('migration');\n   *\n   * // Disable for only MyElement and subclasses\n   * MyElement.disableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static disableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Adds an initializer function to the class that is called during instance\n   * construction.\n   *\n   * This is useful for code that runs against a `ReactiveElement`\n   * subclass, such as a decorator, that needs to do work for each\n   * instance, such as setting up a `ReactiveController`.\n   *\n   * ```ts\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n   *   target.addInitializer((instance: ReactiveElement) => {\n   *     // This is run during construction of the element\n   *     new MyController(instance);\n   *   });\n   * }\n   * ```\n   *\n   * Decorating a field will then cause each instance to run an initializer\n   * that adds a controller:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   @myDecorator foo;\n   * }\n   * ```\n   *\n   * Initializers are stored per-constructor. Adding an initializer to a\n   * subclass does not add it to a superclass. Since initializers are run in\n   * constructors, initializers will run in order of the class hierarchy,\n   * starting with superclasses and progressing to the instance's class.\n   *\n   * @nocollapse\n   */\n  static addInitializer(initializer: Initializer) {\n    this.__prepare();\n    (this._initializers ??= []).push(initializer);\n  }\n\n  static _initializers?: Initializer[];\n\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   * @nocollapse\n   */\n  private static __attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having been finalized, which includes creating properties\n   * from `static properties`, but does *not* include all properties created\n   * from decorators.\n   * @nocollapse\n   */\n  protected static finalized: true | undefined;\n\n  /**\n   * Memoized list of all element properties, including any superclass\n   * properties. Created lazily on user subclasses when finalizing the class.\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static elementProperties: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring reactive properties. When\n   * a reactive property is set the element will update and render.\n   *\n   * By default properties are public fields, and as such, they should be\n   * considered as primarily settable by element users, either via attribute or\n   * the property itself.\n   *\n   * Generally, properties that are changed by the element should be private or\n   * protected fields and should use the `state: true` option. Properties\n   * marked as `state` do not reflect from the corresponding attribute\n   *\n   * However, sometimes element code does need to set a public property. This\n   * should typically only be done in response to user interaction, and an event\n   * should be fired informing the user; for example, a checkbox sets its\n   * `checked` property when clicked and fires a `changed` event. Mutating\n   * public properties should typically not be done for non-primitive (object or\n   * array) properties. In other cases when an element needs to manage state, a\n   * private property set with the `state: true` option should be used. When\n   * needed, state properties can be initialized via public properties to\n   * facilitate complex interactions.\n   * @nocollapse\n   * @category properties\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Memoized list of all element styles.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category styles\n   */\n  static elementStyles: Array<CSSResultOrNative> = [];\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the {@linkcode css} tag function, via constructible stylesheets, or\n   * imported from native CSS module scripts.\n   *\n   * Note on Content Security Policy:\n   *\n   * Element styles are implemented with `<style>` tags when the browser doesn't\n   * support adopted StyleSheets. To use such `<style>` tags with the style-src\n   * CSP directive, the style-src value must either include 'unsafe-inline' or\n   * `nonce-<base64-value>` with `<base64-value>` replaced be a server-generated\n   * nonce.\n   *\n   * To provide a nonce to use on generated `<style>` elements, set\n   * `window.litNonce` to a server-generated nonce in your page's HTML, before\n   * loading application code:\n   *\n   * ```html\n   * <script>\n   *   // Generated and unique per request:\n   *   window.litNonce = 'a1b2c3d4';\n   * </script>\n   * ```\n   * @nocollapse\n   * @category styles\n   */\n  static styles?: CSSResultGroup;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   * @category attributes\n   */\n  static get observedAttributes() {\n    // Ensure we've created all properties\n    this.finalize();\n    // this.__attributeToPropertyMap is only undefined after finalize() in\n    // ReactiveElement itself. ReactiveElement.observedAttributes is only\n    // accessed with ReactiveElement as the receiver when a subclass or mixin\n    // calls super.observedAttributes\n    return (\n      this.__attributeToPropertyMap && [...this.__attributeToPropertyMap.keys()]\n    );\n  }\n\n  private __instanceProperties?: PropertyValues = undefined;\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a {@linkcode PropertyDeclaration} for the property with the\n   * given options. The property setter calls the property's `hasChanged`\n   * property option or uses a strict identity check to determine whether or not\n   * to request an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * ```ts\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static createProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    // If this is a state property, force the attribute to false.\n    if (options.state) {\n      (options as Mutable<PropertyDeclaration, 'attribute'>).attribute = false;\n    }\n    this.__prepare();\n    this.elementProperties.set(name, options);\n    if (!options.noAccessor) {\n      const key = DEV_MODE\n        ? // Use Symbol.for in dev mode to make it easier to maintain state\n          // when doing HMR.\n          Symbol.for(`${String(name)} (@property() cache)`)\n        : Symbol();\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        defineProperty(this.prototype, name, descriptor);\n      }\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   static getPropertyDescriptor(name, key, options) {\n   *     const defaultDescriptor =\n   *         super.getPropertyDescriptor(name, key, options);\n   *     const setter = defaultDescriptor.set;\n   *     return {\n   *       get: defaultDescriptor.get,\n   *       set(value) {\n   *         setter.call(this, value);\n   *         // custom action.\n   *       },\n   *       configurable: true,\n   *       enumerable: true\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  protected static getPropertyDescriptor(\n    name: PropertyKey,\n    key: string | symbol,\n    options: PropertyDeclaration\n  ): PropertyDescriptor | undefined {\n    const {get, set} = getOwnPropertyDescriptor(this.prototype, name) ?? {\n      get(this: ReactiveElement) {\n        return this[key as keyof typeof this];\n      },\n      set(this: ReactiveElement, v: unknown) {\n        (this as unknown as Record<string | symbol, unknown>)[key] = v;\n      },\n    };\n    if (DEV_MODE && get == null) {\n      if ('value' in (getOwnPropertyDescriptor(this.prototype, name) ?? {})) {\n        throw new Error(\n          `Field ${JSON.stringify(String(name))} on ` +\n            `${this.name} was declared as a reactive property ` +\n            `but it's actually declared as a value on the prototype. ` +\n            `Usually this is due to using @property or @state on a method.`\n        );\n      }\n      issueWarning(\n        'reactive-property-without-getter',\n        `Field ${JSON.stringify(String(name))} on ` +\n          `${this.name} was declared as a reactive property ` +\n          `but it does not have a getter. This will be an error in a ` +\n          `future version of Lit.`\n      );\n    }\n    return {\n      get(this: ReactiveElement) {\n        return get?.call(this);\n      },\n      set(this: ReactiveElement, value: unknown) {\n        const oldValue = get?.call(this);\n        set!.call(this, value);\n        this.requestUpdate(name, oldValue, options);\n      },\n      configurable: true,\n      enumerable: true,\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a `PropertyDeclaration` via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override\n   * {@linkcode createProperty}.\n   *\n   * @nocollapse\n   * @final\n   * @category properties\n   */\n  static getPropertyOptions(name: PropertyKey) {\n    return this.elementProperties.get(name) ?? defaultPropertyDeclaration;\n  }\n\n  // Temporary, until google3 is on TypeScript 5.2\n  declare static [Symbol.metadata]: object & Record<PropertyKey, unknown>;\n\n  /**\n   * Initializes static own properties of the class used in bookkeeping\n   * for element properties, initializers, etc.\n   *\n   * Can be called multiple times by code that needs to ensure these\n   * properties exist before using them.\n   *\n   * This method ensures the superclass is finalized so that inherited\n   * property metadata can be copied down.\n   * @nocollapse\n   */\n  private static __prepare() {\n    if (\n      this.hasOwnProperty(JSCompiler_renameProperty('elementProperties', this))\n    ) {\n      // Already prepared\n      return;\n    }\n    // Finalize any superclasses\n    const superCtor = getPrototypeOf(this) as typeof ReactiveElement;\n    superCtor.finalize();\n\n    // Create own set of initializers for this class if any exist on the\n    // superclass and copy them down. Note, for a small perf boost, avoid\n    // creating initializers unless needed.\n    if (superCtor._initializers !== undefined) {\n      this._initializers = [...superCtor._initializers];\n    }\n    // Initialize elementProperties from the superclass\n    this.elementProperties = new Map(superCtor.elementProperties);\n  }\n\n  /**\n   * Finishes setting up the class so that it's ready to be registered\n   * as a custom element and instantiated.\n   *\n   * This method is called by the ReactiveElement.observedAttributes getter.\n   * If you override the observedAttributes getter, you must either call\n   * super.observedAttributes to trigger finalization, or call finalize()\n   * yourself.\n   *\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this))) {\n      return;\n    }\n    this.finalized = true;\n    this.__prepare();\n\n    // Create properties from the static properties block:\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      const propKeys = [\n        ...getOwnPropertyNames(props),\n        ...getOwnPropertySymbols(props),\n      ] as Array<keyof typeof props>;\n      for (const p of propKeys) {\n        this.createProperty(p, props[p]);\n      }\n    }\n\n    // Create properties from standard decorator metadata:\n    const metadata = this[Symbol.metadata];\n    if (metadata !== null) {\n      const properties = litPropertyMetadata.get(metadata);\n      if (properties !== undefined) {\n        for (const [p, options] of properties) {\n          this.elementProperties.set(p, options);\n        }\n      }\n    }\n\n    // Create the attribute-to-property map\n    this.__attributeToPropertyMap = new Map();\n    for (const [p, options] of this.elementProperties) {\n      const attr = this.__attributeNameForProperty(p, options);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n      }\n    }\n\n    this.elementStyles = this.finalizeStyles(this.styles);\n\n    if (DEV_MODE) {\n      if (this.hasOwnProperty('createProperty')) {\n        issueWarning(\n          'no-override-create-property',\n          'Overriding ReactiveElement.createProperty() is deprecated. ' +\n            'The override will not be called with standard decorators'\n        );\n      }\n      if (this.hasOwnProperty('getPropertyDescriptor')) {\n        issueWarning(\n          'no-override-get-property-descriptor',\n          'Overriding ReactiveElement.getPropertyDescriptor() is deprecated. ' +\n            'The override will not be called with standard decorators'\n        );\n      }\n    }\n  }\n\n  /**\n   * Options used when calling `attachShadow`. Set this property to customize\n   * the options for the shadowRoot; for example, to create a closed\n   * shadowRoot: `{mode: 'closed'}`.\n   *\n   * Note, these options are used in `createRenderRoot`. If this method\n   * is customized, options should be respected if possible.\n   * @nocollapse\n   * @category rendering\n   */\n  static shadowRootOptions: ShadowRootInit = {mode: 'open'};\n\n  /**\n   * Takes the styles the user supplied via the `static styles` property and\n   * returns the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * Styles are deduplicated preserving the _last_ instance in the list. This\n   * is a performance optimization to avoid duplicated styles that can occur\n   * especially when composing via subclassing. The last item is kept to try\n   * to preserve the cascade order with the assumption that it's most important\n   * that last added styles override previous styles.\n   *\n   * @nocollapse\n   * @category styles\n   */\n  protected static finalizeStyles(\n    styles?: CSSResultGroup\n  ): Array<CSSResultOrNative> {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // Casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set((styles as Array<unknown>).flat(Infinity).reverse());\n      // Then preserve original order by adding the set items in reverse order.\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s as CSSResultOrNative));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   * @category rendering\n   */\n  readonly renderRoot!: HTMLElement | DocumentFragment;\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static __attributeNameForProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration\n  ) {\n    const attribute = options.attribute;\n    return attribute === false\n      ? undefined\n      : typeof attribute === 'string'\n      ? attribute\n      : typeof name === 'string'\n      ? name.toLowerCase()\n      : undefined;\n  }\n\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private __updatePromise!: Promise<boolean>;\n\n  /**\n   * True if there is a pending update as a result of calling `requestUpdate()`.\n   * Should only be read.\n   * @category updates\n   */\n  isUpdatePending = false;\n\n  /**\n   * Is set to `true` after the first update. The element code cannot assume\n   * that `renderRoot` exists before the element `hasUpdated`.\n   * @category updates\n   */\n  hasUpdated = false;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   *\n   * @internal\n   */\n  _$changedProperties!: PropertyValues;\n\n  /**\n   * Properties that should be reflected when updated.\n   */\n  private __reflectingProperties?: Set<PropertyKey>;\n\n  /**\n   * Name of currently reflecting property\n   */\n  private __reflectingProperty: PropertyKey | null = null;\n\n  /**\n   * Set of controllers.\n   */\n  private __controllers?: Set<ReactiveController>;\n\n  constructor() {\n    super();\n    this.__initialize();\n  }\n\n  /**\n   * Internal only override point for customizing work done when elements\n   * are constructed.\n   */\n  private __initialize() {\n    this.__updatePromise = new Promise<boolean>(\n      (res) => (this.enableUpdating = res)\n    );\n    this._$changedProperties = new Map();\n    // This enqueues a microtask that ust run before the first update, so it\n    // must be called before requestUpdate()\n    this.__saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdate();\n    (this.constructor as typeof ReactiveElement)._initializers?.forEach((i) =>\n      i(this)\n    );\n  }\n\n  /**\n   * Registers a `ReactiveController` to participate in the element's reactive\n   * update cycle. The element automatically calls into any registered\n   * controllers during its lifecycle callbacks.\n   *\n   * If the element is connected when `addController()` is called, the\n   * controller's `hostConnected()` callback will be immediately called.\n   * @category controllers\n   */\n  addController(controller: ReactiveController) {\n    (this.__controllers ??= new Set()).add(controller);\n    // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n    if (this.renderRoot !== undefined && this.isConnected) {\n      controller.hostConnected?.();\n    }\n  }\n\n  /**\n   * Removes a `ReactiveController` from the element.\n   * @category controllers\n   */\n  removeController(controller: ReactiveController) {\n    this.__controllers?.delete(controller);\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private __saveInstanceProperties() {\n    const instanceProperties = new Map<PropertyKey, unknown>();\n    const elementProperties = (this.constructor as typeof ReactiveElement)\n      .elementProperties;\n    for (const p of elementProperties.keys() as IterableIterator<keyof this>) {\n      if (this.hasOwnProperty(p)) {\n        instanceProperties.set(p, this[p]);\n        delete this[p];\n      }\n    }\n    if (instanceProperties.size > 0) {\n      this.__instanceProperties = instanceProperties;\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   *\n   * @return Returns a node into which to render.\n   * @category rendering\n   */\n  protected createRenderRoot(): HTMLElement | DocumentFragment {\n    const renderRoot =\n      this.shadowRoot ??\n      this.attachShadow(\n        (this.constructor as typeof ReactiveElement).shadowRootOptions\n      );\n    adoptStyles(\n      renderRoot,\n      (this.constructor as typeof ReactiveElement).elementStyles\n    );\n    return renderRoot;\n  }\n\n  /**\n   * On first connection, creates the element's renderRoot, sets up\n   * element styling, and enables updating.\n   * @category lifecycle\n   */\n  connectedCallback() {\n    // Create renderRoot before controllers `hostConnected`\n    (this as Mutable<typeof this, 'renderRoot'>).renderRoot ??=\n      this.createRenderRoot();\n    this.enableUpdating(true);\n    this.__controllers?.forEach((c) => c.hostConnected?.());\n  }\n\n  /**\n   * Note, this method should be considered final and not overridden. It is\n   * overridden on the element instance with a function that triggers the first\n   * update.\n   * @category updates\n   */\n  protected enableUpdating(_requestedUpdate: boolean) {}\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    this.__controllers?.forEach((c) => c.hostDisconnected?.());\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * Specifically, when an attribute is set, the corresponding property is set.\n   * You should rarely need to implement this callback. If this method is\n   * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n   * called.\n   *\n   * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\n   * on MDN for more information about the `attributeChangedCallback`.\n   * @category attributes\n   */\n  attributeChangedCallback(\n    name: string,\n    _old: string | null,\n    value: string | null\n  ) {\n    this._$attributeToProperty(name, value);\n  }\n\n  private __propertyToAttribute(name: PropertyKey, value: unknown) {\n    const elemProperties: PropertyDeclarationMap = (\n      this.constructor as typeof ReactiveElement\n    ).elementProperties;\n    const options = elemProperties.get(name)!;\n    const attr = (\n      this.constructor as typeof ReactiveElement\n    ).__attributeNameForProperty(name, options);\n    if (attr !== undefined && options.reflect === true) {\n      const converter =\n        (options.converter as ComplexAttributeConverter)?.toAttribute !==\n        undefined\n          ? (options.converter as ComplexAttributeConverter)\n          : defaultConverter;\n      const attrValue = converter.toAttribute!(value, options.type);\n      if (\n        DEV_MODE &&\n        (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n          'migration'\n        ) &&\n        attrValue === undefined\n      ) {\n        issueWarning(\n          'undefined-attribute-value',\n          `The attribute value for the ${name as string} property is ` +\n            `undefined on element ${this.localName}. The attribute will be ` +\n            `removed, but in the previous version of \\`ReactiveElement\\`, ` +\n            `the attribute would not have changed.`\n        );\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /** @internal */\n  _$attributeToProperty(name: string, value: string | null) {\n    const ctor = this.constructor as typeof ReactiveElement;\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    const propName = (ctor.__attributeToPropertyMap as AttributeMap).get(name);\n    // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter =\n        typeof options.converter === 'function'\n          ? {fromAttribute: options.converter}\n          : options.converter?.fromAttribute !== undefined\n          ? options.converter\n          : defaultConverter;\n      // mark state reflecting\n      this.__reflectingProperty = propName;\n      this[propName as keyof this] = converter.fromAttribute!(\n        value,\n        options.type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ) as any;\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should be called\n   * when an element should update based on some state not triggered by setting\n   * a reactive property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored.\n   *\n   * @param name name of requesting property\n   * @param oldValue old value of requesting property\n   * @param options property options to use instead of the previously\n   *     configured options\n   * @category updates\n   */\n  requestUpdate(\n    name?: PropertyKey,\n    oldValue?: unknown,\n    options?: PropertyDeclaration\n  ): void {\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      if (DEV_MODE && (name as unknown) instanceof Event) {\n        issueWarning(\n          ``,\n          `The requestUpdate() method was called with an Event as the property name. This is probably a mistake caused by binding this.requestUpdate as an event listener. Instead bind a function that will call it with no arguments: () => this.requestUpdate()`\n        );\n      }\n      options ??= (\n        this.constructor as typeof ReactiveElement\n      ).getPropertyOptions(name);\n      const hasChanged = options.hasChanged ?? notEqual;\n      const newValue = this[name as keyof this];\n      if (hasChanged(newValue, oldValue)) {\n        this._$changeProperty(name, oldValue, options);\n      } else {\n        // Abort the request if the property should not be considered changed.\n        return;\n      }\n    }\n    if (this.isUpdatePending === false) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _$changeProperty(\n    name: PropertyKey,\n    oldValue: unknown,\n    options: PropertyDeclaration\n  ) {\n    // TODO (justinfagnani): Create a benchmark of Map.has() + Map.set(\n    // vs just Map.set()\n    if (!this._$changedProperties.has(name)) {\n      this._$changedProperties.set(name, oldValue);\n    }\n    // Add to reflecting properties set.\n    // Note, it's important that every change has a chance to add the\n    // property to `__reflectingProperties`. This ensures setting\n    // attribute + property reflects correctly.\n    if (options.reflect === true && this.__reflectingProperty !== name) {\n      (this.__reflectingProperties ??= new Set<PropertyKey>()).add(name);\n    }\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this.__updatePromise;\n    } catch (e) {\n      // Refire any previous errors async so they do not disrupt the update\n      // cycle. Errors are refired so developers have a chance to observe\n      // them, and this can be done by implementing\n      // `window.onunhandledrejection`.\n      Promise.reject(e);\n    }\n    const result = this.scheduleUpdate();\n    // If `scheduleUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n\n  /**\n   * Schedules an element update. You can override this method to change the\n   * timing of updates by returning a Promise. The update will await the\n   * returned Promise, and you should resolve the Promise to allow the update\n   * to proceed. If this method is overridden, `super.scheduleUpdate()`\n   * must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```ts\n   * override protected async scheduleUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.scheduleUpdate();\n   * }\n   * ```\n   * @category updates\n   */\n  protected scheduleUpdate(): void | Promise<unknown> {\n    const result = this.performUpdate();\n    if (\n      DEV_MODE &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n        'async-perform-update'\n      ) &&\n      typeof (result as unknown as Promise<unknown> | undefined)?.then ===\n        'function'\n    ) {\n      issueWarning(\n        'async-perform-update',\n        `Element ${this.localName} returned a Promise from performUpdate(). ` +\n          `This behavior is deprecated and will be removed in a future ` +\n          `version of ReactiveElement.`\n      );\n    }\n    return result;\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * Call `performUpdate()` to immediately process a pending update. This should\n   * generally not be needed, but it can be done in rare cases when you need to\n   * update synchronously.\n   *\n   * @category updates\n   */\n  protected performUpdate(): void {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this.isUpdatePending) {\n      return;\n    }\n    debugLogEvent?.({kind: 'update'});\n    if (!this.hasUpdated) {\n      // Create renderRoot before first update. This occurs in `connectedCallback`\n      // but is done here to support out of tree calls to `enableUpdating`/`performUpdate`.\n      (this as Mutable<typeof this, 'renderRoot'>).renderRoot ??=\n        this.createRenderRoot();\n      if (DEV_MODE) {\n        // Produce warning if any reactive properties on the prototype are\n        // shadowed by class fields. Instance fields set before upgrade are\n        // deleted by this point, so any own property is caused by class field\n        // initialization in the constructor.\n        const ctor = this.constructor as typeof ReactiveElement;\n        const shadowedProperties = [...ctor.elementProperties.keys()].filter(\n          (p) => this.hasOwnProperty(p) && p in getPrototypeOf(this)\n        );\n        if (shadowedProperties.length) {\n          throw new Error(\n            `The following properties on element ${this.localName} will not ` +\n              `trigger updates as expected because they are set using class ` +\n              `fields: ${shadowedProperties.join(', ')}. ` +\n              `Native class fields and some compiled output will overwrite ` +\n              `accessors used for detecting changes. See ` +\n              `https://lit.dev/msg/class-field-shadowing ` +\n              `for more information.`\n          );\n        }\n      }\n      // Mixin instance properties once, if they exist.\n      if (this.__instanceProperties) {\n        // TODO (justinfagnani): should we use the stored value? Could a new value\n        // have been set since we stored the own property value?\n        for (const [p, value] of this.__instanceProperties) {\n          this[p as keyof this] = value as this[keyof this];\n        }\n        this.__instanceProperties = undefined;\n      }\n      // Trigger initial value reflection and populate the initial\n      // changedProperties map, but only for the case of experimental\n      // decorators on accessors, which will not have already populated the\n      // changedProperties map. We can't know if these accessors had\n      // initializers, so we just set them anyway - a difference from\n      // experimental decorators on fields and standard decorators on\n      // auto-accessors.\n      // For context why experimentalDecorators with auto accessors are handled\n      // specifically also see:\n      // https://github.com/lit/lit/pull/4183#issuecomment-1711959635\n      const elementProperties = (this.constructor as typeof ReactiveElement)\n        .elementProperties;\n      if (elementProperties.size > 0) {\n        for (const [p, options] of elementProperties) {\n          if (\n            options.wrapped === true &&\n            !this._$changedProperties.has(p) &&\n            this[p as keyof this] !== undefined\n          ) {\n            this._$changeProperty(p, this[p as keyof this], options);\n          }\n        }\n      }\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        this.__controllers?.forEach((c) => c.hostUpdate?.());\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this.__markUpdated();\n      throw e;\n    }\n    // The update is no longer considered pending and further updates are now allowed.\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n\n  /**\n   * Invoked before `update()` to compute values needed during the update.\n   *\n   * Implement `willUpdate` to compute property values that depend on other\n   * properties and are used in the rest of the update process.\n   *\n   * ```ts\n   * willUpdate(changedProperties) {\n   *   // only need to check changed properties for an expensive computation.\n   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n   *   }\n   * }\n   *\n   * render() {\n   *   return html`SHA: ${this.sha}`;\n   * }\n   * ```\n   *\n   * @category updates\n   */\n  protected willUpdate(_changedProperties: PropertyValues): void {}\n\n  // Note, this is an override point for polyfill-support.\n  // @internal\n  _$didUpdate(changedProperties: PropertyValues) {\n    this.__controllers?.forEach((c) => c.hostUpdated?.());\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (\n      DEV_MODE &&\n      this.isUpdatePending &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n        'change-in-update'\n      )\n    ) {\n      issueWarning(\n        'change-in-update',\n        `Element ${this.localName} scheduled an update ` +\n          `(generally because a property was set) ` +\n          `after an update completed, causing a new update to be scheduled. ` +\n          `This is inefficient and should be avoided unless the next update ` +\n          `can only be scheduled as a side effect of the previous update.`\n      );\n    }\n  }\n\n  private __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super.getUpdateComplete()`, then any subsequent state.\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  get updateComplete(): Promise<boolean> {\n    return this.getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   override async getUpdateComplete() {\n   *     const result = await super.getUpdateComplete();\n   *     await this._myChild.updateComplete;\n   *     return result;\n   *   }\n   * }\n   * ```\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  protected getUpdateComplete(): Promise<boolean> {\n    return this.__updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update()` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected update(_changedProperties: PropertyValues) {\n    // The forEach() expression will only run when when __reflectingProperties is\n    // defined, and it returns undefined, setting __reflectingProperties to\n    // undefined\n    this.__reflectingProperties &&= this.__reflectingProperties.forEach((p) =>\n      this.__propertyToAttribute(p, this[p as keyof this])\n    ) as undefined;\n    this.__markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected updated(_changedProperties: PropertyValues) {}\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * ```ts\n   * firstUpdated() {\n   *   this.renderRoot.getElementById('my-text-area').focus();\n   * }\n   * ```\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {}\n}\n// Assigned here to work around a jscompiler bug with static fields\n// when compiling to ES5.\n// https://github.com/google/closure-compiler/issues/3177\n(ReactiveElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('elementProperties', ReactiveElement)\n] = new Map();\n(ReactiveElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('finalized', ReactiveElement)\n] = new Map();\n\n// Apply polyfills if available\npolyfillSupport?.({ReactiveElement});\n\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = [\n    'change-in-update',\n    'async-perform-update',\n  ];\n  const ensureOwnWarnings = function (ctor: typeof ReactiveElement) {\n    if (\n      !ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))\n    ) {\n      ctor.enabledWarnings = ctor.enabledWarnings!.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    if (!this.enabledWarnings!.includes(warning)) {\n      this.enabledWarnings!.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings!.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings!.splice(i, 1);\n    }\n  };\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n(global.reactiveElementVersions ??= []).push('2.0.4');\nif (DEV_MODE && global.reactiveElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t=globalThis,e=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&\"adoptedStyleSheets\"in Document.prototype&&\"replace\"in CSSStyleSheet.prototype,s=Symbol(),o=new WeakMap;class n{constructor(t,e,o){if(this._$cssResult$=!0,o!==s)throw Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const s=this.t;if(e&&void 0===t){const e=void 0!==s&&1===s.length;e&&(t=o.get(s)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&o.set(s,t))}return t}toString(){return this.cssText}}const r=t=>new n(\"string\"==typeof t?t:t+\"\",void 0,s),i=(t,...e)=>{const o=1===t.length?t[0]:e.reduce(((e,s,o)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if(\"number\"==typeof t)return t;throw Error(\"Value passed to 'css' function must be a 'css' function result: \"+t+\". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\")})(s)+t[o+1]),t[0]);return new n(o,t,s)},S=(s,o)=>{if(e)s.adoptedStyleSheets=o.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet));else for(const e of o){const o=document.createElement(\"style\"),n=t.litNonce;void 0!==n&&o.setAttribute(\"nonce\",n),o.textContent=e.cssText,s.appendChild(o)}},c=e?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e=\"\";for(const s of t.cssRules)e+=s.cssText;return r(e)})(t):t;export{n as CSSResult,S as adoptStyles,i as css,c as getCompatibleStyle,e as supportsAdoptingStyleSheets,r as unsafeCSS};\n//# sourceMappingURL=css-tag.js.map\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nconst NODE_MODE = false;\n\n// Allows minifiers to rename references to globalThis\nconst global = globalThis;\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets: boolean =\n  global.ShadowRoot &&\n  (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) &&\n  'adoptedStyleSheets' in Document.prototype &&\n  'replace' in CSSStyleSheet.prototype;\n\n/**\n * A CSSResult or native CSSStyleSheet.\n *\n * In browsers that support constructible CSS style sheets, CSSStyleSheet\n * object can be used for styling along side CSSResult from the `css`\n * template tag.\n */\nexport type CSSResultOrNative = CSSResult | CSSStyleSheet;\n\nexport type CSSResultArray = Array<CSSResultOrNative | CSSResultArray>;\n\n/**\n * A single CSSResult, CSSStyleSheet, or an array or nested arrays of those.\n */\nexport type CSSResultGroup = CSSResultOrNative | CSSResultArray;\n\nconst constructionToken = Symbol();\n\nconst cssTagCache = new WeakMap<TemplateStringsArray, CSSStyleSheet>();\n\n/**\n * A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n *\n * CSSResult is the return value of `css`-tagged template literals and\n * `unsafeCSS()`. In order to ensure that CSSResults are only created via the\n * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.\n */\nexport class CSSResult {\n  // This property needs to remain unminified.\n  ['_$cssResult$'] = true;\n  readonly cssText: string;\n  private _styleSheet?: CSSStyleSheet;\n  private _strings: TemplateStringsArray | undefined;\n\n  private constructor(\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n        'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.'\n      );\n    }\n    this.cssText = cssText;\n    this._strings = strings;\n  }\n\n  // This is a getter so that it's lazy. In practice, this means stylesheets\n  // are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet | undefined {\n    // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is\n    // constructable.\n    let styleSheet = this._styleSheet;\n    const strings = this._strings;\n    if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n      const cacheable = strings !== undefined && strings.length === 1;\n      if (cacheable) {\n        styleSheet = cssTagCache.get(strings);\n      }\n      if (styleSheet === undefined) {\n        (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(\n          this.cssText\n        );\n        if (cacheable) {\n          cssTagCache.set(strings, styleSheet);\n        }\n      }\n    }\n    return styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\ntype ConstructableCSSResult = CSSResult & {\n  new (\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ): CSSResult;\n};\n\nconst textFromCSSResult = (value: CSSResultGroup | number) => {\n  // This property needs to remain unminified.\n  if ((value as CSSResult)['_$cssResult$'] === true) {\n    return (value as CSSResult).cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n      `Value passed to 'css' function must be a 'css' function result: ` +\n        `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +\n        `to ensure page security.`\n    );\n  }\n};\n\n/**\n * Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) =>\n  new (CSSResult as ConstructableCSSResult)(\n    typeof value === 'string' ? value : String(value),\n    undefined,\n    constructionToken\n  );\n\n/**\n * A template literal tag which can be used with LitElement's\n * {@linkcode LitElement.styles} property to set element styles.\n *\n * For security reasons, only literal string values and number may be used in\n * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\n * may be used inside an expression.\n */\nexport const css = (\n  strings: TemplateStringsArray,\n  ...values: (CSSResultGroup | number)[]\n): CSSResult => {\n  const cssText =\n    strings.length === 1\n      ? strings[0]\n      : values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]\n        );\n  return new (CSSResult as ConstructableCSSResult)(\n    cssText,\n    strings,\n    constructionToken\n  );\n};\n\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\nexport const adoptStyles = (\n  renderRoot: ShadowRoot,\n  styles: Array<CSSResultOrNative>\n) => {\n  if (supportsAdoptingStyleSheets) {\n    (renderRoot as ShadowRoot).adoptedStyleSheets = styles.map((s) =>\n      s instanceof CSSStyleSheet ? s : s.styleSheet!\n    );\n  } else {\n    for (const s of styles) {\n      const style = document.createElement('style');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const nonce = (global as any)['litNonce'];\n      if (nonce !== undefined) {\n        style.setAttribute('nonce', nonce);\n      }\n      style.textContent = (s as CSSResult).cssText;\n      renderRoot.appendChild(style);\n    }\n  }\n};\n\nconst cssResultFromStyleSheet = (sheet: CSSStyleSheet) => {\n  let cssText = '';\n  for (const rule of sheet.cssRules) {\n    cssText += rule.cssText;\n  }\n  return unsafeCSS(cssText);\n};\n\nexport const getCompatibleStyle =\n  supportsAdoptingStyleSheets ||\n  (NODE_MODE && global.CSSStyleSheet === undefined)\n    ? (s: CSSResultOrNative) => s\n    : (s: CSSResultOrNative) =>\n        s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t=globalThis,i=t.trustedTypes,s=i?i.createPolicy(\"lit-html\",{createHTML:t=>t}):void 0,e=\"$lit$\",h=`lit$${Math.random().toFixed(9).slice(2)}$`,o=\"?\"+h,n=`<${o}>`,r=document,l=()=>r.createComment(\"\"),c=t=>null===t||\"object\"!=typeof t&&\"function\"!=typeof t,a=Array.isArray,u=t=>a(t)||\"function\"==typeof t?.[Symbol.iterator],d=\"[ \\t\\n\\f\\r]\",f=/<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g,v=/-->/g,_=/>/g,m=RegExp(`>|${d}(?:([^\\\\s\"'>=/]+)(${d}*=${d}*(?:[^ \\t\\n\\f\\r\"'\\`<>=]|(\"|')|))|$)`,\"g\"),p=/'/g,g=/\"/g,$=/^(?:script|style|textarea|title)$/i,y=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),x=y(1),b=y(2),w=y(3),T=Symbol.for(\"lit-noChange\"),E=Symbol.for(\"lit-nothing\"),A=new WeakMap,C=r.createTreeWalker(r,129);function P(t,i){if(!a(t)||!t.hasOwnProperty(\"raw\"))throw Error(\"invalid template strings array\");return void 0!==s?s.createHTML(i):i}const V=(t,i)=>{const s=t.length-1,o=[];let r,l=2===i?\"<svg>\":3===i?\"<math>\":\"\",c=f;for(let i=0;i<s;i++){const s=t[i];let a,u,d=-1,y=0;for(;y<s.length&&(c.lastIndex=y,u=c.exec(s),null!==u);)y=c.lastIndex,c===f?\"!--\"===u[1]?c=v:void 0!==u[1]?c=_:void 0!==u[2]?($.test(u[2])&&(r=RegExp(\"</\"+u[2],\"g\")),c=m):void 0!==u[3]&&(c=m):c===m?\">\"===u[0]?(c=r??f,d=-1):void 0===u[1]?d=-2:(d=c.lastIndex-u[2].length,a=u[1],c=void 0===u[3]?m:'\"'===u[3]?g:p):c===g||c===p?c=m:c===v||c===_?c=f:(c=m,r=void 0);const x=c===m&&t[i+1].startsWith(\"/>\")?\" \":\"\";l+=c===f?s+n:d>=0?(o.push(a),s.slice(0,d)+e+s.slice(d)+h+x):s+h+(-2===d?i:x)}return[P(t,l+(t[s]||\"<?>\")+(2===i?\"</svg>\":3===i?\"</math>\":\"\")),o]};class N{constructor({strings:t,_$litType$:s},n){let r;this.parts=[];let c=0,a=0;const u=t.length-1,d=this.parts,[f,v]=V(t,s);if(this.el=N.createElement(f,n),C.currentNode=this.el.content,2===s||3===s){const t=this.el.content.firstChild;t.replaceWith(...t.childNodes)}for(;null!==(r=C.nextNode())&&d.length<u;){if(1===r.nodeType){if(r.hasAttributes())for(const t of r.getAttributeNames())if(t.endsWith(e)){const i=v[a++],s=r.getAttribute(t).split(h),e=/([.?@])?(.*)/.exec(i);d.push({type:1,index:c,name:e[2],strings:s,ctor:\".\"===e[1]?H:\"?\"===e[1]?I:\"@\"===e[1]?L:k}),r.removeAttribute(t)}else t.startsWith(h)&&(d.push({type:6,index:c}),r.removeAttribute(t));if($.test(r.tagName)){const t=r.textContent.split(h),s=t.length-1;if(s>0){r.textContent=i?i.emptyScript:\"\";for(let i=0;i<s;i++)r.append(t[i],l()),C.nextNode(),d.push({type:2,index:++c});r.append(t[s],l())}}}else if(8===r.nodeType)if(r.data===o)d.push({type:2,index:c});else{let t=-1;for(;-1!==(t=r.data.indexOf(h,t+1));)d.push({type:7,index:c}),t+=h.length-1}c++}}static createElement(t,i){const s=r.createElement(\"template\");return s.innerHTML=t,s}}function S(t,i,s=t,e){if(i===T)return i;let h=void 0!==e?s._$Co?.[e]:s._$Cl;const o=c(i)?void 0:i._$litDirective$;return h?.constructor!==o&&(h?._$AO?.(!1),void 0===o?h=void 0:(h=new o(t),h._$AT(t,s,e)),void 0!==e?(s._$Co??=[])[e]=h:s._$Cl=h),void 0!==h&&(i=S(t,h._$AS(t,i.values),h,e)),i}class M{constructor(t,i){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=i}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){const{el:{content:i},parts:s}=this._$AD,e=(t?.creationScope??r).importNode(i,!0);C.currentNode=e;let h=C.nextNode(),o=0,n=0,l=s[0];for(;void 0!==l;){if(o===l.index){let i;2===l.type?i=new R(h,h.nextSibling,this,t):1===l.type?i=new l.ctor(h,l.name,l.strings,this,t):6===l.type&&(i=new z(h,this,t)),this._$AV.push(i),l=s[++n]}o!==l?.index&&(h=C.nextNode(),o++)}return C.currentNode=r,e}p(t){let i=0;for(const s of this._$AV)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++}}class R{get _$AU(){return this._$AM?._$AU??this._$Cv}constructor(t,i,s,e){this.type=2,this._$AH=E,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this._$Cv=e?.isConnected??!0}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===t?.nodeType&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=S(this,t,i),c(t)?t===E||null==t||\"\"===t?(this._$AH!==E&&this._$AR(),this._$AH=E):t!==this._$AH&&t!==T&&this._(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):u(t)?this.k(t):this._(t)}O(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t))}_(t){this._$AH!==E&&c(this._$AH)?this._$AA.nextSibling.data=t:this.T(r.createTextNode(t)),this._$AH=t}$(t){const{values:i,_$litType$:s}=t,e=\"number\"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=N.createElement(P(s.h,s.h[0]),this.options)),s);if(this._$AH?._$AD===e)this._$AH.p(i);else{const t=new M(e,this),s=t.u(this.options);t.p(i),this.T(s),this._$AH=t}}_$AC(t){let i=A.get(t.strings);return void 0===i&&A.set(t.strings,i=new N(t)),i}k(t){a(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const h of t)e===i.length?i.push(s=new R(this.O(l()),this.O(l()),this,this.options)):s=i[e],s._$AI(h),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e)}_$AR(t=this._$AA.nextSibling,i){for(this._$AP?.(!1,!0,i);t&&t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i}}setConnected(t){void 0===this._$AM&&(this._$Cv=t,this._$AP?.(t))}}class k{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(t,i,s,e,h){this.type=1,this._$AH=E,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=h,s.length>2||\"\"!==s[0]||\"\"!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=E}_$AI(t,i=this,s,e){const h=this.strings;let o=!1;if(void 0===h)t=S(this,t,i,0),o=!c(t)||t!==this._$AH&&t!==T,o&&(this._$AH=t);else{const e=t;let n,r;for(t=h[0],n=0;n<h.length-1;n++)r=S(this,e[s+n],i,n),r===T&&(r=this._$AH[n]),o||=!c(r)||r!==this._$AH[n],r===E?t=E:t!==E&&(t+=(r??\"\")+h[n+1]),this._$AH[n]=r}o&&!e&&this.j(t)}j(t){t===E?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,t??\"\")}}class H extends k{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===E?void 0:t}}class I extends k{constructor(){super(...arguments),this.type=4}j(t){this.element.toggleAttribute(this.name,!!t&&t!==E)}}class L extends k{constructor(t,i,s,e,h){super(t,i,s,e,h),this.type=5}_$AI(t,i=this){if((t=S(this,t,i,0)??E)===T)return;const s=this._$AH,e=t===E&&s!==E||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,h=t!==E&&(s===E||e);e&&this.element.removeEventListener(this.name,this,s),h&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){\"function\"==typeof this._$AH?this._$AH.call(this.options?.host??this.element,t):this._$AH.handleEvent(t)}}class z{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s}get _$AU(){return this._$AM._$AU}_$AI(t){S(this,t)}}const Z={M:e,P:h,A:o,C:1,L:V,R:M,D:u,V:S,I:R,H:k,N:I,U:L,B:H,F:z},j=t.litHtmlPolyfillSupport;j?.(N,R),(t.litHtmlVersions??=[]).push(\"3.2.1\");const B=(t,i,s)=>{const e=s?.renderBefore??i;let h=e._$litPart$;if(void 0===h){const t=s?.renderBefore??null;e._$litPart$=h=new R(i.insertBefore(l(),t),t,void 0,s??{})}return h._$AI(t),h};export{Z as _$LH,x as html,w as mathml,T as noChange,E as nothing,B as render,b as svg};\n//# sourceMappingURL=lit-html.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// IMPORTANT: these imports must be type-only\nimport type {Directive, DirectiveResult, PartInfo} from './directive.js';\nimport type {TrustedHTML, TrustedTypesWindow} from 'trusted-types/lib';\n\nconst DEV_MODE = true;\nconst ENABLE_EXTRA_SECURITY_HOOKS = true;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst NODE_MODE = false;\n\n// Allows minifiers to rename references to globalThis\nconst global = globalThis;\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace LitUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | TemplatePrep\n      | TemplateInstantiated\n      | TemplateInstantiatedAndUpdated\n      | TemplateUpdating\n      | BeginRender\n      | EndRender\n      | CommitPartEntry\n      | SetPartValue;\n    export interface TemplatePrep {\n      kind: 'template prep';\n      template: Template;\n      strings: TemplateStringsArray;\n      clonableTemplate: HTMLTemplateElement;\n      parts: TemplatePart[];\n    }\n    export interface BeginRender {\n      kind: 'begin render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart | undefined;\n    }\n    export interface EndRender {\n      kind: 'end render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart;\n    }\n    export interface TemplateInstantiated {\n      kind: 'template instantiated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateInstantiatedAndUpdated {\n      kind: 'template instantiated and updated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateUpdating {\n      kind: 'template updating';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface SetPartValue {\n      kind: 'set part';\n      part: Part;\n      value: unknown;\n      valueIndex: number;\n      values: unknown[];\n      templateInstance: TemplateInstance;\n    }\n\n    export type CommitPartEntry =\n      | CommitNothingToChildEntry\n      | CommitText\n      | CommitNode\n      | CommitAttribute\n      | CommitProperty\n      | CommitBooleanAttribute\n      | CommitEventListener\n      | CommitToElementBinding;\n\n    export interface CommitNothingToChildEntry {\n      kind: 'commit nothing to child';\n      start: ChildNode;\n      end: ChildNode | null;\n      parent: Disconnectable | undefined;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitText {\n      kind: 'commit text';\n      node: Text;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitNode {\n      kind: 'commit node';\n      start: Node;\n      parent: Disconnectable | undefined;\n      value: Node;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitAttribute {\n      kind: 'commit attribute';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitProperty {\n      kind: 'commit property';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitBooleanAttribute {\n      kind: 'commit boolean attribute';\n      element: Element;\n      name: string;\n      value: boolean;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitEventListener {\n      kind: 'commit event listener';\n      element: Element;\n      name: string;\n      value: unknown;\n      oldListener: unknown;\n      options: RenderOptions | undefined;\n      // True if we're removing the old event listener (e.g. because settings changed, or value is nothing)\n      removeListener: boolean;\n      // True if we're adding a new event listener (e.g. because first render, or settings changed)\n      addListener: boolean;\n    }\n\n    export interface CommitToElementBinding {\n      kind: 'commit to element binding';\n      element: Element;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: LitUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<LitUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n// Used for connecting beginRender and endRender events when there are nested\n// renders when errors are thrown preventing an endRender event from being\n// called.\nlet debugLogRenderId = 0;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  global.litIssuedWarnings ??= new Set();\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (!global.litIssuedWarnings!.has(warning)) {\n      console.warn(warning);\n      global.litIssuedWarnings!.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n}\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  global.ShadyDOM?.inUse &&\n  global.ShadyDOM?.noPatch === true\n    ? (global.ShadyDOM!.wrap as <T extends Node>(node: T) => T)\n    : <T extends Node>(node: T) => node;\n\nconst trustedTypes = (global as unknown as TrustedTypesWindow).trustedTypes;\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n  ? trustedTypes.createPolicy('lit-html', {\n      createHTML: (s) => s,\n    })\n  : undefined;\n\n/**\n * Used to sanitize any value before it is written into the DOM. This can be\n * used to implement a security policy of allowed and disallowed values in\n * order to prevent XSS attacks.\n *\n * One way of using this callback would be to check attributes and properties\n * against a list of high risk fields, and require that values written to such\n * fields be instances of a class which is safe by construction. Closure's Safe\n * HTML Types is one implementation of this technique (\n * https://github.com/google/safe-html-types/blob/master/doc/safehtml-types.md).\n * The TrustedTypes polyfill in API-only mode could also be used as a basis\n * for this technique (https://github.com/WICG/trusted-types).\n *\n * @param node The HTML node (usually either a #text node or an Element) that\n *     is being written to. Note that this is just an exemplar node, the write\n *     may take place against another instance of the same class of node.\n * @param name The name of an attribute or property (for example, 'href').\n * @param type Indicates whether the write that's about to be performed will\n *     be to a property or a node.\n * @return A function that will sanitize this class of writes.\n */\nexport type SanitizerFactory = (\n  node: Node,\n  name: string,\n  type: 'property' | 'attribute'\n) => ValueSanitizer;\n\n/**\n * A function which can sanitize values that will be written to a specific kind\n * of DOM sink.\n *\n * See SanitizerFactory.\n *\n * @param value The value to sanitize. Will be the actual value passed into\n *     the lit-html template literal, so this could be of any type.\n * @return The value to write to the DOM. Usually the same as the input value,\n *     unless sanitization is needed.\n */\nexport type ValueSanitizer = (value: unknown) => unknown;\n\nconst identityFunction: ValueSanitizer = (value: unknown) => value;\nconst noopSanitizer: SanitizerFactory = (\n  _node: Node,\n  _name: string,\n  _type: 'property' | 'attribute'\n) => identityFunction;\n\n/** Sets the global sanitizer factory. */\nconst setSanitizer = (newSanitizer: SanitizerFactory) => {\n  if (!ENABLE_EXTRA_SECURITY_HOOKS) {\n    return;\n  }\n  if (sanitizerFactoryInternal !== noopSanitizer) {\n    throw new Error(\n      `Attempted to overwrite existing lit-html security policy.` +\n        ` setSanitizeDOMValueFactory should be called at most once.`\n    );\n  }\n  sanitizerFactoryInternal = newSanitizer;\n};\n\n/**\n * Only used in internal tests, not a part of the public API.\n */\nconst _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n  sanitizerFactoryInternal = noopSanitizer;\n};\n\nconst createSanitizer: SanitizerFactory = (node, name, type) => {\n  return sanitizerFactoryInternal(node, name, type);\n};\n\n// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nconst boundAttributeSuffix = '$lit$';\n\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nconst marker = `lit$${Math.random().toFixed(9).slice(2)}$`;\n\n// String used to tell if a comment is a marker comment\nconst markerMatch = '?' + marker;\n\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\n\nconst d =\n  NODE_MODE && global.document === undefined\n    ? ({\n        createTreeWalker() {\n          return {};\n        },\n      } as unknown as Document)\n    : document;\n\n// Creates a dynamic marker. We never have to search for these in the DOM.\nconst createMarker = () => d.createComment('');\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\nconst isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\nconst isArray = Array.isArray;\nconst isIterable = (value: unknown): value is Iterable<unknown> =>\n  isArray(value) ||\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  typeof (value as any)?.[Symbol.iterator] === 'function';\n\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\n\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(\n  `>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`,\n  'g'\n);\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\n\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea|title)$/i;\n\n/** TemplateResult types */\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2;\nconst MATHML_RESULT = 3;\n\ntype ResultType = typeof HTML_RESULT | typeof SVG_RESULT | typeof MATHML_RESULT;\n\n// TemplatePart types\n// IMPORTANT: these must match the values in PartType\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg} when it hasn't been compiled by @lit-labs/compiler.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n */\nexport type UncompiledTemplateResult<T extends ResultType = ResultType> = {\n  // This property needs to remain unminified.\n  ['_$litType$']: T;\n  strings: TemplateStringsArray;\n  values: unknown[];\n};\n\n/**\n * This is a template result that may be either uncompiled or compiled.\n *\n * In the future, TemplateResult will be this type. If you want to explicitly\n * note that a template result is potentially compiled, you can reference this\n * type and it will continue to behave the same through the next major version\n * of Lit. This can be useful for code that wants to prepare for the next\n * major version of Lit.\n */\nexport type MaybeCompiledTemplateResult<T extends ResultType = ResultType> =\n  | UncompiledTemplateResult<T>\n  | CompiledTemplateResult;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg}.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n * In Lit 4, this type will be an alias of\n * MaybeCompiledTemplateResult, so that code will get type errors if it assumes\n * that Lit templates are not compiled. When deliberately working with only\n * one, use either {@linkcode CompiledTemplateResult} or\n * {@linkcode UncompiledTemplateResult} explicitly.\n */\nexport type TemplateResult<T extends ResultType = ResultType> =\n  UncompiledTemplateResult<T>;\n\nexport type HTMLTemplateResult = TemplateResult<typeof HTML_RESULT>;\n\nexport type SVGTemplateResult = TemplateResult<typeof SVG_RESULT>;\n\nexport type MathMLTemplateResult = TemplateResult<typeof MATHML_RESULT>;\n\n/**\n * A TemplateResult that has been compiled by @lit-labs/compiler, skipping the\n * prepare step.\n */\nexport interface CompiledTemplateResult {\n  // This is a factory in order to make template initialization lazy\n  // and allow ShadyRenderOptions scope to be passed in.\n  // This property needs to remain unminified.\n  ['_$litType$']: CompiledTemplate;\n  values: unknown[];\n}\n\nexport interface CompiledTemplate extends Omit<Template, 'el'> {\n  // el is overridden to be optional. We initialize it on first render\n  el?: HTMLTemplateElement;\n\n  // The prepared HTML string to create a template element from.\n  // The type is a TemplateStringsArray to guarantee that the value came from\n  // source code, preventing a JSON injection attack.\n  h: TemplateStringsArray;\n}\n\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\nconst tag =\n  <T extends ResultType>(type: T) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult<T> => {\n    // Warn against templates octal escape sequences\n    // We do this here rather than in render so that the warning is closer to the\n    // template definition.\n    if (DEV_MODE && strings.some((s) => s === undefined)) {\n      console.warn(\n        'Some template strings are undefined.\\n' +\n          'This is probably caused by illegal octal escape sequences.'\n      );\n    }\n    if (DEV_MODE) {\n      // Import static-html.js results in a circular dependency which g3 doesn't\n      // handle. Instead we know that static values must have the field\n      // `_$litStatic$`.\n      if (\n        values.some((val) => (val as {_$litStatic$: unknown})?.['_$litStatic$'])\n      ) {\n        issueWarning(\n          '',\n          `Static values 'literal' or 'unsafeStatic' cannot be used as values to non-static templates.\\n` +\n            `Please use the static 'html' tag function. See https://lit.dev/docs/templates/expressions/#static-expressions`\n        );\n      }\n    }\n    return {\n      // This property needs to remain unminified.\n      ['_$litType$']: type,\n      strings,\n      values,\n    };\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const header = (title: string) => html`<h1>${title}</h1>`;\n * ```\n *\n * The `html` tag returns a description of the DOM to render as a value. It is\n * lazy, meaning no work is done until the template is rendered. When rendering,\n * if a template comes from the same expression as a previously rendered result,\n * it's efficiently updated instead of replaced.\n */\nexport const html = tag(HTML_RESULT);\n\n/**\n * Interprets a template literal as an SVG fragment that can efficiently render\n * to and update a container.\n *\n * ```ts\n * const rect = svg`<rect width=\"10\" height=\"10\"></rect>`;\n *\n * const myImage = html`\n *   <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n *     ${rect}\n *   </svg>`;\n * ```\n *\n * The `svg` *tag function* should only be used for SVG fragments, or elements\n * that would be contained **inside** an `<svg>` HTML element. A common error is\n * placing an `<svg>` *element* in a template tagged with the `svg` tag\n * function. The `<svg>` element is an HTML element and should be used within a\n * template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an SVG fragment from the\n * `render()` method, as the SVG fragment will be contained within the element's\n * shadow root and thus not be properly contained within an `<svg>` HTML\n * element.\n */\nexport const svg = tag(SVG_RESULT);\n\n/**\n * Interprets a template literal as MathML fragment that can efficiently render\n * to and update a container.\n *\n * ```ts\n * const num = mathml`<mn>1</mn>`;\n *\n * const eq = html`\n *   <math>\n *     ${num}\n *   </math>`;\n * ```\n *\n * The `mathml` *tag function* should only be used for MathML fragments, or\n * elements that would be contained **inside** a `<math>` HTML element. A common\n * error is placing a `<math>` *element* in a template tagged with the `mathml`\n * tag function. The `<math>` element is an HTML element and should be used\n * within a template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an MathML fragment from the\n * `render()` method, as the MathML fragment will be contained within the\n * element's shadow root and thus not be properly contained within a `<math>`\n * HTML element.\n */\nexport const mathml = tag(MATHML_RESULT);\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = Symbol.for('lit-noChange');\n\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n *\n * ```ts\n * const button = html`${\n *  user.isAdmin\n *    ? html`<button>DELETE</button>`\n *    : nothing\n * }`;\n * ```\n *\n * Prefer using `nothing` over other falsy values as it provides a consistent\n * behavior between various expression binding contexts.\n *\n * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\n * same and render no nodes. In attribute expressions, `nothing` _removes_ the\n * attribute, while `undefined` and `null` will render an empty string. In\n * property expressions `nothing` becomes `undefined`.\n */\nexport const nothing = Symbol.for('lit-nothing');\n\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - they must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\nconst templateCache = new WeakMap<TemplateStringsArray, Template>();\n\n/**\n * Object specifying options for controlling lit-html rendering. Note that\n * while `render` may be called multiple times on the same `container` (and\n * `renderBefore` reference node) to efficiently update the rendered content,\n * only the options passed in during the first render are respected during\n * the lifetime of renders to that unique `container` + `renderBefore`\n * combination.\n */\nexport interface RenderOptions {\n  /**\n   * An object to use as the `this` value for event listeners. It's often\n   * useful to set this to the host component rendering a template.\n   */\n  host?: object;\n  /**\n   * A DOM node before which to render content in the container.\n   */\n  renderBefore?: ChildNode | null;\n  /**\n   * Node used for cloning the template (`importNode` will be called on this\n   * node). This controls the `ownerDocument` of the rendered DOM, along with\n   * any inherited context. Defaults to the global `document`.\n   */\n  creationScope?: {importNode(node: Node, deep?: boolean): Node};\n  /**\n   * The initial connected state for the top-level part being rendered. If no\n   * `isConnected` option is set, `AsyncDirective`s will be connected by\n   * default. Set to `false` if the initial render occurs in a disconnected tree\n   * and `AsyncDirective`s should see `isConnected === false` for their initial\n   * render. The `part.setConnected()` method must be used subsequent to initial\n   * render to change the connected state of the part.\n   */\n  isConnected?: boolean;\n}\n\nconst walker = d.createTreeWalker(\n  d,\n  129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */\n);\n\nlet sanitizerFactoryInternal: SanitizerFactory = noopSanitizer;\n\n//\n// Classes only below here, const variable declarations only above here...\n//\n// Keeping variable declarations and classes together improves minification.\n// Interfaces and type aliases can be interleaved freely.\n//\n\n// Type for classes that have a `_directive` or `_directives[]` field, used by\n// `resolveDirective`\nexport interface DirectiveParent {\n  _$parent?: DirectiveParent;\n  _$isConnected: boolean;\n  __directive?: Directive;\n  __directives?: Array<Directive | undefined>;\n}\n\nfunction trustFromTemplateString(\n  tsa: TemplateStringsArray,\n  stringFromTSA: string\n): TrustedHTML {\n  // A security check to prevent spoofing of Lit template results.\n  // In the future, we may be able to replace this with Array.isTemplateObject,\n  // though we might need to make that check inside of the html and svg\n  // functions, because precompiled templates don't come in as\n  // TemplateStringArray objects.\n  if (!isArray(tsa) || !tsa.hasOwnProperty('raw')) {\n    let message = 'invalid template strings array';\n    if (DEV_MODE) {\n      message = `\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n          If you're using the html or svg tagged template functions normally\n          and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        `\n        .trim()\n        .replace(/\\n */g, '\\n');\n    }\n    throw new Error(message);\n  }\n  return policy !== undefined\n    ? policy.createHTML(stringFromTSA)\n    : (stringFromTSA as unknown as TrustedHTML);\n}\n\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment markers denoting the `ChildPart`s\n * and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nconst getTemplateHtml = (\n  strings: TemplateStringsArray,\n  type: ResultType\n): [TrustedHTML, Array<string>] => {\n  // Insert makers into the template HTML to represent the position of\n  // bindings. The following code scans the template strings to determine the\n  // syntactic position of the bindings. They can be in text position, where\n  // we insert an HTML comment, attribute value position, where we insert a\n  // sentinel string and re-write the attribute name, or inside a tag where\n  // we insert the sentinel string.\n  const l = strings.length - 1;\n  // Stores the case-sensitive bound attribute names in the order of their\n  // parts. ElementParts are also reflected in this array as undefined\n  // rather than a string, to disambiguate from attribute bindings.\n  const attrNames: Array<string> = [];\n  let html =\n    type === SVG_RESULT ? '<svg>' : type === MATHML_RESULT ? '<math>' : '';\n\n  // When we're inside a raw text tag (not it's text content), the regex\n  // will still be tagRegex so we can find attributes, but will switch to\n  // this regex when the tag ends.\n  let rawTextEndRegex: RegExp | undefined;\n\n  // The current parsing state, represented as a reference to one of the\n  // regexes\n  let regex = textEndRegex;\n\n  for (let i = 0; i < l; i++) {\n    const s = strings[i];\n    // The index of the end of the last attribute name. When this is\n    // positive at end of a string, it means we're in an attribute value\n    // position and need to rewrite the attribute name.\n    // We also use a special value of -2 to indicate that we encountered\n    // the end of a string in attribute name position.\n    let attrNameEndIndex = -1;\n    let attrName: string | undefined;\n    let lastIndex = 0;\n    let match!: RegExpExecArray | null;\n\n    // The conditions in this loop handle the current parse state, and the\n    // assignments to the `regex` variable are the state transitions.\n    while (lastIndex < s.length) {\n      // Make sure we start searching from where we previously left off\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n      if (match === null) {\n        break;\n      }\n      lastIndex = regex.lastIndex;\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === '!--') {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          // We started a weird comment, like </{\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            // Record if we encounter a raw-text element. We'll switch to\n            // this regex at the end of the tag.\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n          }\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          if (DEV_MODE) {\n            throw new Error(\n              'Bindings in tag names are not supported. Please use static templates instead. ' +\n                'See https://lit.dev/docs/templates/expressions/#static-expressions'\n            );\n          }\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === '>') {\n          // End of a tag. If we had started a raw-text element, use that\n          // regex\n          regex = rawTextEndRegex ?? textEndRegex;\n          // We may be ending an unquoted attribute value, so make sure we\n          // clear any pending attrNameEndIndex\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          // Attribute name position\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex =\n            match[QUOTE_CHAR] === undefined\n              ? tagEndRegex\n              : match[QUOTE_CHAR] === '\"'\n                ? doubleQuoteAttrEndRegex\n                : singleQuoteAttrEndRegex;\n        }\n      } else if (\n        regex === doubleQuoteAttrEndRegex ||\n        regex === singleQuoteAttrEndRegex\n      ) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        // Not one of the five state regexes, so it must be the dynamically\n        // created raw text regex and we're at the close of that element.\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n\n    if (DEV_MODE) {\n      // If we have a attrNameEndIndex, which indicates that we should\n      // rewrite the attribute name, assert that we're in a valid attribute\n      // position - either in a tag, or a quoted attribute value.\n      console.assert(\n        attrNameEndIndex === -1 ||\n          regex === tagEndRegex ||\n          regex === singleQuoteAttrEndRegex ||\n          regex === doubleQuoteAttrEndRegex,\n        'unexpected parse state B'\n      );\n    }\n\n    // We have four cases:\n    //  1. We're in text position, and not in a raw text element\n    //     (regex === textEndRegex): insert a comment marker.\n    //  2. We have a non-negative attrNameEndIndex which means we need to\n    //     rewrite the attribute name to add a bound attribute suffix.\n    //  3. We're at the non-first binding in a multi-binding attribute, use a\n    //     plain marker.\n    //  4. We're somewhere else inside the tag. If we're in attribute name\n    //     position (attrNameEndIndex === -2), add a sequential suffix to\n    //     generate a unique attribute name.\n\n    // Detect a binding next to self-closing tag end and insert a space to\n    // separate the marker from the tag end:\n    const end =\n      regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n    html +=\n      regex === textEndRegex\n        ? s + nodeMarker\n        : attrNameEndIndex >= 0\n          ? (attrNames.push(attrName!),\n            s.slice(0, attrNameEndIndex) +\n              boundAttributeSuffix +\n              s.slice(attrNameEndIndex)) +\n            marker +\n            end\n          : s + marker + (attrNameEndIndex === -2 ? i : end);\n  }\n\n  const htmlResult: string | TrustedHTML =\n    html +\n    (strings[l] || '<?>') +\n    (type === SVG_RESULT ? '</svg>' : type === MATHML_RESULT ? '</math>' : '');\n\n  // Returned as an array for terseness\n  return [trustFromTemplateString(strings, htmlResult), attrNames];\n};\n\n/** @internal */\nexport type {Template};\nclass Template {\n  /** @internal */\n  el!: HTMLTemplateElement;\n\n  parts: Array<TemplatePart> = [];\n\n  constructor(\n    // This property needs to remain unminified.\n    {strings, ['_$litType$']: type}: UncompiledTemplateResult,\n    options?: RenderOptions\n  ) {\n    let node: Node | null;\n    let nodeIndex = 0;\n    let attrNameIndex = 0;\n    const partCount = strings.length - 1;\n    const parts = this.parts;\n\n    // Create template element\n    const [html, attrNames] = getTemplateHtml(strings, type);\n    this.el = Template.createElement(html, options);\n    walker.currentNode = this.el.content;\n\n    // Re-parent SVG or MathML nodes into template root\n    if (type === SVG_RESULT || type === MATHML_RESULT) {\n      const wrapper = this.el.content.firstChild!;\n      wrapper.replaceWith(...wrapper.childNodes);\n    }\n\n    // Walk the template to find binding markers and create TemplateParts\n    while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n      if (node.nodeType === 1) {\n        if (DEV_MODE) {\n          const tag = (node as Element).localName;\n          // Warn if `textarea` includes an expression and throw if `template`\n          // does since these are not supported. We do this by checking\n          // innerHTML for anything that looks like a marker. This catches\n          // cases like bindings in textarea there markers turn into text nodes.\n          if (\n            /^(?:textarea|template)$/i!.test(tag) &&\n            (node as Element).innerHTML.includes(marker)\n          ) {\n            const m =\n              `Expressions are not supported inside \\`${tag}\\` ` +\n              `elements. See https://lit.dev/msg/expression-in-${tag} for more ` +\n              `information.`;\n            if (tag === 'template') {\n              throw new Error(m);\n            } else issueWarning('', m);\n          }\n        }\n        // TODO (justinfagnani): for attempted dynamic tag names, we don't\n        // increment the bindingIndex, and it'll be off by 1 in the element\n        // and off by two after it.\n        if ((node as Element).hasAttributes()) {\n          for (const name of (node as Element).getAttributeNames()) {\n            if (name.endsWith(boundAttributeSuffix)) {\n              const realName = attrNames[attrNameIndex++];\n              const value = (node as Element).getAttribute(name)!;\n              const statics = value.split(marker);\n              const m = /([.?@])?(.*)/.exec(realName)!;\n              parts.push({\n                type: ATTRIBUTE_PART,\n                index: nodeIndex,\n                name: m[2],\n                strings: statics,\n                ctor:\n                  m[1] === '.'\n                    ? PropertyPart\n                    : m[1] === '?'\n                      ? BooleanAttributePart\n                      : m[1] === '@'\n                        ? EventPart\n                        : AttributePart,\n              });\n              (node as Element).removeAttribute(name);\n            } else if (name.startsWith(marker)) {\n              parts.push({\n                type: ELEMENT_PART,\n                index: nodeIndex,\n              });\n              (node as Element).removeAttribute(name);\n            }\n          }\n        }\n        // TODO (justinfagnani): benchmark the regex against testing for each\n        // of the 3 raw text element names.\n        if (rawTextElement.test((node as Element).tagName)) {\n          // For raw text elements we need to split the text content on\n          // markers, create a Text node for each segment, and create\n          // a TemplatePart for each marker.\n          const strings = (node as Element).textContent!.split(marker);\n          const lastIndex = strings.length - 1;\n          if (lastIndex > 0) {\n            (node as Element).textContent = trustedTypes\n              ? (trustedTypes.emptyScript as unknown as '')\n              : '';\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            // We can't use empty text nodes as markers because they're\n            // normalized when cloning in IE (could simplify when\n            // IE is no longer supported)\n            for (let i = 0; i < lastIndex; i++) {\n              (node as Element).append(strings[i], createMarker());\n              // Walk past the marker node we just added\n              walker.nextNode();\n              parts.push({type: CHILD_PART, index: ++nodeIndex});\n            }\n            // Note because this marker is added after the walker's current\n            // node, it will be walked to in the outer loop (and ignored), so\n            // we don't need to adjust nodeIndex here\n            (node as Element).append(strings[lastIndex], createMarker());\n          }\n        }\n      } else if (node.nodeType === 8) {\n        const data = (node as Comment).data;\n        if (data === markerMatch) {\n          parts.push({type: CHILD_PART, index: nodeIndex});\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            parts.push({type: COMMENT_PART, index: nodeIndex});\n            // Move to the end of the match\n            i += marker.length - 1;\n          }\n        }\n      }\n      nodeIndex++;\n    }\n\n    if (DEV_MODE) {\n      // If there was a duplicate attribute on a tag, then when the tag is\n      // parsed into an element the attribute gets de-duplicated. We can detect\n      // this mismatch if we haven't precisely consumed every attribute name\n      // when preparing the template. This works because `attrNames` is built\n      // from the template string and `attrNameIndex` comes from processing the\n      // resulting DOM.\n      if (attrNames.length !== attrNameIndex) {\n        throw new Error(\n          `Detected duplicate attribute bindings. This occurs if your template ` +\n            `has duplicate attributes on an element tag. For example ` +\n            `\"<input ?disabled=\\${true} ?disabled=\\${false}>\" contains a ` +\n            `duplicate \"disabled\" attribute. The error was detected in ` +\n            `the following template: \\n` +\n            '`' +\n            strings.join('${...}') +\n            '`'\n        );\n      }\n    }\n\n    // We could set walker.currentNode to another node here to prevent a memory\n    // leak, but every time we prepare a template, we immediately render it\n    // and re-use the walker in new TemplateInstance._clone().\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'template prep',\n        template: this,\n        clonableTemplate: this.el,\n        parts: this.parts,\n        strings,\n      });\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @nocollapse */\n  static createElement(html: TrustedHTML, _options?: RenderOptions) {\n    const el = d.createElement('template');\n    el.innerHTML = html as unknown as string;\n    return el;\n  }\n}\n\nexport interface Disconnectable {\n  _$parent?: Disconnectable;\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // Rather than hold connection state on instances, Disconnectables recursively\n  // fetch the connection state from the RootPart they are connected in via\n  // getters up the Disconnectable tree via _$parent references. This pushes the\n  // cost of tracking the isConnected state to `AsyncDirectives`, and avoids\n  // needing to pass all Disconnectables (parts, template instances, and\n  // directives) their connection state each time it changes, which would be\n  // costly for trees that have no AsyncDirectives.\n  _$isConnected: boolean;\n}\n\nfunction resolveDirective(\n  part: ChildPart | AttributePart | ElementPart,\n  value: unknown,\n  parent: DirectiveParent = part,\n  attributeIndex?: number\n): unknown {\n  // Bail early if the value is explicitly noChange. Note, this means any\n  // nested directive is still attached and is not run.\n  if (value === noChange) {\n    return value;\n  }\n  let currentDirective =\n    attributeIndex !== undefined\n      ? (parent as AttributePart).__directives?.[attributeIndex]\n      : (parent as ChildPart | ElementPart | Directive).__directive;\n  const nextDirectiveConstructor = isPrimitive(value)\n    ? undefined\n    : // This property needs to remain unminified.\n      (value as DirectiveResult)['_$litDirective$'];\n  if (currentDirective?.constructor !== nextDirectiveConstructor) {\n    // This property needs to remain unminified.\n    currentDirective?.['_$notifyDirectiveConnectionChanged']?.(false);\n    if (nextDirectiveConstructor === undefined) {\n      currentDirective = undefined;\n    } else {\n      currentDirective = new nextDirectiveConstructor(part as PartInfo);\n      currentDirective._$initialize(part, parent, attributeIndex);\n    }\n    if (attributeIndex !== undefined) {\n      ((parent as AttributePart).__directives ??= [])[attributeIndex] =\n        currentDirective;\n    } else {\n      (parent as ChildPart | Directive).__directive = currentDirective;\n    }\n  }\n  if (currentDirective !== undefined) {\n    value = resolveDirective(\n      part,\n      currentDirective._$resolve(part, (value as DirectiveResult).values),\n      currentDirective,\n      attributeIndex\n    );\n  }\n  return value;\n}\n\nexport type {TemplateInstance};\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\nclass TemplateInstance implements Disconnectable {\n  _$template: Template;\n  _$parts: Array<Part | undefined> = [];\n\n  /** @internal */\n  _$parent: ChildPart;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  constructor(template: Template, parent: ChildPart) {\n    this._$template = template;\n    this._$parent = parent;\n  }\n\n  // Called by ChildPart parentNode getter\n  get parentNode() {\n    return this._$parent.parentNode;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  // This method is separate from the constructor because we need to return a\n  // DocumentFragment and we don't want to hold onto it with an instance field.\n  _clone(options: RenderOptions | undefined) {\n    const {\n      el: {content},\n      parts: parts,\n    } = this._$template;\n    const fragment = (options?.creationScope ?? d).importNode(content, true);\n    walker.currentNode = fragment;\n\n    let node = walker.nextNode()!;\n    let nodeIndex = 0;\n    let partIndex = 0;\n    let templatePart = parts[0];\n\n    while (templatePart !== undefined) {\n      if (nodeIndex === templatePart.index) {\n        let part: Part | undefined;\n        if (templatePart.type === CHILD_PART) {\n          part = new ChildPart(\n            node as HTMLElement,\n            node.nextSibling,\n            this,\n            options\n          );\n        } else if (templatePart.type === ATTRIBUTE_PART) {\n          part = new templatePart.ctor(\n            node as HTMLElement,\n            templatePart.name,\n            templatePart.strings,\n            this,\n            options\n          );\n        } else if (templatePart.type === ELEMENT_PART) {\n          part = new ElementPart(node as HTMLElement, this, options);\n        }\n        this._$parts.push(part);\n        templatePart = parts[++partIndex];\n      }\n      if (nodeIndex !== templatePart?.index) {\n        node = walker.nextNode()!;\n        nodeIndex++;\n      }\n    }\n    // We need to set the currentNode away from the cloned tree so that we\n    // don't hold onto the tree even if the tree is detached and should be\n    // freed.\n    walker.currentNode = d;\n    return fragment;\n  }\n\n  _update(values: Array<unknown>) {\n    let i = 0;\n    for (const part of this._$parts) {\n      if (part !== undefined) {\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'set part',\n            part,\n            value: values[i],\n            valueIndex: i,\n            values,\n            templateInstance: this,\n          });\n        if ((part as AttributePart).strings !== undefined) {\n          (part as AttributePart)._$setValue(values, part as AttributePart, i);\n          // The number of values the part consumes is part.strings.length - 1\n          // since values are in between template spans. We increment i by 1\n          // later in the loop, so increment it by part.strings.length - 2 here\n          i += (part as AttributePart).strings!.length - 2;\n        } else {\n          part._$setValue(values[i]);\n        }\n      }\n      i++;\n    }\n  }\n}\n\n/*\n * Parts\n */\ntype AttributeTemplatePart = {\n  readonly type: typeof ATTRIBUTE_PART;\n  readonly index: number;\n  readonly name: string;\n  readonly ctor: typeof AttributePart;\n  readonly strings: ReadonlyArray<string>;\n};\ntype ChildTemplatePart = {\n  readonly type: typeof CHILD_PART;\n  readonly index: number;\n};\ntype ElementTemplatePart = {\n  readonly type: typeof ELEMENT_PART;\n  readonly index: number;\n};\ntype CommentTemplatePart = {\n  readonly type: typeof COMMENT_PART;\n  readonly index: number;\n};\n\n/**\n * A TemplatePart represents a dynamic part in a template, before the template\n * is instantiated. When a template is instantiated Parts are created from\n * TemplateParts.\n */\ntype TemplatePart =\n  | ChildTemplatePart\n  | AttributeTemplatePart\n  | ElementTemplatePart\n  | CommentTemplatePart;\n\nexport type Part =\n  | ChildPart\n  | AttributePart\n  | PropertyPart\n  | BooleanAttributePart\n  | ElementPart\n  | EventPart;\n\nexport type {ChildPart};\nclass ChildPart implements Disconnectable {\n  readonly type = CHILD_PART;\n  readonly options: RenderOptions | undefined;\n  _$committedValue: unknown = nothing;\n  /** @internal */\n  __directive?: Directive;\n  /** @internal */\n  _$startNode: ChildNode;\n  /** @internal */\n  _$endNode: ChildNode | null;\n  private _textSanitizer: ValueSanitizer | undefined;\n  /** @internal */\n  _$parent: Disconnectable | undefined;\n  /**\n   * Connection state for RootParts only (i.e. ChildPart without _$parent\n   * returned from top-level `render`). This field is unused otherwise. The\n   * intention would be clearer if we made `RootPart` a subclass of `ChildPart`\n   * with this field (and a different _$isConnected getter), but the subclass\n   * caused a perf regression, possibly due to making call sites polymorphic.\n   * @internal\n   */\n  __isConnected: boolean;\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    // ChildParts that are not at the root should always be created with a\n    // parent; only RootChildNode's won't, so they return the local isConnected\n    // state\n    return this._$parent?._$isConnected ?? this.__isConnected;\n  }\n\n  // The following fields will be patched onto ChildParts when required by\n  // AsyncDirective\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /** @internal */\n  _$notifyConnectionChanged?(\n    isConnected: boolean,\n    removeFromParent?: boolean,\n    from?: number\n  ): void;\n  /** @internal */\n  _$reparentDisconnectables?(parent: Disconnectable): void;\n\n  constructor(\n    startNode: ChildNode,\n    endNode: ChildNode | null,\n    parent: TemplateInstance | ChildPart | undefined,\n    options: RenderOptions | undefined\n  ) {\n    this._$startNode = startNode;\n    this._$endNode = endNode;\n    this._$parent = parent;\n    this.options = options;\n    // Note __isConnected is only ever accessed on RootParts (i.e. when there is\n    // no _$parent); the value on a non-root-part is \"don't care\", but checking\n    // for parent would be more code\n    this.__isConnected = options?.isConnected ?? true;\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      // Explicitly initialize for consistent class shape.\n      this._textSanitizer = undefined;\n    }\n  }\n\n  /**\n   * The parent node into which the part renders its content.\n   *\n   * A ChildPart's content consists of a range of adjacent child nodes of\n   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n   * `.endNode`).\n   *\n   * - If both `.startNode` and `.endNode` are non-null, then the part's content\n   * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n   *\n   * - If `.startNode` is non-null but `.endNode` is null, then the part's\n   * content consists of all siblings following `.startNode`, up to and\n   * including the last child of `.parentNode`. If `.endNode` is non-null, then\n   * `.startNode` will always be non-null.\n   *\n   * - If both `.endNode` and `.startNode` are null, then the part's content\n   * consists of all child nodes of `.parentNode`.\n   */\n  get parentNode(): Node {\n    let parentNode: Node = wrap(this._$startNode).parentNode!;\n    const parent = this._$parent;\n    if (\n      parent !== undefined &&\n      parentNode?.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */\n    ) {\n      // If the parentNode is a DocumentFragment, it may be because the DOM is\n      // still in the cloned fragment during initial render; if so, get the real\n      // parentNode the part will be committed into by asking the parent.\n      parentNode = (parent as ChildPart | TemplateInstance).parentNode;\n    }\n    return parentNode;\n  }\n\n  /**\n   * The part's leading marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get startNode(): Node | null {\n    return this._$startNode;\n  }\n\n  /**\n   * The part's trailing marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get endNode(): Node | null {\n    return this._$endNode;\n  }\n\n  _$setValue(value: unknown, directiveParent: DirectiveParent = this): void {\n    if (DEV_MODE && this.parentNode === null) {\n      throw new Error(\n        `This \\`ChildPart\\` has no \\`parentNode\\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \\`innerHTML\\` or \\`textContent\\` can do this.`\n      );\n    }\n    value = resolveDirective(this, value, directiveParent);\n    if (isPrimitive(value)) {\n      // Non-rendering child values. It's important that these do not render\n      // empty text nodes to avoid issues with preventing default <slot>\n      // fallback content.\n      if (value === nothing || value == null || value === '') {\n        if (this._$committedValue !== nothing) {\n          debugLogEvent &&\n            debugLogEvent({\n              kind: 'commit nothing to child',\n              start: this._$startNode,\n              end: this._$endNode,\n              parent: this._$parent,\n              options: this.options,\n            });\n          this._$clear();\n        }\n        this._$committedValue = nothing;\n      } else if (value !== this._$committedValue && value !== noChange) {\n        this._commitText(value);\n      }\n      // This property needs to remain unminified.\n    } else if ((value as TemplateResult)['_$litType$'] !== undefined) {\n      this._commitTemplateResult(value as TemplateResult);\n    } else if ((value as Node).nodeType !== undefined) {\n      if (DEV_MODE && this.options?.host === value) {\n        this._commitText(\n          `[probable mistake: rendered a template's host in itself ` +\n            `(commonly caused by writing \\${this} in a template]`\n        );\n        console.warn(\n          `Attempted to render the template host`,\n          value,\n          `inside itself. This is almost always a mistake, and in dev mode `,\n          `we render some warning text. In production however, we'll `,\n          `render it, which will usually result in an error, and sometimes `,\n          `in the element disappearing from the DOM.`\n        );\n        return;\n      }\n      this._commitNode(value as Node);\n    } else if (isIterable(value)) {\n      this._commitIterable(value);\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert<T extends Node>(node: T) {\n    return wrap(wrap(this._$startNode).parentNode!).insertBefore(\n      node,\n      this._$endNode\n    );\n  }\n\n  private _commitNode(value: Node): void {\n    if (this._$committedValue !== value) {\n      this._$clear();\n      if (\n        ENABLE_EXTRA_SECURITY_HOOKS &&\n        sanitizerFactoryInternal !== noopSanitizer\n      ) {\n        const parentNodeName = this._$startNode.parentNode?.nodeName;\n        if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {\n          let message = 'Forbidden';\n          if (DEV_MODE) {\n            if (parentNodeName === 'STYLE') {\n              message =\n                `Lit does not support binding inside style nodes. ` +\n                `This is a security risk, as style injection attacks can ` +\n                `exfiltrate data and spoof UIs. ` +\n                `Consider instead using css\\`...\\` literals ` +\n                `to compose styles, and do dynamic styling with ` +\n                `css custom properties, ::parts, <slot>s, ` +\n                `and by mutating the DOM rather than stylesheets.`;\n            } else {\n              message =\n                `Lit does not support binding inside script nodes. ` +\n                `This is a security risk, as it could allow arbitrary ` +\n                `code execution.`;\n            }\n          }\n          throw new Error(message);\n        }\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit node',\n          start: this._$startNode,\n          parent: this._$parent,\n          value: value,\n          options: this.options,\n        });\n      this._$committedValue = this._insert(value);\n    }\n  }\n\n  private _commitText(value: unknown): void {\n    // If the committed value is a primitive it means we called _commitText on\n    // the previous render, and we know that this._$startNode.nextSibling is a\n    // Text node. We can now just replace the text content (.data) of the node.\n    if (\n      this._$committedValue !== nothing &&\n      isPrimitive(this._$committedValue)\n    ) {\n      const node = wrap(this._$startNode).nextSibling as Text;\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(node, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit text',\n          node,\n          value,\n          options: this.options,\n        });\n      (node as Text).data = value as string;\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        const textNode = d.createTextNode('');\n        this._commitNode(textNode);\n        // When setting text content, for security purposes it matters a lot\n        // what the parent is. For example, <style> and <script> need to be\n        // handled with care, while <span> does not. So first we need to put a\n        // text node into the document, then we can sanitize its content.\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(textNode, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'commit text',\n            node: textNode,\n            value,\n            options: this.options,\n          });\n        textNode.data = value as string;\n      } else {\n        this._commitNode(d.createTextNode(value as string));\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'commit text',\n            node: wrap(this._$startNode).nextSibling as Text,\n            value,\n            options: this.options,\n          });\n      }\n    }\n    this._$committedValue = value;\n  }\n\n  private _commitTemplateResult(\n    result: TemplateResult | CompiledTemplateResult\n  ): void {\n    // This property needs to remain unminified.\n    const {values, ['_$litType$']: type} = result;\n    // If $litType$ is a number, result is a plain TemplateResult and we get\n    // the template from the template cache. If not, result is a\n    // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need\n    // to create the <template> element the first time we see it.\n    const template: Template | CompiledTemplate =\n      typeof type === 'number'\n        ? this._$getTemplate(result as UncompiledTemplateResult)\n        : (type.el === undefined &&\n            (type.el = Template.createElement(\n              trustFromTemplateString(type.h, type.h[0]),\n              this.options\n            )),\n          type);\n\n    if ((this._$committedValue as TemplateInstance)?._$template === template) {\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template updating',\n          template,\n          instance: this._$committedValue as TemplateInstance,\n          parts: (this._$committedValue as TemplateInstance)._$parts,\n          options: this.options,\n          values,\n        });\n      (this._$committedValue as TemplateInstance)._update(values);\n    } else {\n      const instance = new TemplateInstance(template as Template, this);\n      const fragment = instance._clone(this.options);\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template instantiated',\n          template,\n          instance,\n          parts: instance._$parts,\n          options: this.options,\n          fragment,\n          values,\n        });\n      instance._update(values);\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template instantiated and updated',\n          template,\n          instance,\n          parts: instance._$parts,\n          options: this.options,\n          fragment,\n          values,\n        });\n      this._commitNode(fragment);\n      this._$committedValue = instance;\n    }\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @internal */\n  _$getTemplate(result: UncompiledTemplateResult) {\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n      templateCache.set(result.strings, (template = new Template(result)));\n    }\n    return template;\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If value is an array, then the previous render was of an\n    // iterable and value will contain the ChildParts from the previous\n    // render. If value is not an array, clear this part and make a new\n    // array for ChildParts.\n    if (!isArray(this._$committedValue)) {\n      this._$committedValue = [];\n      this._$clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this._$committedValue as ChildPart[];\n    let partIndex = 0;\n    let itemPart: ChildPart | undefined;\n\n    for (const item of value) {\n      if (partIndex === itemParts.length) {\n        // If no existing part, create a new one\n        // TODO (justinfagnani): test perf impact of always creating two parts\n        // instead of sharing parts between nodes\n        // https://github.com/lit/lit/issues/1266\n        itemParts.push(\n          (itemPart = new ChildPart(\n            this._insert(createMarker()),\n            this._insert(createMarker()),\n            this,\n            this.options\n          ))\n        );\n      } else {\n        // Reuse an existing part\n        itemPart = itemParts[partIndex];\n      }\n      itemPart._$setValue(item);\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // itemParts always have end nodes\n      this._$clear(\n        itemPart && wrap(itemPart._$endNode!).nextSibling,\n        partIndex\n      );\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n    }\n  }\n\n  /**\n   * Removes the nodes contained within this Part from the DOM.\n   *\n   * @param start Start node to clear from, for clearing a subset of the part's\n   *     DOM (used when truncating iterables)\n   * @param from  When `start` is specified, the index within the iterable from\n   *     which ChildParts are being removed, used for disconnecting directives in\n   *     those Parts.\n   *\n   * @internal\n   */\n  _$clear(\n    start: ChildNode | null = wrap(this._$startNode).nextSibling,\n    from?: number\n  ) {\n    this._$notifyConnectionChanged?.(false, true, from);\n    while (start && start !== this._$endNode) {\n      const n = wrap(start!).nextSibling;\n      (wrap(start!) as Element).remove();\n      start = n;\n    }\n  }\n  /**\n   * Implementation of RootPart's `isConnected`. Note that this method\n   * should only be called on `RootPart`s (the `ChildPart` returned from a\n   * top-level `render()` call). It has no effect on non-root ChildParts.\n   * @param isConnected Whether to set\n   * @internal\n   */\n  setConnected(isConnected: boolean) {\n    if (this._$parent === undefined) {\n      this.__isConnected = isConnected;\n      this._$notifyConnectionChanged?.(isConnected);\n    } else if (DEV_MODE) {\n      throw new Error(\n        'part.setConnected() may only be called on a ' +\n          'RootPart returned from render().'\n      );\n    }\n  }\n}\n\n/**\n * A top-level `ChildPart` returned from `render` that manages the connected\n * state of `AsyncDirective`s created throughout the tree below it.\n */\nexport interface RootPart extends ChildPart {\n  /**\n   * Sets the connection state for `AsyncDirective`s contained within this root\n   * ChildPart.\n   *\n   * lit-html does not automatically monitor the connectedness of DOM rendered;\n   * as such, it is the responsibility of the caller to `render` to ensure that\n   * `part.setConnected(false)` is called before the part object is potentially\n   * discarded, to ensure that `AsyncDirective`s have a chance to dispose of\n   * any resources being held. If a `RootPart` that was previously\n   * disconnected is subsequently re-connected (and its `AsyncDirective`s should\n   * re-connect), `setConnected(true)` should be called.\n   *\n   * @param isConnected Whether directives within this tree should be connected\n   * or not\n   */\n  setConnected(isConnected: boolean): void;\n}\n\nexport type {AttributePart};\nclass AttributePart implements Disconnectable {\n  readonly type:\n    | typeof ATTRIBUTE_PART\n    | typeof PROPERTY_PART\n    | typeof BOOLEAN_ATTRIBUTE_PART\n    | typeof EVENT_PART = ATTRIBUTE_PART;\n  readonly element: HTMLElement;\n  readonly name: string;\n  readonly options: RenderOptions | undefined;\n\n  /**\n   * If this attribute part represents an interpolation, this contains the\n   * static strings of the interpolation. For single-value, complete bindings,\n   * this is undefined.\n   */\n  readonly strings?: ReadonlyArray<string>;\n  /** @internal */\n  _$committedValue: unknown | Array<unknown> = nothing;\n  /** @internal */\n  __directives?: Array<Directive | undefined>;\n  /** @internal */\n  _$parent: Disconnectable;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  protected _sanitizer: ValueSanitizer | undefined;\n\n  get tagName() {\n    return this.element.tagName;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this.element = element;\n    this.name = name;\n    this._$parent = parent;\n    this.options = options;\n    if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {\n      this._$committedValue = new Array(strings.length - 1).fill(new String());\n      this.strings = strings;\n    } else {\n      this._$committedValue = nothing;\n    }\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      this._sanitizer = undefined;\n    }\n  }\n\n  /**\n   * Sets the value of this part by resolving the value from possibly multiple\n   * values and static strings and committing it to the DOM.\n   * If this part is single-valued, `this._strings` will be undefined, and the\n   * method will be called with a single value argument. If this part is\n   * multi-value, `this._strings` will be defined, and the method is called\n   * with the value array of the part's owning TemplateInstance, and an offset\n   * into the value array from which the values should be read.\n   * This method is overloaded this way to eliminate short-lived array slices\n   * of the template instance values, and allow a fast-path for single-valued\n   * parts.\n   *\n   * @param value The part value, or an array of values for multi-valued parts\n   * @param valueIndex the index to start reading values from. `undefined` for\n   *   single-valued parts\n   * @param noCommit causes the part to not commit its value to the DOM. Used\n   *   in hydration to prime attribute parts with their first-rendered value,\n   *   but not set the attribute, and in SSR to no-op the DOM operation and\n   *   capture the value for serialization.\n   *\n   * @internal\n   */\n  _$setValue(\n    value: unknown | Array<unknown>,\n    directiveParent: DirectiveParent = this,\n    valueIndex?: number,\n    noCommit?: boolean\n  ) {\n    const strings = this.strings;\n\n    // Whether any of the values has changed, for dirty-checking\n    let change = false;\n\n    if (strings === undefined) {\n      // Single-value binding case\n      value = resolveDirective(this, value, directiveParent, 0);\n      change =\n        !isPrimitive(value) ||\n        (value !== this._$committedValue && value !== noChange);\n      if (change) {\n        this._$committedValue = value;\n      }\n    } else {\n      // Interpolation case\n      const values = value as Array<unknown>;\n      value = strings[0];\n\n      let i, v;\n      for (i = 0; i < strings.length - 1; i++) {\n        v = resolveDirective(this, values[valueIndex! + i], directiveParent, i);\n\n        if (v === noChange) {\n          // If the user-provided value is `noChange`, use the previous value\n          v = (this._$committedValue as Array<unknown>)[i];\n        }\n        change ||=\n          !isPrimitive(v) || v !== (this._$committedValue as Array<unknown>)[i];\n        if (v === nothing) {\n          value = nothing;\n        } else if (value !== nothing) {\n          value += (v ?? '') + strings[i + 1];\n        }\n        // We always record each value, even if one is `nothing`, for future\n        // change detection.\n        (this._$committedValue as Array<unknown>)[i] = v;\n      }\n    }\n    if (change && !noCommit) {\n      this._commitValue(value);\n    }\n  }\n\n  /** @internal */\n  _commitValue(value: unknown) {\n    if (value === nothing) {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._sanitizer === undefined) {\n          this._sanitizer = sanitizerFactoryInternal(\n            this.element,\n            this.name,\n            'attribute'\n          );\n        }\n        value = this._sanitizer(value ?? '');\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit attribute',\n          element: this.element,\n          name: this.name,\n          value,\n          options: this.options,\n        });\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        (value ?? '') as string\n      );\n    }\n  }\n}\n\nexport type {PropertyPart};\nclass PropertyPart extends AttributePart {\n  override readonly type = PROPERTY_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      if (this._sanitizer === undefined) {\n        this._sanitizer = sanitizerFactoryInternal(\n          this.element,\n          this.name,\n          'property'\n        );\n      }\n      value = this._sanitizer(value);\n    }\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit property',\n        element: this.element,\n        name: this.name,\n        value,\n        options: this.options,\n      });\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.element as any)[this.name] = value === nothing ? undefined : value;\n  }\n}\n\nexport type {BooleanAttributePart};\nclass BooleanAttributePart extends AttributePart {\n  override readonly type = BOOLEAN_ATTRIBUTE_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit boolean attribute',\n        element: this.element,\n        name: this.name,\n        value: !!(value && value !== nothing),\n        options: this.options,\n      });\n    (wrap(this.element) as Element).toggleAttribute(\n      this.name,\n      !!value && value !== nothing\n    );\n  }\n}\n\ntype EventListenerWithOptions = EventListenerOrEventListenerObject &\n  Partial<AddEventListenerOptions>;\n\n/**\n * An AttributePart that manages an event listener via add/removeEventListener.\n *\n * This part works by adding itself as the event listener on an element, then\n * delegating to the value passed to it. This reduces the number of calls to\n * add/removeEventListener if the listener changes frequently, such as when an\n * inline function is used as a listener.\n *\n * Because event options are passed when adding listeners, we must take case\n * to add and remove the part as a listener when the event options change.\n */\nexport type {EventPart};\nclass EventPart extends AttributePart {\n  override readonly type = EVENT_PART;\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    super(element, name, strings, parent, options);\n\n    if (DEV_MODE && this.strings !== undefined) {\n      throw new Error(\n        `A \\`<${element.localName}>\\` has a \\`@${name}=...\\` listener with ` +\n          'invalid content. Event listeners in templates must have exactly ' +\n          'one expression and no surrounding text.'\n      );\n    }\n  }\n\n  // EventPart does not use the base _$setValue/_resolveValue implementation\n  // since the dirty checking is more complex\n  /** @internal */\n  override _$setValue(\n    newListener: unknown,\n    directiveParent: DirectiveParent = this\n  ) {\n    newListener =\n      resolveDirective(this, newListener, directiveParent, 0) ?? nothing;\n    if (newListener === noChange) {\n      return;\n    }\n    const oldListener = this._$committedValue;\n\n    // If the new value is nothing or any options change we have to remove the\n    // part as a listener.\n    const shouldRemoveListener =\n      (newListener === nothing && oldListener !== nothing) ||\n      (newListener as EventListenerWithOptions).capture !==\n        (oldListener as EventListenerWithOptions).capture ||\n      (newListener as EventListenerWithOptions).once !==\n        (oldListener as EventListenerWithOptions).once ||\n      (newListener as EventListenerWithOptions).passive !==\n        (oldListener as EventListenerWithOptions).passive;\n\n    // If the new value is not nothing and we removed the listener, we have\n    // to add the part as a listener.\n    const shouldAddListener =\n      newListener !== nothing &&\n      (oldListener === nothing || shouldRemoveListener);\n\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit event listener',\n        element: this.element,\n        name: this.name,\n        value: newListener,\n        options: this.options,\n        removeListener: shouldRemoveListener,\n        addListener: shouldAddListener,\n        oldListener,\n      });\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n        this.name,\n        this,\n        oldListener as EventListenerWithOptions\n      );\n    }\n    if (shouldAddListener) {\n      // Beware: IE11 and Chrome 41 don't like using the listener as the\n      // options object. Figure out how to deal w/ this in IE11 - maybe\n      // patch addEventListener?\n      this.element.addEventListener(\n        this.name,\n        this,\n        newListener as EventListenerWithOptions\n      );\n    }\n    this._$committedValue = newListener;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this._$committedValue === 'function') {\n      this._$committedValue.call(this.options?.host ?? this.element, event);\n    } else {\n      (this._$committedValue as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\nexport type {ElementPart};\nclass ElementPart implements Disconnectable {\n  readonly type = ELEMENT_PART;\n\n  /** @internal */\n  __directive?: Directive;\n\n  // This is to ensure that every Part has a _$committedValue\n  _$committedValue: undefined;\n\n  /** @internal */\n  _$parent!: Disconnectable;\n\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  options: RenderOptions | undefined;\n\n  constructor(\n    public element: Element,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this._$parent = parent;\n    this.options = options;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  _$setValue(value: unknown): void {\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit to element binding',\n        element: this.element,\n        value,\n        options: this.options,\n      });\n    resolveDirective(this, value);\n  }\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports mangled in the\n * client side code, we export a _$LH object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-element, which re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LH = {\n  // Used in lit-ssr\n  _boundAttributeSuffix: boundAttributeSuffix,\n  _marker: marker,\n  _markerMatch: markerMatch,\n  _HTML_RESULT: HTML_RESULT,\n  _getTemplateHtml: getTemplateHtml,\n  // Used in tests and private-ssr-support\n  _TemplateInstance: TemplateInstance,\n  _isIterable: isIterable,\n  _resolveDirective: resolveDirective,\n  _ChildPart: ChildPart,\n  _AttributePart: AttributePart,\n  _BooleanAttributePart: BooleanAttributePart,\n  _EventPart: EventPart,\n  _PropertyPart: PropertyPart,\n  _ElementPart: ElementPart,\n};\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? global.litHtmlPolyfillSupportDevMode\n  : global.litHtmlPolyfillSupport;\npolyfillSupport?.(Template, ChildPart);\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n(global.litHtmlVersions ??= []).push('3.2.1');\nif (DEV_MODE && global.litHtmlVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. ` +\n      `Loading multiple versions is not recommended.`\n  );\n}\n\n/**\n * Renders a value, usually a lit-html TemplateResult, to the container.\n *\n * This example renders the text \"Hello, Zoe!\" inside a paragraph tag, appending\n * it to the container `document.body`.\n *\n * ```js\n * import {html, render} from 'lit';\n *\n * const name = \"Zoe\";\n * render(html`<p>Hello, ${name}!</p>`, document.body);\n * ```\n *\n * @param value Any [renderable\n *   value](https://lit.dev/docs/templates/expressions/#child-expressions),\n *   typically a {@linkcode TemplateResult} created by evaluating a template tag\n *   like {@linkcode html} or {@linkcode svg}.\n * @param container A DOM container to render to. The first render will append\n *   the rendered value to the container, and subsequent renders will\n *   efficiently update the rendered value if the same result type was\n *   previously rendered there.\n * @param options See {@linkcode RenderOptions} for options documentation.\n * @see\n * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}\n */\nexport const render = (\n  value: unknown,\n  container: HTMLElement | DocumentFragment,\n  options?: RenderOptions\n): RootPart => {\n  if (DEV_MODE && container == null) {\n    // Give a clearer error message than\n    //     Uncaught TypeError: Cannot read properties of null (reading\n    //     '_$litPart$')\n    // which reads like an internal Lit error.\n    throw new TypeError(`The container to render into may not be ${container}`);\n  }\n  const renderId = DEV_MODE ? debugLogRenderId++ : 0;\n  const partOwnerNode = options?.renderBefore ?? container;\n  // This property needs to remain unminified.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let part: ChildPart = (partOwnerNode as any)['_$litPart$'];\n  debugLogEvent &&\n    debugLogEvent({\n      kind: 'begin render',\n      id: renderId,\n      value,\n      container,\n      options,\n      part,\n    });\n  if (part === undefined) {\n    const endNode = options?.renderBefore ?? null;\n    // This property needs to remain unminified.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (partOwnerNode as any)['_$litPart$'] = part = new ChildPart(\n      container.insertBefore(createMarker(), endNode),\n      endNode,\n      undefined,\n      options ?? {}\n    );\n  }\n  part._$setValue(value);\n  debugLogEvent &&\n    debugLogEvent({\n      kind: 'end render',\n      id: renderId,\n      value,\n      container,\n      options,\n      part,\n    });\n  return part as RootPart;\n};\n\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n  render.setSanitizer = setSanitizer;\n  render.createSanitizer = createSanitizer;\n  if (DEV_MODE) {\n    render._testOnlyClearSanitizerFactoryDoNotCallOrElse =\n      _testOnlyClearSanitizerFactoryDoNotCallOrElse;\n  }\n}\n","import{ReactiveElement as t}from\"@lit/reactive-element\";export*from\"@lit/reactive-element\";import{render as e,noChange as s}from\"lit-html\";export*from\"lit-html\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */class r extends t{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){const t=super.createRenderRoot();return this.renderOptions.renderBefore??=t.firstChild,t}update(t){const s=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=e(s,this.renderRoot,this.renderOptions)}connectedCallback(){super.connectedCallback(),this._$Do?.setConnected(!0)}disconnectedCallback(){super.disconnectedCallback(),this._$Do?.setConnected(!1)}render(){return s}}r._$litElement$=!0,r[\"finalized\"]=!0,globalThis.litElementHydrateSupport?.({LitElement:r});const i=globalThis.litElementPolyfillSupport;i?.({LitElement:r});const o={_$AK:(t,e,s)=>{t._$AK(e,s)},_$AL:t=>t._$AL};(globalThis.litElementVersions??=[]).push(\"4.1.1\");export{r as LitElement,o as _$LE};\n//# sourceMappingURL=lit-element.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * The main LitElement module, which defines the {@linkcode LitElement} base\n * class and related APIs.\n *\n * LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n * Import {@linkcode LitElement} and {@linkcode html} from this module to\n * create a component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends {@linkcode ReactiveElement} and adds lit-html\n * templating. The `ReactiveElement` class is provided for users that want to\n * build their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport {PropertyValues, ReactiveElement} from '@lit/reactive-element';\nimport {render, RenderOptions, noChange, RootPart} from 'lit-html';\nexport * from '@lit/reactive-element';\nexport * from 'lit-html';\n\nimport {LitUnstable} from 'lit-html';\nimport {ReactiveUnstable} from '@lit/reactive-element';\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Unstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | LitUnstable.DebugLog.Entry\n      | ReactiveUnstable.DebugLog.Entry;\n  }\n}\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the {@linkcode LitElement.properties properties} property or the\n * {@linkcode property} decorator.\n */\nexport class LitElement extends ReactiveElement {\n  // This property needs to remain unminified.\n  static ['_$litElement$'] = true;\n\n  /**\n   * @category rendering\n   */\n  readonly renderOptions: RenderOptions = {host: this};\n\n  private __childPart: RootPart | undefined = undefined;\n\n  /**\n   * @category rendering\n   */\n  protected override createRenderRoot() {\n    const renderRoot = super.createRenderRoot();\n    // When adoptedStyleSheets are shimmed, they are inserted into the\n    // shadowRoot by createRenderRoot. Adjust the renderBefore node so that\n    // any styles in Lit content render before adoptedStyleSheets. This is\n    // important so that adoptedStyleSheets have precedence over styles in\n    // the shadowRoot.\n    this.renderOptions.renderBefore ??= renderRoot!.firstChild as ChildNode;\n    return renderRoot;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected override update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const value = this.render();\n    if (!this.hasUpdated) {\n      this.renderOptions.isConnected = this.isConnected;\n    }\n    super.update(changedProperties);\n    this.__childPart = render(value, this.renderRoot, this.renderOptions);\n  }\n\n  /**\n   * Invoked when the component is added to the document's DOM.\n   *\n   * In `connectedCallback()` you should setup tasks that should only occur when\n   * the element is connected to the document. The most common of these is\n   * adding event listeners to nodes external to the element, like a keydown\n   * event handler added to the window.\n   *\n   * ```ts\n   * connectedCallback() {\n   *   super.connectedCallback();\n   *   addEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * Typically, anything done in `connectedCallback()` should be undone when the\n   * element is disconnected, in `disconnectedCallback()`.\n   *\n   * @category lifecycle\n   */\n  override connectedCallback() {\n    super.connectedCallback();\n    this.__childPart?.setConnected(true);\n  }\n\n  /**\n   * Invoked when the component is removed from the document's DOM.\n   *\n   * This callback is the main signal to the element that it may no longer be\n   * used. `disconnectedCallback()` should ensure that nothing is holding a\n   * reference to the element (such as event listeners added to nodes external\n   * to the element), so that it is free to be garbage collected.\n   *\n   * ```ts\n   * disconnectedCallback() {\n   *   super.disconnectedCallback();\n   *   window.removeEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * An element may be re-connected after being disconnected.\n   *\n   * @category lifecycle\n   */\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__childPart?.setConnected(false);\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's `ChildPart` - typically a\n   * `TemplateResult`. Setting properties inside this method will *not* trigger\n   * the element to update.\n   * @category rendering\n   */\n  protected render(): unknown {\n    return noChange;\n  }\n}\n\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See @lit/reactive-element for more information.\n */\n(LitElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('finalized', LitElement)\n] = true;\n\n// Install hydration if available\nglobalThis.litElementHydrateSupport?.({LitElement});\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? globalThis.litElementPolyfillSupportDevMode\n  : globalThis.litElementPolyfillSupport;\npolyfillSupport?.({LitElement});\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LE object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-html, since this module re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LE = {\n  _$attributeToProperty: (\n    el: LitElement,\n    name: string,\n    value: string | null\n  ) => {\n    // eslint-disable-next-line\n    (el as any)._$attributeToProperty(name, value);\n  },\n  // eslint-disable-next-line\n  _$changedProperties: (el: LitElement) => (el as any)._$changedProperties,\n};\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n(globalThis.litElementVersions ??= []).push('4.1.1');\nif (DEV_MODE && globalThis.litElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst o=!1;export{o as isServer};\n//# sourceMappingURL=is-server.js.map\n","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * @fileoverview\n *\n * This file exports a boolean const whose value will depend on what environment\n * the module is being imported from.\n */\n\nconst NODE_MODE = false;\n\n/**\n * A boolean that will be `true` in server environments like Node, and `false`\n * in browser environments. Note that your server environment or toolchain must\n * support the `\"node\"` export condition for this to be `true`.\n *\n * This can be used when authoring components to change behavior based on\n * whether or not the component is executing in an SSR context.\n */\nexport const isServer = NODE_MODE;\n","import{nothing as t,noChange as i}from\"../lit-html.js\";import{Directive as r,PartType as s,directive as n}from\"../directive.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */class e extends r{constructor(i){if(super(i),this.it=t,i.type!==s.CHILD)throw Error(this.constructor.directiveName+\"() can only be used in child bindings\")}render(r){if(r===t||null==r)return this._t=void 0,this.it=r;if(r===i)return r;if(\"string\"!=typeof r)throw Error(this.constructor.directiveName+\"() called with a non-string value\");if(r===this.it)return this._t;this.it=r;const s=[r];return s.raw=s,this._t={_$litType$:this.constructor.resultType,strings:s,values:[]}}}e.directiveName=\"unsafeHTML\",e.resultType=1;const o=n(e);export{e as UnsafeHTMLDirective,o as unsafeHTML};\n//# sourceMappingURL=unsafe-html.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing, TemplateResult, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\n\nconst HTML_RESULT = 1;\n\nexport class UnsafeHTMLDirective extends Directive {\n  static directiveName = 'unsafeHTML';\n  static resultType = HTML_RESULT;\n\n  private _value: unknown = nothing;\n  private _templateResult?: TemplateResult;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() can only be used in child bindings`\n      );\n    }\n  }\n\n  render(value: string | typeof nothing | typeof noChange | undefined | null) {\n    if (value === nothing || value == null) {\n      this._templateResult = undefined;\n      return (this._value = value);\n    }\n    if (value === noChange) {\n      return value;\n    }\n    if (typeof value != 'string') {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() called with a non-string value`\n      );\n    }\n    if (value === this._value) {\n      return this._templateResult;\n    }\n    this._value = value;\n    const strings = [value] as unknown as TemplateStringsArray;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (strings as any).raw = strings;\n    // WARNING: impersonating a TemplateResult like this is extremely\n    // dangerous. Third-party directives should not do this.\n    return (this._templateResult = {\n      // Cast to a known set of integers that satisfy ResultType so that we\n      // don't have to export ResultType and possibly encourage this pattern.\n      // This property needs to remain unminified.\n      ['_$litType$']: (this.constructor as typeof UnsafeHTMLDirective)\n        .resultType as 1 | 2,\n      strings,\n      values: [],\n    });\n  }\n}\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t={ATTRIBUTE:1,CHILD:2,PROPERTY:3,BOOLEAN_ATTRIBUTE:4,EVENT:5,ELEMENT:6},e=t=>(...e)=>({_$litDirective$:t,values:e});class i{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}export{i as Directive,t as PartType,e as directive};\n//# sourceMappingURL=directive.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Disconnectable, Part} from './lit-html.js';\n\nexport {\n  AttributePart,\n  BooleanAttributePart,\n  ChildPart,\n  ElementPart,\n  EventPart,\n  Part,\n  PropertyPart,\n} from './lit-html.js';\n\nexport interface DirectiveClass {\n  new (part: PartInfo): Directive;\n}\n\n/**\n * This utility type extracts the signature of a directive class's render()\n * method so we can use it for the type of the generated directive function.\n */\nexport type DirectiveParameters<C extends Directive> = Parameters<C['render']>;\n\n/**\n * A generated directive function doesn't evaluate the directive, but just\n * returns a DirectiveResult object that captures the arguments.\n */\nexport interface DirectiveResult<C extends DirectiveClass = DirectiveClass> {\n  /**\n   * This property needs to remain unminified.\n   * @internal\n   */\n  ['_$litDirective$']: C;\n  /** @internal */\n  values: DirectiveParameters<InstanceType<C>>;\n}\n\nexport const PartType = {\n  ATTRIBUTE: 1,\n  CHILD: 2,\n  PROPERTY: 3,\n  BOOLEAN_ATTRIBUTE: 4,\n  EVENT: 5,\n  ELEMENT: 6,\n} as const;\n\nexport type PartType = (typeof PartType)[keyof typeof PartType];\n\nexport interface ChildPartInfo {\n  readonly type: typeof PartType.CHILD;\n}\n\nexport interface AttributePartInfo {\n  readonly type:\n    | typeof PartType.ATTRIBUTE\n    | typeof PartType.PROPERTY\n    | typeof PartType.BOOLEAN_ATTRIBUTE\n    | typeof PartType.EVENT;\n  readonly strings?: ReadonlyArray<string>;\n  readonly name: string;\n  readonly tagName: string;\n}\n\nexport interface ElementPartInfo {\n  readonly type: typeof PartType.ELEMENT;\n}\n\n/**\n * Information about the part a directive is bound to.\n *\n * This is useful for checking that a directive is attached to a valid part,\n * such as with directive that can only be used on attribute bindings.\n */\nexport type PartInfo = ChildPartInfo | AttributePartInfo | ElementPartInfo;\n\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive =\n  <C extends DirectiveClass>(c: C) =>\n  (...values: DirectiveParameters<InstanceType<C>>): DirectiveResult<C> => ({\n    // This property needs to remain unminified.\n    ['_$litDirective$']: c,\n    values,\n  });\n\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport abstract class Directive implements Disconnectable {\n  //@internal\n  __part!: Part;\n  //@internal\n  __attributeIndex: number | undefined;\n  //@internal\n  __directive?: Directive;\n\n  //@internal\n  _$parent!: Disconnectable;\n\n  // These will only exist on the AsyncDirective subclass\n  //@internal\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // This property needs to remain unminified.\n  //@internal\n  ['_$notifyDirectiveConnectionChanged']?(isConnected: boolean): void;\n\n  constructor(_partInfo: PartInfo) {}\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  /** @internal */\n  _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    this.__part = part;\n    this._$parent = parent;\n    this.__attributeIndex = attributeIndex;\n  }\n  /** @internal */\n  _$resolve(part: Part, props: Array<unknown>): unknown {\n    return this.update(part, props);\n  }\n\n  abstract render(...props: Array<unknown>): unknown;\n\n  update(_part: Part, props: Array<unknown>): unknown {\n    return this.render(...props);\n  }\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\n// these aren't really private, but nor are they really useful to document\n/**\n * @private\n */\nvar LuxonError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(LuxonError, _Error);\n  function LuxonError() {\n    return _Error.apply(this, arguments) || this;\n  }\n  return LuxonError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * @private\n */\nvar InvalidDateTimeError = /*#__PURE__*/function (_LuxonError) {\n  _inheritsLoose(InvalidDateTimeError, _LuxonError);\n  function InvalidDateTimeError(reason) {\n    return _LuxonError.call(this, \"Invalid DateTime: \" + reason.toMessage()) || this;\n  }\n  return InvalidDateTimeError;\n}(LuxonError);\n\n/**\n * @private\n */\nvar InvalidIntervalError = /*#__PURE__*/function (_LuxonError2) {\n  _inheritsLoose(InvalidIntervalError, _LuxonError2);\n  function InvalidIntervalError(reason) {\n    return _LuxonError2.call(this, \"Invalid Interval: \" + reason.toMessage()) || this;\n  }\n  return InvalidIntervalError;\n}(LuxonError);\n\n/**\n * @private\n */\nvar InvalidDurationError = /*#__PURE__*/function (_LuxonError3) {\n  _inheritsLoose(InvalidDurationError, _LuxonError3);\n  function InvalidDurationError(reason) {\n    return _LuxonError3.call(this, \"Invalid Duration: \" + reason.toMessage()) || this;\n  }\n  return InvalidDurationError;\n}(LuxonError);\n\n/**\n * @private\n */\nvar ConflictingSpecificationError = /*#__PURE__*/function (_LuxonError4) {\n  _inheritsLoose(ConflictingSpecificationError, _LuxonError4);\n  function ConflictingSpecificationError() {\n    return _LuxonError4.apply(this, arguments) || this;\n  }\n  return ConflictingSpecificationError;\n}(LuxonError);\n\n/**\n * @private\n */\nvar InvalidUnitError = /*#__PURE__*/function (_LuxonError5) {\n  _inheritsLoose(InvalidUnitError, _LuxonError5);\n  function InvalidUnitError(unit) {\n    return _LuxonError5.call(this, \"Invalid unit \" + unit) || this;\n  }\n  return InvalidUnitError;\n}(LuxonError);\n\n/**\n * @private\n */\nvar InvalidArgumentError = /*#__PURE__*/function (_LuxonError6) {\n  _inheritsLoose(InvalidArgumentError, _LuxonError6);\n  function InvalidArgumentError() {\n    return _LuxonError6.apply(this, arguments) || this;\n  }\n  return InvalidArgumentError;\n}(LuxonError);\n\n/**\n * @private\n */\nvar ZoneIsAbstractError = /*#__PURE__*/function (_LuxonError7) {\n  _inheritsLoose(ZoneIsAbstractError, _LuxonError7);\n  function ZoneIsAbstractError() {\n    return _LuxonError7.call(this, \"Zone is an abstract class\") || this;\n  }\n  return ZoneIsAbstractError;\n}(LuxonError);\n\n/**\n * @private\n */\n\nvar n = \"numeric\",\n  s = \"short\",\n  l = \"long\";\nvar DATE_SHORT = {\n  year: n,\n  month: n,\n  day: n\n};\nvar DATE_MED = {\n  year: n,\n  month: s,\n  day: n\n};\nvar DATE_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s\n};\nvar DATE_FULL = {\n  year: n,\n  month: l,\n  day: n\n};\nvar DATE_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l\n};\nvar TIME_SIMPLE = {\n  hour: n,\n  minute: n\n};\nvar TIME_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n\n};\nvar TIME_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s\n};\nvar TIME_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l\n};\nvar TIME_24_SIMPLE = {\n  hour: n,\n  minute: n,\n  hourCycle: \"h23\"\n};\nvar TIME_24_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\"\n};\nvar TIME_24_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n  timeZoneName: s\n};\nvar TIME_24_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n  timeZoneName: l\n};\nvar DATETIME_SHORT = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n\n};\nvar DATETIME_SHORT_WITH_SECONDS = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n\n};\nvar DATETIME_MED = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n\n};\nvar DATETIME_MED_WITH_SECONDS = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n\n};\nvar DATETIME_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s,\n  hour: n,\n  minute: n\n};\nvar DATETIME_FULL = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  timeZoneName: s\n};\nvar DATETIME_FULL_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s\n};\nvar DATETIME_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  timeZoneName: l\n};\nvar DATETIME_HUGE_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l\n};\n\n/**\n * @interface\n */\nvar Zone = /*#__PURE__*/function () {\n  function Zone() {}\n  var _proto = Zone.prototype;\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  _proto.offsetName = function offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */;\n  _proto.formatOffset = function formatOffset(ts, format) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */;\n  _proto.offset = function offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */;\n  _proto.equals = function equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @type {boolean}\n   */;\n  _createClass(Zone, [{\n    key: \"type\",\n    get:\n    /**\n     * The type of zone\n     * @abstract\n     * @type {string}\n     */\n    function get() {\n      throw new ZoneIsAbstractError();\n    }\n\n    /**\n     * The name of this zone.\n     * @abstract\n     * @type {string}\n     */\n  }, {\n    key: \"name\",\n    get: function get() {\n      throw new ZoneIsAbstractError();\n    }\n\n    /**\n     * The IANA name of this zone.\n     * Defaults to `name` if not overwritten by a subclass.\n     * @abstract\n     * @type {string}\n     */\n  }, {\n    key: \"ianaName\",\n    get: function get() {\n      return this.name;\n    }\n\n    /**\n     * Returns whether the offset is known to be fixed for the whole year.\n     * @abstract\n     * @type {boolean}\n     */\n  }, {\n    key: \"isUniversal\",\n    get: function get() {\n      throw new ZoneIsAbstractError();\n    }\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      throw new ZoneIsAbstractError();\n    }\n  }]);\n  return Zone;\n}();\n\nvar singleton$1 = null;\n\n/**\n * Represents the local zone for this JavaScript environment.\n * @implements {Zone}\n */\nvar SystemZone = /*#__PURE__*/function (_Zone) {\n  _inheritsLoose(SystemZone, _Zone);\n  function SystemZone() {\n    return _Zone.apply(this, arguments) || this;\n  }\n  var _proto = SystemZone.prototype;\n  /** @override **/\n  _proto.offsetName = function offsetName(ts, _ref) {\n    var format = _ref.format,\n      locale = _ref.locale;\n    return parseZoneInfo(ts, format, locale);\n  }\n\n  /** @override **/;\n  _proto.formatOffset = function formatOffset$1(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/;\n  _proto.offset = function offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  /** @override **/;\n  _proto.equals = function equals(otherZone) {\n    return otherZone.type === \"system\";\n  }\n\n  /** @override **/;\n  _createClass(SystemZone, [{\n    key: \"type\",\n    get: /** @override **/\n    function get() {\n      return \"system\";\n    }\n\n    /** @override **/\n  }, {\n    key: \"name\",\n    get: function get() {\n      return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    }\n\n    /** @override **/\n  }, {\n    key: \"isUniversal\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return true;\n    }\n  }], [{\n    key: \"instance\",\n    get:\n    /**\n     * Get a singleton instance of the local zone\n     * @return {SystemZone}\n     */\n    function get() {\n      if (singleton$1 === null) {\n        singleton$1 = new SystemZone();\n      }\n      return singleton$1;\n    }\n  }]);\n  return SystemZone;\n}(Zone);\n\nvar dtfCache = {};\nfunction makeDTF(zone) {\n  if (!dtfCache[zone]) {\n    dtfCache[zone] = new Intl.DateTimeFormat(\"en-US\", {\n      hour12: false,\n      timeZone: zone,\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      era: \"short\"\n    });\n  }\n  return dtfCache[zone];\n}\nvar typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  era: 3,\n  hour: 4,\n  minute: 5,\n  second: 6\n};\nfunction hackyOffset(dtf, date) {\n  var formatted = dtf.format(date).replace(/\\u200E/g, \"\"),\n    parsed = /(\\d+)\\/(\\d+)\\/(\\d+) (AD|BC),? (\\d+):(\\d+):(\\d+)/.exec(formatted),\n    fMonth = parsed[1],\n    fDay = parsed[2],\n    fYear = parsed[3],\n    fadOrBc = parsed[4],\n    fHour = parsed[5],\n    fMinute = parsed[6],\n    fSecond = parsed[7];\n  return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];\n}\nfunction partsOffset(dtf, date) {\n  var formatted = dtf.formatToParts(date);\n  var filled = [];\n  for (var i = 0; i < formatted.length; i++) {\n    var _formatted$i = formatted[i],\n      type = _formatted$i.type,\n      value = _formatted$i.value;\n    var pos = typeToPos[type];\n    if (type === \"era\") {\n      filled[pos] = value;\n    } else if (!isUndefined(pos)) {\n      filled[pos] = parseInt(value, 10);\n    }\n  }\n  return filled;\n}\nvar ianaZoneCache = {};\n/**\n * A zone identified by an IANA identifier, like America/New_York\n * @implements {Zone}\n */\nvar IANAZone = /*#__PURE__*/function (_Zone) {\n  _inheritsLoose(IANAZone, _Zone);\n  /**\n   * @param {string} name - Zone name\n   * @return {IANAZone}\n   */\n  IANAZone.create = function create(name) {\n    if (!ianaZoneCache[name]) {\n      ianaZoneCache[name] = new IANAZone(name);\n    }\n    return ianaZoneCache[name];\n  }\n\n  /**\n   * Reset local caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */;\n  IANAZone.resetCache = function resetCache() {\n    ianaZoneCache = {};\n    dtfCache = {};\n  }\n\n  /**\n   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.\n   * @param {string} s - The string to check validity on\n   * @example IANAZone.isValidSpecifier(\"America/New_York\") //=> true\n   * @example IANAZone.isValidSpecifier(\"Sport~~blorp\") //=> false\n   * @deprecated For backward compatibility, this forwards to isValidZone, better use `isValidZone()` directly instead.\n   * @return {boolean}\n   */;\n  IANAZone.isValidSpecifier = function isValidSpecifier(s) {\n    return this.isValidZone(s);\n  }\n\n  /**\n   * Returns whether the provided string identifies a real zone\n   * @param {string} zone - The string to check\n   * @example IANAZone.isValidZone(\"America/New_York\") //=> true\n   * @example IANAZone.isValidZone(\"Fantasia/Castle\") //=> false\n   * @example IANAZone.isValidZone(\"Sport~~blorp\") //=> false\n   * @return {boolean}\n   */;\n  IANAZone.isValidZone = function isValidZone(zone) {\n    if (!zone) {\n      return false;\n    }\n    try {\n      new Intl.DateTimeFormat(\"en-US\", {\n        timeZone: zone\n      }).format();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n  function IANAZone(name) {\n    var _this;\n    _this = _Zone.call(this) || this;\n    /** @private **/\n    _this.zoneName = name;\n    /** @private **/\n    _this.valid = IANAZone.isValidZone(name);\n    return _this;\n  }\n\n  /**\n   * The type of zone. `iana` for all instances of `IANAZone`.\n   * @override\n   * @type {string}\n   */\n  var _proto = IANAZone.prototype;\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @override\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  _proto.offsetName = function offsetName(ts, _ref) {\n    var format = _ref.format,\n      locale = _ref.locale;\n    return parseZoneInfo(ts, format, locale, this.name);\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @override\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */;\n  _proto.formatOffset = function formatOffset$1(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @override\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */;\n  _proto.offset = function offset(ts) {\n    var date = new Date(ts);\n    if (isNaN(date)) return NaN;\n    var dtf = makeDTF(this.name);\n    var _ref2 = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date),\n      year = _ref2[0],\n      month = _ref2[1],\n      day = _ref2[2],\n      adOrBc = _ref2[3],\n      hour = _ref2[4],\n      minute = _ref2[5],\n      second = _ref2[6];\n    if (adOrBc === \"BC\") {\n      year = -Math.abs(year) + 1;\n    }\n\n    // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat\n    var adjustedHour = hour === 24 ? 0 : hour;\n    var asUTC = objToLocalTS({\n      year: year,\n      month: month,\n      day: day,\n      hour: adjustedHour,\n      minute: minute,\n      second: second,\n      millisecond: 0\n    });\n    var asTS = +date;\n    var over = asTS % 1000;\n    asTS -= over >= 0 ? over : 1000 + over;\n    return (asUTC - asTS) / (60 * 1000);\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone\n   * @override\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */;\n  _proto.equals = function equals(otherZone) {\n    return otherZone.type === \"iana\" && otherZone.name === this.name;\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @override\n   * @type {boolean}\n   */;\n  _createClass(IANAZone, [{\n    key: \"type\",\n    get: function get() {\n      return \"iana\";\n    }\n\n    /**\n     * The name of this zone (i.e. the IANA zone name).\n     * @override\n     * @type {string}\n     */\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.zoneName;\n    }\n\n    /**\n     * Returns whether the offset is known to be fixed for the whole year:\n     * Always returns false for all IANA zones.\n     * @override\n     * @type {boolean}\n     */\n  }, {\n    key: \"isUniversal\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return this.valid;\n    }\n  }]);\n  return IANAZone;\n}(Zone);\n\nvar _excluded = [\"base\"],\n  _excluded2 = [\"padTo\", \"floor\"];\n\n// todo - remap caching\n\nvar intlLFCache = {};\nfunction getCachedLF(locString, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  var key = JSON.stringify([locString, opts]);\n  var dtf = intlLFCache[key];\n  if (!dtf) {\n    dtf = new Intl.ListFormat(locString, opts);\n    intlLFCache[key] = dtf;\n  }\n  return dtf;\n}\nvar intlDTCache = {};\nfunction getCachedDTF(locString, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  var key = JSON.stringify([locString, opts]);\n  var dtf = intlDTCache[key];\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache[key] = dtf;\n  }\n  return dtf;\n}\nvar intlNumCache = {};\nfunction getCachedINF(locString, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  var key = JSON.stringify([locString, opts]);\n  var inf = intlNumCache[key];\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache[key] = inf;\n  }\n  return inf;\n}\nvar intlRelCache = {};\nfunction getCachedRTF(locString, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  var _opts = opts;\n    _opts.base;\n    var cacheKeyOpts = _objectWithoutPropertiesLoose(_opts, _excluded); // exclude `base` from the options\n  var key = JSON.stringify([locString, cacheKeyOpts]);\n  var inf = intlRelCache[key];\n  if (!inf) {\n    inf = new Intl.RelativeTimeFormat(locString, opts);\n    intlRelCache[key] = inf;\n  }\n  return inf;\n}\nvar sysLocaleCache = null;\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;\n    return sysLocaleCache;\n  }\n}\nvar weekInfoCache = {};\nfunction getCachedWeekInfo(locString) {\n  var data = weekInfoCache[locString];\n  if (!data) {\n    var locale = new Intl.Locale(locString);\n    // browsers currently implement this as a property, but spec says it should be a getter function\n    data = \"getWeekInfo\" in locale ? locale.getWeekInfo() : locale.weekInfo;\n    weekInfoCache[locString] = data;\n  }\n  return data;\n}\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we'll do this:\n\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n\n  // private subtags and unicode subtags have ordering requirements,\n  // and we're not properly parsing this, so just strip out the\n  // private ones if they exist.\n  var xIndex = localeStr.indexOf(\"-x-\");\n  if (xIndex !== -1) {\n    localeStr = localeStr.substring(0, xIndex);\n  }\n  var uIndex = localeStr.indexOf(\"-u-\");\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    var options;\n    var selectedStr;\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n      selectedStr = localeStr;\n    } catch (e) {\n      var smaller = localeStr.substring(0, uIndex);\n      options = getCachedDTF(smaller).resolvedOptions();\n      selectedStr = smaller;\n    }\n    var _options = options,\n      numberingSystem = _options.numberingSystem,\n      calendar = _options.calendar;\n    return [selectedStr, numberingSystem, calendar];\n  }\n}\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (outputCalendar || numberingSystem) {\n    if (!localeStr.includes(\"-u-\")) {\n      localeStr += \"-u\";\n    }\n    if (outputCalendar) {\n      localeStr += \"-ca-\" + outputCalendar;\n    }\n    if (numberingSystem) {\n      localeStr += \"-nu-\" + numberingSystem;\n    }\n    return localeStr;\n  } else {\n    return localeStr;\n  }\n}\nfunction mapMonths(f) {\n  var ms = [];\n  for (var i = 1; i <= 12; i++) {\n    var dt = DateTime.utc(2009, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\nfunction mapWeekdays(f) {\n  var ms = [];\n  for (var i = 1; i <= 7; i++) {\n    var dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\nfunction listStuff(loc, length, englishFn, intlFn) {\n  var mode = loc.listingMode();\n  if (mode === \"error\") {\n    return null;\n  } else if (mode === \"en\") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\n    return false;\n  } else {\n    return loc.numberingSystem === \"latn\" || !loc.locale || loc.locale.startsWith(\"en\") || new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === \"latn\";\n  }\n}\n\n/**\n * @private\n */\nvar PolyNumberFormatter = /*#__PURE__*/function () {\n  function PolyNumberFormatter(intl, forceSimple, opts) {\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n    opts.padTo;\n      opts.floor;\n      var otherOpts = _objectWithoutPropertiesLoose(opts, _excluded2);\n    if (!forceSimple || Object.keys(otherOpts).length > 0) {\n      var intlOpts = _extends({\n        useGrouping: false\n      }, opts);\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n  var _proto = PolyNumberFormatter.prototype;\n  _proto.format = function format(i) {\n    if (this.inf) {\n      var fixed = this.floor ? Math.floor(i) : i;\n      return this.inf.format(fixed);\n    } else {\n      // to match the browser's numberformatter defaults\n      var _fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n      return padStart(_fixed, this.padTo);\n    }\n  };\n  return PolyNumberFormatter;\n}();\n/**\n * @private\n */\nvar PolyDateFormatter = /*#__PURE__*/function () {\n  function PolyDateFormatter(dt, intl, opts) {\n    this.opts = opts;\n    this.originalZone = undefined;\n    var z = undefined;\n    if (this.opts.timeZone) {\n      // Don't apply any workarounds if a timeZone is explicitly provided in opts\n      this.dt = dt;\n    } else if (dt.zone.type === \"fixed\") {\n      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.\n      // That is why fixed-offset TZ is set to that unless it is:\n      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.\n      // 2. Unsupported by the browser:\n      //    - some do not support Etc/\n      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata\n      var gmtOffset = -1 * (dt.offset / 60);\n      var offsetZ = gmtOffset >= 0 ? \"Etc/GMT+\" + gmtOffset : \"Etc/GMT\" + gmtOffset;\n      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {\n        z = offsetZ;\n        this.dt = dt;\n      } else {\n        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata so\n        // we manually apply the offset and substitute the zone as needed.\n        z = \"UTC\";\n        this.dt = dt.offset === 0 ? dt : dt.setZone(\"UTC\").plus({\n          minutes: dt.offset\n        });\n        this.originalZone = dt.zone;\n      }\n    } else if (dt.zone.type === \"system\") {\n      this.dt = dt;\n    } else if (dt.zone.type === \"iana\") {\n      this.dt = dt;\n      z = dt.zone.name;\n    } else {\n      // Custom zones can have any offset / offsetName so we just manually\n      // apply the offset and substitute the zone as needed.\n      z = \"UTC\";\n      this.dt = dt.setZone(\"UTC\").plus({\n        minutes: dt.offset\n      });\n      this.originalZone = dt.zone;\n    }\n    var intlOpts = _extends({}, this.opts);\n    intlOpts.timeZone = intlOpts.timeZone || z;\n    this.dtf = getCachedDTF(intl, intlOpts);\n  }\n  var _proto2 = PolyDateFormatter.prototype;\n  _proto2.format = function format() {\n    if (this.originalZone) {\n      // If we have to substitute in the actual zone name, we have to use\n      // formatToParts so that the timezone can be replaced.\n      return this.formatToParts().map(function (_ref) {\n        var value = _ref.value;\n        return value;\n      }).join(\"\");\n    }\n    return this.dtf.format(this.dt.toJSDate());\n  };\n  _proto2.formatToParts = function formatToParts() {\n    var _this = this;\n    var parts = this.dtf.formatToParts(this.dt.toJSDate());\n    if (this.originalZone) {\n      return parts.map(function (part) {\n        if (part.type === \"timeZoneName\") {\n          var offsetName = _this.originalZone.offsetName(_this.dt.ts, {\n            locale: _this.dt.locale,\n            format: _this.opts.timeZoneName\n          });\n          return _extends({}, part, {\n            value: offsetName\n          });\n        } else {\n          return part;\n        }\n      });\n    }\n    return parts;\n  };\n  _proto2.resolvedOptions = function resolvedOptions() {\n    return this.dtf.resolvedOptions();\n  };\n  return PolyDateFormatter;\n}();\n/**\n * @private\n */\nvar PolyRelFormatter = /*#__PURE__*/function () {\n  function PolyRelFormatter(intl, isEnglish, opts) {\n    this.opts = _extends({\n      style: \"long\"\n    }, opts);\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(intl, opts);\n    }\n  }\n  var _proto3 = PolyRelFormatter.prototype;\n  _proto3.format = function format(count, unit) {\n    if (this.rtf) {\n      return this.rtf.format(count, unit);\n    } else {\n      return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== \"long\");\n    }\n  };\n  _proto3.formatToParts = function formatToParts(count, unit) {\n    if (this.rtf) {\n      return this.rtf.formatToParts(count, unit);\n    } else {\n      return [];\n    }\n  };\n  return PolyRelFormatter;\n}();\nvar fallbackWeekSettings = {\n  firstDay: 1,\n  minimalDays: 4,\n  weekend: [6, 7]\n};\n\n/**\n * @private\n */\nvar Locale = /*#__PURE__*/function () {\n  Locale.fromOpts = function fromOpts(opts) {\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.weekSettings, opts.defaultToEN);\n  };\n  Locale.create = function create(locale, numberingSystem, outputCalendar, weekSettings, defaultToEN) {\n    if (defaultToEN === void 0) {\n      defaultToEN = false;\n    }\n    var specifiedLocale = locale || Settings.defaultLocale;\n    // the system locale is useful for human-readable strings but annoying for parsing/formatting known formats\n    var localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale());\n    var numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;\n    var outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n    var weekSettingsR = validateWeekSettings(weekSettings) || Settings.defaultWeekSettings;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);\n  };\n  Locale.resetCache = function resetCache() {\n    sysLocaleCache = null;\n    intlDTCache = {};\n    intlNumCache = {};\n    intlRelCache = {};\n  };\n  Locale.fromObject = function fromObject(_temp) {\n    var _ref2 = _temp === void 0 ? {} : _temp,\n      locale = _ref2.locale,\n      numberingSystem = _ref2.numberingSystem,\n      outputCalendar = _ref2.outputCalendar,\n      weekSettings = _ref2.weekSettings;\n    return Locale.create(locale, numberingSystem, outputCalendar, weekSettings);\n  };\n  function Locale(locale, numbering, outputCalendar, weekSettings, specifiedLocale) {\n    var _parseLocaleString = parseLocaleString(locale),\n      parsedLocale = _parseLocaleString[0],\n      parsedNumberingSystem = _parseLocaleString[1],\n      parsedOutputCalendar = _parseLocaleString[2];\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.weekSettings = weekSettings;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n    this.weekdaysCache = {\n      format: {},\n      standalone: {}\n    };\n    this.monthsCache = {\n      format: {},\n      standalone: {}\n    };\n    this.meridiemCache = null;\n    this.eraCache = {};\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n  var _proto4 = Locale.prototype;\n  _proto4.listingMode = function listingMode() {\n    var isActuallyEn = this.isEnglish();\n    var hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === \"latn\") && (this.outputCalendar === null || this.outputCalendar === \"gregory\");\n    return isActuallyEn && hasNoWeirdness ? \"en\" : \"intl\";\n  };\n  _proto4.clone = function clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, validateWeekSettings(alts.weekSettings) || this.weekSettings, alts.defaultToEN || false);\n    }\n  };\n  _proto4.redefaultToEN = function redefaultToEN(alts) {\n    if (alts === void 0) {\n      alts = {};\n    }\n    return this.clone(_extends({}, alts, {\n      defaultToEN: true\n    }));\n  };\n  _proto4.redefaultToSystem = function redefaultToSystem(alts) {\n    if (alts === void 0) {\n      alts = {};\n    }\n    return this.clone(_extends({}, alts, {\n      defaultToEN: false\n    }));\n  };\n  _proto4.months = function months$1(length, format) {\n    var _this2 = this;\n    if (format === void 0) {\n      format = false;\n    }\n    return listStuff(this, length, months, function () {\n      var intl = format ? {\n          month: length,\n          day: \"numeric\"\n        } : {\n          month: length\n        },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!_this2.monthsCache[formatStr][length]) {\n        _this2.monthsCache[formatStr][length] = mapMonths(function (dt) {\n          return _this2.extract(dt, intl, \"month\");\n        });\n      }\n      return _this2.monthsCache[formatStr][length];\n    });\n  };\n  _proto4.weekdays = function weekdays$1(length, format) {\n    var _this3 = this;\n    if (format === void 0) {\n      format = false;\n    }\n    return listStuff(this, length, weekdays, function () {\n      var intl = format ? {\n          weekday: length,\n          year: \"numeric\",\n          month: \"long\",\n          day: \"numeric\"\n        } : {\n          weekday: length\n        },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!_this3.weekdaysCache[formatStr][length]) {\n        _this3.weekdaysCache[formatStr][length] = mapWeekdays(function (dt) {\n          return _this3.extract(dt, intl, \"weekday\");\n        });\n      }\n      return _this3.weekdaysCache[formatStr][length];\n    });\n  };\n  _proto4.meridiems = function meridiems$1() {\n    var _this4 = this;\n    return listStuff(this, undefined, function () {\n      return meridiems;\n    }, function () {\n      // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n      // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n      if (!_this4.meridiemCache) {\n        var intl = {\n          hour: \"numeric\",\n          hourCycle: \"h12\"\n        };\n        _this4.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(function (dt) {\n          return _this4.extract(dt, intl, \"dayperiod\");\n        });\n      }\n      return _this4.meridiemCache;\n    });\n  };\n  _proto4.eras = function eras$1(length) {\n    var _this5 = this;\n    return listStuff(this, length, eras, function () {\n      var intl = {\n        era: length\n      };\n\n      // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!_this5.eraCache[length]) {\n        _this5.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(function (dt) {\n          return _this5.extract(dt, intl, \"era\");\n        });\n      }\n      return _this5.eraCache[length];\n    });\n  };\n  _proto4.extract = function extract(dt, intlOpts, field) {\n    var df = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(),\n      matching = results.find(function (m) {\n        return m.type.toLowerCase() === field;\n      });\n    return matching ? matching.value : null;\n  };\n  _proto4.numberFormatter = function numberFormatter(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n    // (in contrast, the rest of the condition is used heavily)\n    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\n  };\n  _proto4.dtFormatter = function dtFormatter(dt, intlOpts) {\n    if (intlOpts === void 0) {\n      intlOpts = {};\n    }\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  };\n  _proto4.relFormatter = function relFormatter(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\n  };\n  _proto4.listFormatter = function listFormatter(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return getCachedLF(this.intl, opts);\n  };\n  _proto4.isEnglish = function isEnglish() {\n    return this.locale === \"en\" || this.locale.toLowerCase() === \"en-us\" || new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith(\"en-us\");\n  };\n  _proto4.getWeekSettings = function getWeekSettings() {\n    if (this.weekSettings) {\n      return this.weekSettings;\n    } else if (!hasLocaleWeekInfo()) {\n      return fallbackWeekSettings;\n    } else {\n      return getCachedWeekInfo(this.locale);\n    }\n  };\n  _proto4.getStartOfWeek = function getStartOfWeek() {\n    return this.getWeekSettings().firstDay;\n  };\n  _proto4.getMinDaysInFirstWeek = function getMinDaysInFirstWeek() {\n    return this.getWeekSettings().minimalDays;\n  };\n  _proto4.getWeekendDays = function getWeekendDays() {\n    return this.getWeekSettings().weekend;\n  };\n  _proto4.equals = function equals(other) {\n    return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;\n  };\n  _proto4.toString = function toString() {\n    return \"Locale(\" + this.locale + \", \" + this.numberingSystem + \", \" + this.outputCalendar + \")\";\n  };\n  _createClass(Locale, [{\n    key: \"fastNumbers\",\n    get: function get() {\n      if (this.fastNumbersCached == null) {\n        this.fastNumbersCached = supportsFastNumbers(this);\n      }\n      return this.fastNumbersCached;\n    }\n  }]);\n  return Locale;\n}();\n\nvar singleton = null;\n\n/**\n * A zone with a fixed offset (meaning no DST)\n * @implements {Zone}\n */\nvar FixedOffsetZone = /*#__PURE__*/function (_Zone) {\n  _inheritsLoose(FixedOffsetZone, _Zone);\n  /**\n   * Get an instance with a specified offset\n   * @param {number} offset - The offset in minutes\n   * @return {FixedOffsetZone}\n   */\n  FixedOffsetZone.instance = function instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  /**\n   * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\n   * @param {string} s - The offset string to parse\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\n   * @return {FixedOffsetZone}\n   */;\n  FixedOffsetZone.parseSpecifier = function parseSpecifier(s) {\n    if (s) {\n      var r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  };\n  function FixedOffsetZone(offset) {\n    var _this;\n    _this = _Zone.call(this) || this;\n    /** @private **/\n    _this.fixed = offset;\n    return _this;\n  }\n\n  /**\n   * The type of zone. `fixed` for all instances of `FixedOffsetZone`.\n   * @override\n   * @type {string}\n   */\n  var _proto = FixedOffsetZone.prototype;\n  /**\n   * Returns the offset's common name at the specified timestamp.\n   *\n   * For fixed offset zones this equals to the zone name.\n   * @override\n   */\n  _proto.offsetName = function offsetName() {\n    return this.name;\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @override\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */;\n  _proto.formatOffset = function formatOffset$1(ts, format) {\n    return formatOffset(this.fixed, format);\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year:\n   * Always returns true for all fixed offset zones.\n   * @override\n   * @type {boolean}\n   */;\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   *\n   * For fixed offset zones, this is constant and does not depend on a timestamp.\n   * @override\n   * @return {number}\n   */\n  _proto.offset = function offset() {\n    return this.fixed;\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone (i.e. also fixed and same offset)\n   * @override\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */;\n  _proto.equals = function equals(otherZone) {\n    return otherZone.type === \"fixed\" && otherZone.fixed === this.fixed;\n  }\n\n  /**\n   * Return whether this Zone is valid:\n   * All fixed offset zones are valid.\n   * @override\n   * @type {boolean}\n   */;\n  _createClass(FixedOffsetZone, [{\n    key: \"type\",\n    get: function get() {\n      return \"fixed\";\n    }\n\n    /**\n     * The name of this zone.\n     * All fixed zones' names always start with \"UTC\" (plus optional offset)\n     * @override\n     * @type {string}\n     */\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.fixed === 0 ? \"UTC\" : \"UTC\" + formatOffset(this.fixed, \"narrow\");\n    }\n\n    /**\n     * The IANA name of this zone, i.e. `Etc/UTC` or `Etc/GMT+/-nn`\n     *\n     * @override\n     * @type {string}\n     */\n  }, {\n    key: \"ianaName\",\n    get: function get() {\n      if (this.fixed === 0) {\n        return \"Etc/UTC\";\n      } else {\n        return \"Etc/GMT\" + formatOffset(-this.fixed, \"narrow\");\n      }\n    }\n  }, {\n    key: \"isUniversal\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return true;\n    }\n  }], [{\n    key: \"utcInstance\",\n    get:\n    /**\n     * Get a singleton instance of UTC\n     * @return {FixedOffsetZone}\n     */\n    function get() {\n      if (singleton === null) {\n        singleton = new FixedOffsetZone(0);\n      }\n      return singleton;\n    }\n  }]);\n  return FixedOffsetZone;\n}(Zone);\n\n/**\n * A zone that failed to parse. You should never need to instantiate this.\n * @implements {Zone}\n */\nvar InvalidZone = /*#__PURE__*/function (_Zone) {\n  _inheritsLoose(InvalidZone, _Zone);\n  function InvalidZone(zoneName) {\n    var _this;\n    _this = _Zone.call(this) || this;\n    /**  @private */\n    _this.zoneName = zoneName;\n    return _this;\n  }\n\n  /** @override **/\n  var _proto = InvalidZone.prototype;\n  /** @override **/\n  _proto.offsetName = function offsetName() {\n    return null;\n  }\n\n  /** @override **/;\n  _proto.formatOffset = function formatOffset() {\n    return \"\";\n  }\n\n  /** @override **/;\n  _proto.offset = function offset() {\n    return NaN;\n  }\n\n  /** @override **/;\n  _proto.equals = function equals() {\n    return false;\n  }\n\n  /** @override **/;\n  _createClass(InvalidZone, [{\n    key: \"type\",\n    get: function get() {\n      return \"invalid\";\n    }\n\n    /** @override **/\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.zoneName;\n    }\n\n    /** @override **/\n  }, {\n    key: \"isUniversal\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return false;\n    }\n  }]);\n  return InvalidZone;\n}(Zone);\n\n/**\n * @private\n */\nfunction normalizeZone(input, defaultZone) {\n  if (isUndefined(input) || input === null) {\n    return defaultZone;\n  } else if (input instanceof Zone) {\n    return input;\n  } else if (isString(input)) {\n    var lowered = input.toLowerCase();\n    if (lowered === \"default\") return defaultZone;else if (lowered === \"local\" || lowered === \"system\") return SystemZone.instance;else if (lowered === \"utc\" || lowered === \"gmt\") return FixedOffsetZone.utcInstance;else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);\n  } else if (isNumber(input)) {\n    return FixedOffsetZone.instance(input);\n  } else if (typeof input === \"object\" && \"offset\" in input && typeof input.offset === \"function\") {\n    // This is dumb, but the instanceof check above doesn't seem to really work\n    // so we're duck checking it\n    return input;\n  } else {\n    return new InvalidZone(input);\n  }\n}\n\nvar numberingSystems = {\n  arab: \"[\\u0660-\\u0669]\",\n  arabext: \"[\\u06F0-\\u06F9]\",\n  bali: \"[\\u1B50-\\u1B59]\",\n  beng: \"[\\u09E6-\\u09EF]\",\n  deva: \"[\\u0966-\\u096F]\",\n  fullwide: \"[\\uFF10-\\uFF19]\",\n  gujr: \"[\\u0AE6-\\u0AEF]\",\n  hanidec: \"[〇|一|二|三|四|五|六|七|八|九]\",\n  khmr: \"[\\u17E0-\\u17E9]\",\n  knda: \"[\\u0CE6-\\u0CEF]\",\n  laoo: \"[\\u0ED0-\\u0ED9]\",\n  limb: \"[\\u1946-\\u194F]\",\n  mlym: \"[\\u0D66-\\u0D6F]\",\n  mong: \"[\\u1810-\\u1819]\",\n  mymr: \"[\\u1040-\\u1049]\",\n  orya: \"[\\u0B66-\\u0B6F]\",\n  tamldec: \"[\\u0BE6-\\u0BEF]\",\n  telu: \"[\\u0C66-\\u0C6F]\",\n  thai: \"[\\u0E50-\\u0E59]\",\n  tibt: \"[\\u0F20-\\u0F29]\",\n  latn: \"\\\\d\"\n};\nvar numberingSystemsUTF16 = {\n  arab: [1632, 1641],\n  arabext: [1776, 1785],\n  bali: [6992, 7001],\n  beng: [2534, 2543],\n  deva: [2406, 2415],\n  fullwide: [65296, 65303],\n  gujr: [2790, 2799],\n  khmr: [6112, 6121],\n  knda: [3302, 3311],\n  laoo: [3792, 3801],\n  limb: [6470, 6479],\n  mlym: [3430, 3439],\n  mong: [6160, 6169],\n  mymr: [4160, 4169],\n  orya: [2918, 2927],\n  tamldec: [3046, 3055],\n  telu: [3174, 3183],\n  thai: [3664, 3673],\n  tibt: [3872, 3881]\n};\nvar hanidecChars = numberingSystems.hanidec.replace(/[\\[|\\]]/g, \"\").split(\"\");\nfunction parseDigits(str) {\n  var value = parseInt(str, 10);\n  if (isNaN(value)) {\n    value = \"\";\n    for (var i = 0; i < str.length; i++) {\n      var code = str.charCodeAt(i);\n      if (str[i].search(numberingSystems.hanidec) !== -1) {\n        value += hanidecChars.indexOf(str[i]);\n      } else {\n        for (var key in numberingSystemsUTF16) {\n          var _numberingSystemsUTF = numberingSystemsUTF16[key],\n            min = _numberingSystemsUTF[0],\n            max = _numberingSystemsUTF[1];\n          if (code >= min && code <= max) {\n            value += code - min;\n          }\n        }\n      }\n    }\n    return parseInt(value, 10);\n  } else {\n    return value;\n  }\n}\n\n// cache of {numberingSystem: {append: regex}}\nvar digitRegexCache = {};\nfunction resetDigitRegexCache() {\n  digitRegexCache = {};\n}\nfunction digitRegex(_ref, append) {\n  var numberingSystem = _ref.numberingSystem;\n  if (append === void 0) {\n    append = \"\";\n  }\n  var ns = numberingSystem || \"latn\";\n  if (!digitRegexCache[ns]) {\n    digitRegexCache[ns] = {};\n  }\n  if (!digitRegexCache[ns][append]) {\n    digitRegexCache[ns][append] = new RegExp(\"\" + numberingSystems[ns] + append);\n  }\n  return digitRegexCache[ns][append];\n}\n\nvar now = function now() {\n    return Date.now();\n  },\n  defaultZone = \"system\",\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  twoDigitCutoffYear = 60,\n  throwOnInvalid,\n  defaultWeekSettings = null;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nvar Settings = /*#__PURE__*/function () {\n  function Settings() {}\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  Settings.resetCaches = function resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n    DateTime.resetCache();\n    resetDigitRegexCache();\n  };\n  _createClass(Settings, null, [{\n    key: \"now\",\n    get:\n    /**\n     * Get the callback for returning the current timestamp.\n     * @type {function}\n     */\n    function get() {\n      return now;\n    }\n\n    /**\n     * Set the callback for returning the current timestamp.\n     * The function should return a number, which will be interpreted as an Epoch millisecond count\n     * @type {function}\n     * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n     * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n     */,\n    set: function set(n) {\n      now = n;\n    }\n\n    /**\n     * Set the default time zone to create DateTimes in. Does not affect existing instances.\n     * Use the value \"system\" to reset this value to the system's time zone.\n     * @type {string}\n     */\n  }, {\n    key: \"defaultZone\",\n    get:\n    /**\n     * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\n     * The default value is the system's time zone (the one set on the machine that runs this code).\n     * @type {Zone}\n     */\n    function get() {\n      return normalizeZone(defaultZone, SystemZone.instance);\n    }\n\n    /**\n     * Get the default locale to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */,\n    set: function set(zone) {\n      defaultZone = zone;\n    }\n  }, {\n    key: \"defaultLocale\",\n    get: function get() {\n      return defaultLocale;\n    }\n\n    /**\n     * Set the default locale to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */,\n    set: function set(locale) {\n      defaultLocale = locale;\n    }\n\n    /**\n     * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */\n  }, {\n    key: \"defaultNumberingSystem\",\n    get: function get() {\n      return defaultNumberingSystem;\n    }\n\n    /**\n     * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */,\n    set: function set(numberingSystem) {\n      defaultNumberingSystem = numberingSystem;\n    }\n\n    /**\n     * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */\n  }, {\n    key: \"defaultOutputCalendar\",\n    get: function get() {\n      return defaultOutputCalendar;\n    }\n\n    /**\n     * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */,\n    set: function set(outputCalendar) {\n      defaultOutputCalendar = outputCalendar;\n    }\n\n    /**\n     * @typedef {Object} WeekSettings\n     * @property {number} firstDay\n     * @property {number} minimalDays\n     * @property {number[]} weekend\n     */\n\n    /**\n     * @return {WeekSettings|null}\n     */\n  }, {\n    key: \"defaultWeekSettings\",\n    get: function get() {\n      return defaultWeekSettings;\n    }\n\n    /**\n     * Allows overriding the default locale week settings, i.e. the start of the week, the weekend and\n     * how many days are required in the first week of a year.\n     * Does not affect existing instances.\n     *\n     * @param {WeekSettings|null} weekSettings\n     */,\n    set: function set(weekSettings) {\n      defaultWeekSettings = validateWeekSettings(weekSettings);\n    }\n\n    /**\n     * Get the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.\n     * @type {number}\n     */\n  }, {\n    key: \"twoDigitCutoffYear\",\n    get: function get() {\n      return twoDigitCutoffYear;\n    }\n\n    /**\n     * Set the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.\n     * @type {number}\n     * @example Settings.twoDigitCutoffYear = 0 // all 'yy' are interpreted as 20th century\n     * @example Settings.twoDigitCutoffYear = 99 // all 'yy' are interpreted as 21st century\n     * @example Settings.twoDigitCutoffYear = 50 // '49' -> 2049; '50' -> 1950\n     * @example Settings.twoDigitCutoffYear = 1950 // interpreted as 50\n     * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpreted as 50\n     */,\n    set: function set(cutoffYear) {\n      twoDigitCutoffYear = cutoffYear % 100;\n    }\n\n    /**\n     * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n     * @type {boolean}\n     */\n  }, {\n    key: \"throwOnInvalid\",\n    get: function get() {\n      return throwOnInvalid;\n    }\n\n    /**\n     * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n     * @type {boolean}\n     */,\n    set: function set(t) {\n      throwOnInvalid = t;\n    }\n  }]);\n  return Settings;\n}();\n\nvar Invalid = /*#__PURE__*/function () {\n  function Invalid(reason, explanation) {\n    this.reason = reason;\n    this.explanation = explanation;\n  }\n  var _proto = Invalid.prototype;\n  _proto.toMessage = function toMessage() {\n    if (this.explanation) {\n      return this.reason + \": \" + this.explanation;\n    } else {\n      return this.reason;\n    }\n  };\n  return Invalid;\n}();\n\nvar nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\nfunction unitOutOfRange(unit, value) {\n  return new Invalid(\"unit out of range\", \"you specified \" + value + \" (of type \" + typeof value + \") as a \" + unit + \", which is invalid\");\n}\nfunction dayOfWeek(year, month, day) {\n  var d = new Date(Date.UTC(year, month - 1, day));\n  if (year < 100 && year >= 0) {\n    d.setUTCFullYear(d.getUTCFullYear() - 1900);\n  }\n  var js = d.getUTCDay();\n  return js === 0 ? 7 : js;\n}\nfunction computeOrdinal(year, month, day) {\n  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\nfunction uncomputeOrdinal(year, ordinal) {\n  var table = isLeapYear(year) ? leapLadder : nonLeapLadder,\n    month0 = table.findIndex(function (i) {\n      return i < ordinal;\n    }),\n    day = ordinal - table[month0];\n  return {\n    month: month0 + 1,\n    day: day\n  };\n}\nfunction isoWeekdayToLocal(isoWeekday, startOfWeek) {\n  return (isoWeekday - startOfWeek + 7) % 7 + 1;\n}\n\n/**\n * @private\n */\n\nfunction gregorianToWeek(gregObj, minDaysInFirstWeek, startOfWeek) {\n  if (minDaysInFirstWeek === void 0) {\n    minDaysInFirstWeek = 4;\n  }\n  if (startOfWeek === void 0) {\n    startOfWeek = 1;\n  }\n  var year = gregObj.year,\n    month = gregObj.month,\n    day = gregObj.day,\n    ordinal = computeOrdinal(year, month, day),\n    weekday = isoWeekdayToLocal(dayOfWeek(year, month, day), startOfWeek);\n  var weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7),\n    weekYear;\n  if (weekNumber < 1) {\n    weekYear = year - 1;\n    weekNumber = weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek);\n  } else if (weekNumber > weeksInWeekYear(year, minDaysInFirstWeek, startOfWeek)) {\n    weekYear = year + 1;\n    weekNumber = 1;\n  } else {\n    weekYear = year;\n  }\n  return _extends({\n    weekYear: weekYear,\n    weekNumber: weekNumber,\n    weekday: weekday\n  }, timeObject(gregObj));\n}\nfunction weekToGregorian(weekData, minDaysInFirstWeek, startOfWeek) {\n  if (minDaysInFirstWeek === void 0) {\n    minDaysInFirstWeek = 4;\n  }\n  if (startOfWeek === void 0) {\n    startOfWeek = 1;\n  }\n  var weekYear = weekData.weekYear,\n    weekNumber = weekData.weekNumber,\n    weekday = weekData.weekday,\n    weekdayOfJan4 = isoWeekdayToLocal(dayOfWeek(weekYear, 1, minDaysInFirstWeek), startOfWeek),\n    yearInDays = daysInYear(weekYear);\n  var ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek,\n    year;\n  if (ordinal < 1) {\n    year = weekYear - 1;\n    ordinal += daysInYear(year);\n  } else if (ordinal > yearInDays) {\n    year = weekYear + 1;\n    ordinal -= daysInYear(weekYear);\n  } else {\n    year = weekYear;\n  }\n  var _uncomputeOrdinal = uncomputeOrdinal(year, ordinal),\n    month = _uncomputeOrdinal.month,\n    day = _uncomputeOrdinal.day;\n  return _extends({\n    year: year,\n    month: month,\n    day: day\n  }, timeObject(weekData));\n}\nfunction gregorianToOrdinal(gregData) {\n  var year = gregData.year,\n    month = gregData.month,\n    day = gregData.day;\n  var ordinal = computeOrdinal(year, month, day);\n  return _extends({\n    year: year,\n    ordinal: ordinal\n  }, timeObject(gregData));\n}\nfunction ordinalToGregorian(ordinalData) {\n  var year = ordinalData.year,\n    ordinal = ordinalData.ordinal;\n  var _uncomputeOrdinal2 = uncomputeOrdinal(year, ordinal),\n    month = _uncomputeOrdinal2.month,\n    day = _uncomputeOrdinal2.day;\n  return _extends({\n    year: year,\n    month: month,\n    day: day\n  }, timeObject(ordinalData));\n}\n\n/**\n * Check if local week units like localWeekday are used in obj.\n * If so, validates that they are not mixed with ISO week units and then copies them to the normal week unit properties.\n * Modifies obj in-place!\n * @param obj the object values\n */\nfunction usesLocalWeekValues(obj, loc) {\n  var hasLocaleWeekData = !isUndefined(obj.localWeekday) || !isUndefined(obj.localWeekNumber) || !isUndefined(obj.localWeekYear);\n  if (hasLocaleWeekData) {\n    var hasIsoWeekData = !isUndefined(obj.weekday) || !isUndefined(obj.weekNumber) || !isUndefined(obj.weekYear);\n    if (hasIsoWeekData) {\n      throw new ConflictingSpecificationError(\"Cannot mix locale-based week fields with ISO-based week fields\");\n    }\n    if (!isUndefined(obj.localWeekday)) obj.weekday = obj.localWeekday;\n    if (!isUndefined(obj.localWeekNumber)) obj.weekNumber = obj.localWeekNumber;\n    if (!isUndefined(obj.localWeekYear)) obj.weekYear = obj.localWeekYear;\n    delete obj.localWeekday;\n    delete obj.localWeekNumber;\n    delete obj.localWeekYear;\n    return {\n      minDaysInFirstWeek: loc.getMinDaysInFirstWeek(),\n      startOfWeek: loc.getStartOfWeek()\n    };\n  } else {\n    return {\n      minDaysInFirstWeek: 4,\n      startOfWeek: 1\n    };\n  }\n}\nfunction hasInvalidWeekData(obj, minDaysInFirstWeek, startOfWeek) {\n  if (minDaysInFirstWeek === void 0) {\n    minDaysInFirstWeek = 4;\n  }\n  if (startOfWeek === void 0) {\n    startOfWeek = 1;\n  }\n  var validYear = isInteger(obj.weekYear),\n    validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear, minDaysInFirstWeek, startOfWeek)),\n    validWeekday = integerBetween(obj.weekday, 1, 7);\n  if (!validYear) {\n    return unitOutOfRange(\"weekYear\", obj.weekYear);\n  } else if (!validWeek) {\n    return unitOutOfRange(\"week\", obj.weekNumber);\n  } else if (!validWeekday) {\n    return unitOutOfRange(\"weekday\", obj.weekday);\n  } else return false;\n}\nfunction hasInvalidOrdinalData(obj) {\n  var validYear = isInteger(obj.year),\n    validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validOrdinal) {\n    return unitOutOfRange(\"ordinal\", obj.ordinal);\n  } else return false;\n}\nfunction hasInvalidGregorianData(obj) {\n  var validYear = isInteger(obj.year),\n    validMonth = integerBetween(obj.month, 1, 12),\n    validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validMonth) {\n    return unitOutOfRange(\"month\", obj.month);\n  } else if (!validDay) {\n    return unitOutOfRange(\"day\", obj.day);\n  } else return false;\n}\nfunction hasInvalidTimeData(obj) {\n  var hour = obj.hour,\n    minute = obj.minute,\n    second = obj.second,\n    millisecond = obj.millisecond;\n  var validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0,\n    validMinute = integerBetween(minute, 0, 59),\n    validSecond = integerBetween(second, 0, 59),\n    validMillisecond = integerBetween(millisecond, 0, 999);\n  if (!validHour) {\n    return unitOutOfRange(\"hour\", hour);\n  } else if (!validMinute) {\n    return unitOutOfRange(\"minute\", minute);\n  } else if (!validSecond) {\n    return unitOutOfRange(\"second\", second);\n  } else if (!validMillisecond) {\n    return unitOutOfRange(\"millisecond\", millisecond);\n  } else return false;\n}\n\n/**\n * @private\n */\n\n// TYPES\n\nfunction isUndefined(o) {\n  return typeof o === \"undefined\";\n}\nfunction isNumber(o) {\n  return typeof o === \"number\";\n}\nfunction isInteger(o) {\n  return typeof o === \"number\" && o % 1 === 0;\n}\nfunction isString(o) {\n  return typeof o === \"string\";\n}\nfunction isDate(o) {\n  return Object.prototype.toString.call(o) === \"[object Date]\";\n}\n\n// CAPABILITIES\n\nfunction hasRelative() {\n  try {\n    return typeof Intl !== \"undefined\" && !!Intl.RelativeTimeFormat;\n  } catch (e) {\n    return false;\n  }\n}\nfunction hasLocaleWeekInfo() {\n  try {\n    return typeof Intl !== \"undefined\" && !!Intl.Locale && (\"weekInfo\" in Intl.Locale.prototype || \"getWeekInfo\" in Intl.Locale.prototype);\n  } catch (e) {\n    return false;\n  }\n}\n\n// OBJECTS AND ARRAYS\n\nfunction maybeArray(thing) {\n  return Array.isArray(thing) ? thing : [thing];\n}\nfunction bestBy(arr, by, compare) {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  return arr.reduce(function (best, next) {\n    var pair = [by(next), next];\n    if (!best) {\n      return pair;\n    } else if (compare(best[0], pair[0]) === best[0]) {\n      return best;\n    } else {\n      return pair;\n    }\n  }, null)[1];\n}\nfunction pick(obj, keys) {\n  return keys.reduce(function (a, k) {\n    a[k] = obj[k];\n    return a;\n  }, {});\n}\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\nfunction validateWeekSettings(settings) {\n  if (settings == null) {\n    return null;\n  } else if (typeof settings !== \"object\") {\n    throw new InvalidArgumentError(\"Week settings must be an object\");\n  } else {\n    if (!integerBetween(settings.firstDay, 1, 7) || !integerBetween(settings.minimalDays, 1, 7) || !Array.isArray(settings.weekend) || settings.weekend.some(function (v) {\n      return !integerBetween(v, 1, 7);\n    })) {\n      throw new InvalidArgumentError(\"Invalid week settings\");\n    }\n    return {\n      firstDay: settings.firstDay,\n      minimalDays: settings.minimalDays,\n      weekend: Array.from(settings.weekend)\n    };\n  }\n}\n\n// NUMBERS AND STRINGS\n\nfunction integerBetween(thing, bottom, top) {\n  return isInteger(thing) && thing >= bottom && thing <= top;\n}\n\n// x % n but takes the sign of n instead of x\nfunction floorMod(x, n) {\n  return x - n * Math.floor(x / n);\n}\nfunction padStart(input, n) {\n  if (n === void 0) {\n    n = 2;\n  }\n  var isNeg = input < 0;\n  var padded;\n  if (isNeg) {\n    padded = \"-\" + (\"\" + -input).padStart(n, \"0\");\n  } else {\n    padded = (\"\" + input).padStart(n, \"0\");\n  }\n  return padded;\n}\nfunction parseInteger(string) {\n  if (isUndefined(string) || string === null || string === \"\") {\n    return undefined;\n  } else {\n    return parseInt(string, 10);\n  }\n}\nfunction parseFloating(string) {\n  if (isUndefined(string) || string === null || string === \"\") {\n    return undefined;\n  } else {\n    return parseFloat(string);\n  }\n}\nfunction parseMillis(fraction) {\n  // Return undefined (instead of 0) in these cases, where fraction is not set\n  if (isUndefined(fraction) || fraction === null || fraction === \"\") {\n    return undefined;\n  } else {\n    var f = parseFloat(\"0.\" + fraction) * 1000;\n    return Math.floor(f);\n  }\n}\nfunction roundTo(number, digits, towardZero) {\n  if (towardZero === void 0) {\n    towardZero = false;\n  }\n  var factor = Math.pow(10, digits),\n    rounder = towardZero ? Math.trunc : Math.round;\n  return rounder(number * factor) / factor;\n}\n\n// DATE BASICS\n\nfunction isLeapYear(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\nfunction daysInYear(year) {\n  return isLeapYear(year) ? 366 : 365;\n}\nfunction daysInMonth(year, month) {\n  var modMonth = floorMod(month - 1, 12) + 1,\n    modYear = year + (month - modMonth) / 12;\n  if (modMonth === 2) {\n    return isLeapYear(modYear) ? 29 : 28;\n  } else {\n    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];\n  }\n}\n\n// convert a calendar object to a local timestamp (epoch, but with the offset baked in)\nfunction objToLocalTS(obj) {\n  var d = Date.UTC(obj.year, obj.month - 1, obj.day, obj.hour, obj.minute, obj.second, obj.millisecond);\n\n  // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that\n  if (obj.year < 100 && obj.year >= 0) {\n    d = new Date(d);\n    // set the month and day again, this is necessary because year 2000 is a leap year, but year 100 is not\n    // so if obj.year is in 99, but obj.day makes it roll over into year 100,\n    // the calculations done by Date.UTC are using year 2000 - which is incorrect\n    d.setUTCFullYear(obj.year, obj.month - 1, obj.day);\n  }\n  return +d;\n}\n\n// adapted from moment.js: https://github.com/moment/moment/blob/000ac1800e620f770f4eb31b5ae908f6167b0ab2/src/lib/units/week-calendar-utils.js\nfunction firstWeekOffset(year, minDaysInFirstWeek, startOfWeek) {\n  var fwdlw = isoWeekdayToLocal(dayOfWeek(year, 1, minDaysInFirstWeek), startOfWeek);\n  return -fwdlw + minDaysInFirstWeek - 1;\n}\nfunction weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek) {\n  if (minDaysInFirstWeek === void 0) {\n    minDaysInFirstWeek = 4;\n  }\n  if (startOfWeek === void 0) {\n    startOfWeek = 1;\n  }\n  var weekOffset = firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);\n  var weekOffsetNext = firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);\n  return (daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;\n}\nfunction untruncateYear(year) {\n  if (year > 99) {\n    return year;\n  } else return year > Settings.twoDigitCutoffYear ? 1900 + year : 2000 + year;\n}\n\n// PARSING\n\nfunction parseZoneInfo(ts, offsetFormat, locale, timeZone) {\n  if (timeZone === void 0) {\n    timeZone = null;\n  }\n  var date = new Date(ts),\n    intlOpts = {\n      hourCycle: \"h23\",\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    };\n  if (timeZone) {\n    intlOpts.timeZone = timeZone;\n  }\n  var modified = _extends({\n    timeZoneName: offsetFormat\n  }, intlOpts);\n  var parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find(function (m) {\n    return m.type.toLowerCase() === \"timezonename\";\n  });\n  return parsed ? parsed.value : null;\n}\n\n// signedOffset('-5', '30') -> -330\nfunction signedOffset(offHourStr, offMinuteStr) {\n  var offHour = parseInt(offHourStr, 10);\n\n  // don't || this because we want to preserve -0\n  if (Number.isNaN(offHour)) {\n    offHour = 0;\n  }\n  var offMin = parseInt(offMinuteStr, 10) || 0,\n    offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;\n  return offHour * 60 + offMinSigned;\n}\n\n// COERCION\n\nfunction asNumber(value) {\n  var numericValue = Number(value);\n  if (typeof value === \"boolean\" || value === \"\" || Number.isNaN(numericValue)) throw new InvalidArgumentError(\"Invalid unit value \" + value);\n  return numericValue;\n}\nfunction normalizeObject(obj, normalizer) {\n  var normalized = {};\n  for (var u in obj) {\n    if (hasOwnProperty(obj, u)) {\n      var v = obj[u];\n      if (v === undefined || v === null) continue;\n      normalized[normalizer(u)] = asNumber(v);\n    }\n  }\n  return normalized;\n}\n\n/**\n * Returns the offset's value as a string\n * @param {number} ts - Epoch milliseconds for which to get the offset\n * @param {string} format - What style of offset to return.\n *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n * @return {string}\n */\nfunction formatOffset(offset, format) {\n  var hours = Math.trunc(Math.abs(offset / 60)),\n    minutes = Math.trunc(Math.abs(offset % 60)),\n    sign = offset >= 0 ? \"+\" : \"-\";\n  switch (format) {\n    case \"short\":\n      return \"\" + sign + padStart(hours, 2) + \":\" + padStart(minutes, 2);\n    case \"narrow\":\n      return \"\" + sign + hours + (minutes > 0 ? \":\" + minutes : \"\");\n    case \"techie\":\n      return \"\" + sign + padStart(hours, 2) + padStart(minutes, 2);\n    default:\n      throw new RangeError(\"Value format \" + format + \" is out of range for property format\");\n  }\n}\nfunction timeObject(obj) {\n  return pick(obj, [\"hour\", \"minute\", \"second\", \"millisecond\"]);\n}\n\n/**\n * @private\n */\n\nvar monthsLong = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nvar monthsShort = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nvar monthsNarrow = [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"];\nfunction months(length) {\n  switch (length) {\n    case \"narrow\":\n      return [].concat(monthsNarrow);\n    case \"short\":\n      return [].concat(monthsShort);\n    case \"long\":\n      return [].concat(monthsLong);\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"];\n    case \"2-digit\":\n      return [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\n    default:\n      return null;\n  }\n}\nvar weekdaysLong = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\nvar weekdaysShort = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\nvar weekdaysNarrow = [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"];\nfunction weekdays(length) {\n  switch (length) {\n    case \"narrow\":\n      return [].concat(weekdaysNarrow);\n    case \"short\":\n      return [].concat(weekdaysShort);\n    case \"long\":\n      return [].concat(weekdaysLong);\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"];\n    default:\n      return null;\n  }\n}\nvar meridiems = [\"AM\", \"PM\"];\nvar erasLong = [\"Before Christ\", \"Anno Domini\"];\nvar erasShort = [\"BC\", \"AD\"];\nvar erasNarrow = [\"B\", \"A\"];\nfunction eras(length) {\n  switch (length) {\n    case \"narrow\":\n      return [].concat(erasNarrow);\n    case \"short\":\n      return [].concat(erasShort);\n    case \"long\":\n      return [].concat(erasLong);\n    default:\n      return null;\n  }\n}\nfunction meridiemForDateTime(dt) {\n  return meridiems[dt.hour < 12 ? 0 : 1];\n}\nfunction weekdayForDateTime(dt, length) {\n  return weekdays(length)[dt.weekday - 1];\n}\nfunction monthForDateTime(dt, length) {\n  return months(length)[dt.month - 1];\n}\nfunction eraForDateTime(dt, length) {\n  return eras(length)[dt.year < 0 ? 0 : 1];\n}\nfunction formatRelativeTime(unit, count, numeric, narrow) {\n  if (numeric === void 0) {\n    numeric = \"always\";\n  }\n  if (narrow === void 0) {\n    narrow = false;\n  }\n  var units = {\n    years: [\"year\", \"yr.\"],\n    quarters: [\"quarter\", \"qtr.\"],\n    months: [\"month\", \"mo.\"],\n    weeks: [\"week\", \"wk.\"],\n    days: [\"day\", \"day\", \"days\"],\n    hours: [\"hour\", \"hr.\"],\n    minutes: [\"minute\", \"min.\"],\n    seconds: [\"second\", \"sec.\"]\n  };\n  var lastable = [\"hours\", \"minutes\", \"seconds\"].indexOf(unit) === -1;\n  if (numeric === \"auto\" && lastable) {\n    var isDay = unit === \"days\";\n    switch (count) {\n      case 1:\n        return isDay ? \"tomorrow\" : \"next \" + units[unit][0];\n      case -1:\n        return isDay ? \"yesterday\" : \"last \" + units[unit][0];\n      case 0:\n        return isDay ? \"today\" : \"this \" + units[unit][0];\n    }\n  }\n\n  var isInPast = Object.is(count, -0) || count < 0,\n    fmtValue = Math.abs(count),\n    singular = fmtValue === 1,\n    lilUnits = units[unit],\n    fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;\n  return isInPast ? fmtValue + \" \" + fmtUnit + \" ago\" : \"in \" + fmtValue + \" \" + fmtUnit;\n}\n\nfunction stringifyTokens(splits, tokenToString) {\n  var s = \"\";\n  for (var _iterator = _createForOfIteratorHelperLoose(splits), _step; !(_step = _iterator()).done;) {\n    var token = _step.value;\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\nvar _macroTokenToFormatOpts = {\n  D: DATE_SHORT,\n  DD: DATE_MED,\n  DDD: DATE_FULL,\n  DDDD: DATE_HUGE,\n  t: TIME_SIMPLE,\n  tt: TIME_WITH_SECONDS,\n  ttt: TIME_WITH_SHORT_OFFSET,\n  tttt: TIME_WITH_LONG_OFFSET,\n  T: TIME_24_SIMPLE,\n  TT: TIME_24_WITH_SECONDS,\n  TTT: TIME_24_WITH_SHORT_OFFSET,\n  TTTT: TIME_24_WITH_LONG_OFFSET,\n  f: DATETIME_SHORT,\n  ff: DATETIME_MED,\n  fff: DATETIME_FULL,\n  ffff: DATETIME_HUGE,\n  F: DATETIME_SHORT_WITH_SECONDS,\n  FF: DATETIME_MED_WITH_SECONDS,\n  FFF: DATETIME_FULL_WITH_SECONDS,\n  FFFF: DATETIME_HUGE_WITH_SECONDS\n};\n\n/**\n * @private\n */\nvar Formatter = /*#__PURE__*/function () {\n  Formatter.create = function create(locale, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return new Formatter(locale, opts);\n  };\n  Formatter.parseFormat = function parseFormat(fmt) {\n    // white-space is always considered a literal in user-provided formats\n    // the \" \" token has a special meaning (see unitForToken)\n\n    var current = null,\n      currentFull = \"\",\n      bracketed = false;\n    var splits = [];\n    for (var i = 0; i < fmt.length; i++) {\n      var c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({\n            literal: bracketed || /^\\s+$/.test(currentFull),\n            val: currentFull\n          });\n        }\n        current = null;\n        currentFull = \"\";\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({\n            literal: /^\\s+$/.test(currentFull),\n            val: currentFull\n          });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n    if (currentFull.length > 0) {\n      splits.push({\n        literal: bracketed || /^\\s+$/.test(currentFull),\n        val: currentFull\n      });\n    }\n    return splits;\n  };\n  Formatter.macroTokenToFormatOpts = function macroTokenToFormatOpts(token) {\n    return _macroTokenToFormatOpts[token];\n  };\n  function Formatter(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n  var _proto = Formatter.prototype;\n  _proto.formatWithSystemDefault = function formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n    var df = this.systemLoc.dtFormatter(dt, _extends({}, this.opts, opts));\n    return df.format();\n  };\n  _proto.dtFormatter = function dtFormatter(dt, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return this.loc.dtFormatter(dt, _extends({}, this.opts, opts));\n  };\n  _proto.formatDateTime = function formatDateTime(dt, opts) {\n    return this.dtFormatter(dt, opts).format();\n  };\n  _proto.formatDateTimeParts = function formatDateTimeParts(dt, opts) {\n    return this.dtFormatter(dt, opts).formatToParts();\n  };\n  _proto.formatInterval = function formatInterval(interval, opts) {\n    var df = this.dtFormatter(interval.start, opts);\n    return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());\n  };\n  _proto.resolvedOptions = function resolvedOptions(dt, opts) {\n    return this.dtFormatter(dt, opts).resolvedOptions();\n  };\n  _proto.num = function num(n, p) {\n    if (p === void 0) {\n      p = 0;\n    }\n    // we get some perf out of doing this here, annoyingly\n    if (this.opts.forceSimple) {\n      return padStart(n, p);\n    }\n    var opts = _extends({}, this.opts);\n    if (p > 0) {\n      opts.padTo = p;\n    }\n    return this.loc.numberFormatter(opts).format(n);\n  };\n  _proto.formatDateTimeFromString = function formatDateTimeFromString(dt, fmt) {\n    var _this = this;\n    var knownEnglish = this.loc.listingMode() === \"en\",\n      useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== \"gregory\",\n      string = function string(opts, extract) {\n        return _this.loc.extract(dt, opts, extract);\n      },\n      formatOffset = function formatOffset(opts) {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return \"Z\";\n        }\n        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : \"\";\n      },\n      meridiem = function meridiem() {\n        return knownEnglish ? meridiemForDateTime(dt) : string({\n          hour: \"numeric\",\n          hourCycle: \"h12\"\n        }, \"dayperiod\");\n      },\n      month = function month(length, standalone) {\n        return knownEnglish ? monthForDateTime(dt, length) : string(standalone ? {\n          month: length\n        } : {\n          month: length,\n          day: \"numeric\"\n        }, \"month\");\n      },\n      weekday = function weekday(length, standalone) {\n        return knownEnglish ? weekdayForDateTime(dt, length) : string(standalone ? {\n          weekday: length\n        } : {\n          weekday: length,\n          month: \"long\",\n          day: \"numeric\"\n        }, \"weekday\");\n      },\n      maybeMacro = function maybeMacro(token) {\n        var formatOpts = Formatter.macroTokenToFormatOpts(token);\n        if (formatOpts) {\n          return _this.formatWithSystemDefault(dt, formatOpts);\n        } else {\n          return token;\n        }\n      },\n      era = function era(length) {\n        return knownEnglish ? eraForDateTime(dt, length) : string({\n          era: length\n        }, \"era\");\n      },\n      tokenToString = function tokenToString(token) {\n        // Where possible: https://cldr.unicode.org/translation/date-time/date-time-symbols\n        switch (token) {\n          // ms\n          case \"S\":\n            return _this.num(dt.millisecond);\n          case \"u\":\n          // falls through\n          case \"SSS\":\n            return _this.num(dt.millisecond, 3);\n          // seconds\n          case \"s\":\n            return _this.num(dt.second);\n          case \"ss\":\n            return _this.num(dt.second, 2);\n          // fractional seconds\n          case \"uu\":\n            return _this.num(Math.floor(dt.millisecond / 10), 2);\n          case \"uuu\":\n            return _this.num(Math.floor(dt.millisecond / 100));\n          // minutes\n          case \"m\":\n            return _this.num(dt.minute);\n          case \"mm\":\n            return _this.num(dt.minute, 2);\n          // hours\n          case \"h\":\n            return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n          case \"hh\":\n            return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n          case \"H\":\n            return _this.num(dt.hour);\n          case \"HH\":\n            return _this.num(dt.hour, 2);\n          // offset\n          case \"Z\":\n            // like +6\n            return formatOffset({\n              format: \"narrow\",\n              allowZ: _this.opts.allowZ\n            });\n          case \"ZZ\":\n            // like +06:00\n            return formatOffset({\n              format: \"short\",\n              allowZ: _this.opts.allowZ\n            });\n          case \"ZZZ\":\n            // like +0600\n            return formatOffset({\n              format: \"techie\",\n              allowZ: _this.opts.allowZ\n            });\n          case \"ZZZZ\":\n            // like EST\n            return dt.zone.offsetName(dt.ts, {\n              format: \"short\",\n              locale: _this.loc.locale\n            });\n          case \"ZZZZZ\":\n            // like Eastern Standard Time\n            return dt.zone.offsetName(dt.ts, {\n              format: \"long\",\n              locale: _this.loc.locale\n            });\n          // zone\n          case \"z\":\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n          case \"a\":\n            return meridiem();\n          // dates\n          case \"d\":\n            return useDateTimeFormatter ? string({\n              day: \"numeric\"\n            }, \"day\") : _this.num(dt.day);\n          case \"dd\":\n            return useDateTimeFormatter ? string({\n              day: \"2-digit\"\n            }, \"day\") : _this.num(dt.day, 2);\n          // weekdays - standalone\n          case \"c\":\n            // like 1\n            return _this.num(dt.weekday);\n          case \"ccc\":\n            // like 'Tues'\n            return weekday(\"short\", true);\n          case \"cccc\":\n            // like 'Tuesday'\n            return weekday(\"long\", true);\n          case \"ccccc\":\n            // like 'T'\n            return weekday(\"narrow\", true);\n          // weekdays - format\n          case \"E\":\n            // like 1\n            return _this.num(dt.weekday);\n          case \"EEE\":\n            // like 'Tues'\n            return weekday(\"short\", false);\n          case \"EEEE\":\n            // like 'Tuesday'\n            return weekday(\"long\", false);\n          case \"EEEEE\":\n            // like 'T'\n            return weekday(\"narrow\", false);\n          // months - standalone\n          case \"L\":\n            // like 1\n            return useDateTimeFormatter ? string({\n              month: \"numeric\",\n              day: \"numeric\"\n            }, \"month\") : _this.num(dt.month);\n          case \"LL\":\n            // like 01, doesn't seem to work\n            return useDateTimeFormatter ? string({\n              month: \"2-digit\",\n              day: \"numeric\"\n            }, \"month\") : _this.num(dt.month, 2);\n          case \"LLL\":\n            // like Jan\n            return month(\"short\", true);\n          case \"LLLL\":\n            // like January\n            return month(\"long\", true);\n          case \"LLLLL\":\n            // like J\n            return month(\"narrow\", true);\n          // months - format\n          case \"M\":\n            // like 1\n            return useDateTimeFormatter ? string({\n              month: \"numeric\"\n            }, \"month\") : _this.num(dt.month);\n          case \"MM\":\n            // like 01\n            return useDateTimeFormatter ? string({\n              month: \"2-digit\"\n            }, \"month\") : _this.num(dt.month, 2);\n          case \"MMM\":\n            // like Jan\n            return month(\"short\", false);\n          case \"MMMM\":\n            // like January\n            return month(\"long\", false);\n          case \"MMMMM\":\n            // like J\n            return month(\"narrow\", false);\n          // years\n          case \"y\":\n            // like 2014\n            return useDateTimeFormatter ? string({\n              year: \"numeric\"\n            }, \"year\") : _this.num(dt.year);\n          case \"yy\":\n            // like 14\n            return useDateTimeFormatter ? string({\n              year: \"2-digit\"\n            }, \"year\") : _this.num(dt.year.toString().slice(-2), 2);\n          case \"yyyy\":\n            // like 0012\n            return useDateTimeFormatter ? string({\n              year: \"numeric\"\n            }, \"year\") : _this.num(dt.year, 4);\n          case \"yyyyyy\":\n            // like 000012\n            return useDateTimeFormatter ? string({\n              year: \"numeric\"\n            }, \"year\") : _this.num(dt.year, 6);\n          // eras\n          case \"G\":\n            // like AD\n            return era(\"short\");\n          case \"GG\":\n            // like Anno Domini\n            return era(\"long\");\n          case \"GGGGG\":\n            return era(\"narrow\");\n          case \"kk\":\n            return _this.num(dt.weekYear.toString().slice(-2), 2);\n          case \"kkkk\":\n            return _this.num(dt.weekYear, 4);\n          case \"W\":\n            return _this.num(dt.weekNumber);\n          case \"WW\":\n            return _this.num(dt.weekNumber, 2);\n          case \"n\":\n            return _this.num(dt.localWeekNumber);\n          case \"nn\":\n            return _this.num(dt.localWeekNumber, 2);\n          case \"ii\":\n            return _this.num(dt.localWeekYear.toString().slice(-2), 2);\n          case \"iiii\":\n            return _this.num(dt.localWeekYear, 4);\n          case \"o\":\n            return _this.num(dt.ordinal);\n          case \"ooo\":\n            return _this.num(dt.ordinal, 3);\n          case \"q\":\n            // like 1\n            return _this.num(dt.quarter);\n          case \"qq\":\n            // like 01\n            return _this.num(dt.quarter, 2);\n          case \"X\":\n            return _this.num(Math.floor(dt.ts / 1000));\n          case \"x\":\n            return _this.num(dt.ts);\n          default:\n            return maybeMacro(token);\n        }\n      };\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  };\n  _proto.formatDurationFromString = function formatDurationFromString(dur, fmt) {\n    var _this2 = this;\n    var tokenToField = function tokenToField(token) {\n        switch (token[0]) {\n          case \"S\":\n            return \"millisecond\";\n          case \"s\":\n            return \"second\";\n          case \"m\":\n            return \"minute\";\n          case \"h\":\n            return \"hour\";\n          case \"d\":\n            return \"day\";\n          case \"w\":\n            return \"week\";\n          case \"M\":\n            return \"month\";\n          case \"y\":\n            return \"year\";\n          default:\n            return null;\n        }\n      },\n      tokenToString = function tokenToString(lildur) {\n        return function (token) {\n          var mapped = tokenToField(token);\n          if (mapped) {\n            return _this2.num(lildur.get(mapped), token.length);\n          } else {\n            return token;\n          }\n        };\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(function (found, _ref) {\n        var literal = _ref.literal,\n          val = _ref.val;\n        return literal ? found : found.concat(val);\n      }, []),\n      collapsed = dur.shiftTo.apply(dur, realTokens.map(tokenToField).filter(function (t) {\n        return t;\n      }));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  };\n  return Formatter;\n}();\n\n/*\n * This file handles parsing for well-specified formats. Here's how it works:\n * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.\n * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object\n * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.\n * Extractors can take a \"cursor\" representing the offset in the match to look at. This makes it easy to combine extractors.\n * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.\n * Some extractions are super dumb and simpleParse and fromStrings help DRY them.\n */\n\nvar ianaRegex = /[A-Za-z_+-]{1,256}(?::?\\/[A-Za-z0-9_+-]{1,256}(?:\\/[A-Za-z0-9_+-]{1,256})?)?/;\nfunction combineRegexes() {\n  for (var _len = arguments.length, regexes = new Array(_len), _key = 0; _key < _len; _key++) {\n    regexes[_key] = arguments[_key];\n  }\n  var full = regexes.reduce(function (f, r) {\n    return f + r.source;\n  }, \"\");\n  return RegExp(\"^\" + full + \"$\");\n}\nfunction combineExtractors() {\n  for (var _len2 = arguments.length, extractors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    extractors[_key2] = arguments[_key2];\n  }\n  return function (m) {\n    return extractors.reduce(function (_ref, ex) {\n      var mergedVals = _ref[0],\n        mergedZone = _ref[1],\n        cursor = _ref[2];\n      var _ex = ex(m, cursor),\n        val = _ex[0],\n        zone = _ex[1],\n        next = _ex[2];\n      return [_extends({}, mergedVals, val), zone || mergedZone, next];\n    }, [{}, null, 1]).slice(0, 2);\n  };\n}\nfunction parse(s) {\n  if (s == null) {\n    return [null, null];\n  }\n  for (var _len3 = arguments.length, patterns = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    patterns[_key3 - 1] = arguments[_key3];\n  }\n  for (var _i = 0, _patterns = patterns; _i < _patterns.length; _i++) {\n    var _patterns$_i = _patterns[_i],\n      regex = _patterns$_i[0],\n      extractor = _patterns$_i[1];\n    var m = regex.exec(s);\n    if (m) {\n      return extractor(m);\n    }\n  }\n  return [null, null];\n}\nfunction simpleParse() {\n  for (var _len4 = arguments.length, keys = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    keys[_key4] = arguments[_key4];\n  }\n  return function (match, cursor) {\n    var ret = {};\n    var i;\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInteger(match[cursor + i]);\n    }\n    return [ret, null, cursor + i];\n  };\n}\n\n// ISO and SQL parsing\nvar offsetRegex = /(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)/;\nvar isoExtendedZone = \"(?:\" + offsetRegex.source + \"?(?:\\\\[(\" + ianaRegex.source + \")\\\\])?)?\";\nvar isoTimeBaseRegex = /(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d{1,30}))?)?)?/;\nvar isoTimeRegex = RegExp(\"\" + isoTimeBaseRegex.source + isoExtendedZone);\nvar isoTimeExtensionRegex = RegExp(\"(?:T\" + isoTimeRegex.source + \")?\");\nvar isoYmdRegex = /([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/;\nvar isoWeekRegex = /(\\d{4})-?W(\\d\\d)(?:-?(\\d))?/;\nvar isoOrdinalRegex = /(\\d{4})-?(\\d{3})/;\nvar extractISOWeekData = simpleParse(\"weekYear\", \"weekNumber\", \"weekDay\");\nvar extractISOOrdinalData = simpleParse(\"year\", \"ordinal\");\nvar sqlYmdRegex = /(\\d{4})-(\\d\\d)-(\\d\\d)/; // dumbed-down version of the ISO one\nvar sqlTimeRegex = RegExp(isoTimeBaseRegex.source + \" ?(?:\" + offsetRegex.source + \"|(\" + ianaRegex.source + \"))?\");\nvar sqlTimeExtensionRegex = RegExp(\"(?: \" + sqlTimeRegex.source + \")?\");\nfunction int(match, pos, fallback) {\n  var m = match[pos];\n  return isUndefined(m) ? fallback : parseInteger(m);\n}\nfunction extractISOYmd(match, cursor) {\n  var item = {\n    year: int(match, cursor),\n    month: int(match, cursor + 1, 1),\n    day: int(match, cursor + 2, 1)\n  };\n  return [item, null, cursor + 3];\n}\nfunction extractISOTime(match, cursor) {\n  var item = {\n    hours: int(match, cursor, 0),\n    minutes: int(match, cursor + 1, 0),\n    seconds: int(match, cursor + 2, 0),\n    milliseconds: parseMillis(match[cursor + 3])\n  };\n  return [item, null, cursor + 4];\n}\nfunction extractISOOffset(match, cursor) {\n  var local = !match[cursor] && !match[cursor + 1],\n    fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),\n    zone = local ? null : FixedOffsetZone.instance(fullOffset);\n  return [{}, zone, cursor + 3];\n}\nfunction extractIANAZone(match, cursor) {\n  var zone = match[cursor] ? IANAZone.create(match[cursor]) : null;\n  return [{}, zone, cursor + 1];\n}\n\n// ISO time parsing\n\nvar isoTimeOnly = RegExp(\"^T?\" + isoTimeBaseRegex.source + \"$\");\n\n// ISO duration parsing\n\nvar isoDuration = /^-?P(?:(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)Y)?(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)M)?(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)W)?(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)D)?(?:T(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)H)?(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)M)?(?:(-?\\d{1,20})(?:[.,](-?\\d{1,20}))?S)?)?)$/;\nfunction extractISODuration(match) {\n  var s = match[0],\n    yearStr = match[1],\n    monthStr = match[2],\n    weekStr = match[3],\n    dayStr = match[4],\n    hourStr = match[5],\n    minuteStr = match[6],\n    secondStr = match[7],\n    millisecondsStr = match[8];\n  var hasNegativePrefix = s[0] === \"-\";\n  var negativeSeconds = secondStr && secondStr[0] === \"-\";\n  var maybeNegate = function maybeNegate(num, force) {\n    if (force === void 0) {\n      force = false;\n    }\n    return num !== undefined && (force || num && hasNegativePrefix) ? -num : num;\n  };\n  return [{\n    years: maybeNegate(parseFloating(yearStr)),\n    months: maybeNegate(parseFloating(monthStr)),\n    weeks: maybeNegate(parseFloating(weekStr)),\n    days: maybeNegate(parseFloating(dayStr)),\n    hours: maybeNegate(parseFloating(hourStr)),\n    minutes: maybeNegate(parseFloating(minuteStr)),\n    seconds: maybeNegate(parseFloating(secondStr), secondStr === \"-0\"),\n    milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds)\n  }];\n}\n\n// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\nvar obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60\n};\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  var result = {\n    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),\n    month: monthsShort.indexOf(monthStr) + 1,\n    day: parseInteger(dayStr),\n    hour: parseInteger(hourStr),\n    minute: parseInteger(minuteStr)\n  };\n  if (secondStr) result.second = parseInteger(secondStr);\n  if (weekdayStr) {\n    result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n  return result;\n}\n\n// RFC 2822/5322\nvar rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\nfunction extractRFC2822(match) {\n  var weekdayStr = match[1],\n    dayStr = match[2],\n    monthStr = match[3],\n    yearStr = match[4],\n    hourStr = match[5],\n    minuteStr = match[6],\n    secondStr = match[7],\n    obsOffset = match[8],\n    milOffset = match[9],\n    offHourStr = match[10],\n    offMinuteStr = match[11],\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  var offset;\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = signedOffset(offHourStr, offMinuteStr);\n  }\n  return [result, new FixedOffsetZone(offset)];\n}\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s.replace(/\\([^()]*\\)|[\\n\\t]/g, \" \").replace(/(\\s\\s+)/g, \" \").trim();\n}\n\n// http date\n\nvar rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  rfc850 = /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\nfunction extractRFC1123Or850(match) {\n  var weekdayStr = match[1],\n    dayStr = match[2],\n    monthStr = match[3],\n    yearStr = match[4],\n    hourStr = match[5],\n    minuteStr = match[6],\n    secondStr = match[7],\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\nfunction extractASCII(match) {\n  var weekdayStr = match[1],\n    monthStr = match[2],\n    dayStr = match[3],\n    hourStr = match[4],\n    minuteStr = match[5],\n    secondStr = match[6],\n    yearStr = match[7],\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\nvar isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);\nvar isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);\nvar isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);\nvar isoTimeCombinedRegex = combineRegexes(isoTimeRegex);\nvar extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);\nvar extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset, extractIANAZone);\nvar extractISOOrdinalDateAndTime = combineExtractors(extractISOOrdinalData, extractISOTime, extractISOOffset, extractIANAZone);\nvar extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);\n\n/*\n * @private\n */\n\nfunction parseISODate(s) {\n  return parse(s, [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset], [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime], [isoTimeCombinedRegex, extractISOTimeAndOffset]);\n}\nfunction parseRFC2822Date(s) {\n  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n}\nfunction parseHTTPDate(s) {\n  return parse(s, [rfc1123, extractRFC1123Or850], [rfc850, extractRFC1123Or850], [ascii, extractASCII]);\n}\nfunction parseISODuration(s) {\n  return parse(s, [isoDuration, extractISODuration]);\n}\nvar extractISOTimeOnly = combineExtractors(extractISOTime);\nfunction parseISOTimeOnly(s) {\n  return parse(s, [isoTimeOnly, extractISOTimeOnly]);\n}\nvar sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);\nvar sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);\nvar extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);\nfunction parseSQL(s) {\n  return parse(s, [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]);\n}\n\nvar INVALID$2 = \"Invalid Duration\";\n\n// unit conversion constants\nvar lowOrderMatrix = {\n    weeks: {\n      days: 7,\n      hours: 7 * 24,\n      minutes: 7 * 24 * 60,\n      seconds: 7 * 24 * 60 * 60,\n      milliseconds: 7 * 24 * 60 * 60 * 1000\n    },\n    days: {\n      hours: 24,\n      minutes: 24 * 60,\n      seconds: 24 * 60 * 60,\n      milliseconds: 24 * 60 * 60 * 1000\n    },\n    hours: {\n      minutes: 60,\n      seconds: 60 * 60,\n      milliseconds: 60 * 60 * 1000\n    },\n    minutes: {\n      seconds: 60,\n      milliseconds: 60 * 1000\n    },\n    seconds: {\n      milliseconds: 1000\n    }\n  },\n  casualMatrix = _extends({\n    years: {\n      quarters: 4,\n      months: 12,\n      weeks: 52,\n      days: 365,\n      hours: 365 * 24,\n      minutes: 365 * 24 * 60,\n      seconds: 365 * 24 * 60 * 60,\n      milliseconds: 365 * 24 * 60 * 60 * 1000\n    },\n    quarters: {\n      months: 3,\n      weeks: 13,\n      days: 91,\n      hours: 91 * 24,\n      minutes: 91 * 24 * 60,\n      seconds: 91 * 24 * 60 * 60,\n      milliseconds: 91 * 24 * 60 * 60 * 1000\n    },\n    months: {\n      weeks: 4,\n      days: 30,\n      hours: 30 * 24,\n      minutes: 30 * 24 * 60,\n      seconds: 30 * 24 * 60 * 60,\n      milliseconds: 30 * 24 * 60 * 60 * 1000\n    }\n  }, lowOrderMatrix),\n  daysInYearAccurate = 146097.0 / 400,\n  daysInMonthAccurate = 146097.0 / 4800,\n  accurateMatrix = _extends({\n    years: {\n      quarters: 4,\n      months: 12,\n      weeks: daysInYearAccurate / 7,\n      days: daysInYearAccurate,\n      hours: daysInYearAccurate * 24,\n      minutes: daysInYearAccurate * 24 * 60,\n      seconds: daysInYearAccurate * 24 * 60 * 60,\n      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n    },\n    quarters: {\n      months: 3,\n      weeks: daysInYearAccurate / 28,\n      days: daysInYearAccurate / 4,\n      hours: daysInYearAccurate * 24 / 4,\n      minutes: daysInYearAccurate * 24 * 60 / 4,\n      seconds: daysInYearAccurate * 24 * 60 * 60 / 4,\n      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000 / 4\n    },\n    months: {\n      weeks: daysInMonthAccurate / 7,\n      days: daysInMonthAccurate,\n      hours: daysInMonthAccurate * 24,\n      minutes: daysInMonthAccurate * 24 * 60,\n      seconds: daysInMonthAccurate * 24 * 60 * 60,\n      milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000\n    }\n  }, lowOrderMatrix);\n\n// units ordered by size\nvar orderedUnits$1 = [\"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\"];\nvar reverseUnits = orderedUnits$1.slice(0).reverse();\n\n// clone really means \"create another instance just like this one, but with these changes\"\nfunction clone$1(dur, alts, clear) {\n  if (clear === void 0) {\n    clear = false;\n  }\n  // deep merge for vals\n  var conf = {\n    values: clear ? alts.values : _extends({}, dur.values, alts.values || {}),\n    loc: dur.loc.clone(alts.loc),\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,\n    matrix: alts.matrix || dur.matrix\n  };\n  return new Duration(conf);\n}\nfunction durationToMillis(matrix, vals) {\n  var _vals$milliseconds;\n  var sum = (_vals$milliseconds = vals.milliseconds) != null ? _vals$milliseconds : 0;\n  for (var _iterator = _createForOfIteratorHelperLoose(reverseUnits.slice(1)), _step; !(_step = _iterator()).done;) {\n    var unit = _step.value;\n    if (vals[unit]) {\n      sum += vals[unit] * matrix[unit][\"milliseconds\"];\n    }\n  }\n  return sum;\n}\n\n// NB: mutates parameters\nfunction normalizeValues(matrix, vals) {\n  // the logic below assumes the overall value of the duration is positive\n  // if this is not the case, factor is used to make it so\n  var factor = durationToMillis(matrix, vals) < 0 ? -1 : 1;\n  orderedUnits$1.reduceRight(function (previous, current) {\n    if (!isUndefined(vals[current])) {\n      if (previous) {\n        var previousVal = vals[previous] * factor;\n        var conv = matrix[current][previous];\n\n        // if (previousVal < 0):\n        // lower order unit is negative (e.g. { years: 2, days: -2 })\n        // normalize this by reducing the higher order unit by the appropriate amount\n        // and increasing the lower order unit\n        // this can never make the higher order unit negative, because this function only operates\n        // on positive durations, so the amount of time represented by the lower order unit cannot\n        // be larger than the higher order unit\n        // else:\n        // lower order unit is positive (e.g. { years: 2, days: 450 } or { years: -2, days: 450 })\n        // in this case we attempt to convert as much as possible from the lower order unit into\n        // the higher order one\n        //\n        // Math.floor takes care of both of these cases, rounding away from 0\n        // if previousVal < 0 it makes the absolute value larger\n        // if previousVal >= it makes the absolute value smaller\n        var rollUp = Math.floor(previousVal / conv);\n        vals[current] += rollUp * factor;\n        vals[previous] -= rollUp * conv * factor;\n      }\n      return current;\n    } else {\n      return previous;\n    }\n  }, null);\n\n  // try to convert any decimals into smaller units if possible\n  // for example for { years: 2.5, days: 0, seconds: 0 } we want to get { years: 2, days: 182, hours: 12 }\n  orderedUnits$1.reduce(function (previous, current) {\n    if (!isUndefined(vals[current])) {\n      if (previous) {\n        var fraction = vals[previous] % 1;\n        vals[previous] -= fraction;\n        vals[current] += fraction * matrix[previous][current];\n      }\n      return current;\n    } else {\n      return previous;\n    }\n  }, null);\n}\n\n// Remove all properties with a value of 0 from an object\nfunction removeZeroes(vals) {\n  var newVals = {};\n  for (var _i = 0, _Object$entries = Object.entries(vals); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _Object$entries[_i],\n      key = _Object$entries$_i[0],\n      value = _Object$entries$_i[1];\n    if (value !== 0) {\n      newVals[key] = value;\n    }\n  }\n  return newVals;\n}\n\n/**\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.\n * * **Unit values** See the {@link Duration#years}, {@link Duration#months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.\n * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.\n * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}\n *\n * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\nvar Duration = /*#__PURE__*/function (_Symbol$for) {\n  /**\n   * @private\n   */\n  function Duration(config) {\n    var accurate = config.conversionAccuracy === \"longterm\" || false;\n    var matrix = accurate ? accurateMatrix : casualMatrix;\n    if (config.matrix) {\n      matrix = config.matrix;\n    }\n\n    /**\n     * @access private\n     */\n    this.values = config.values;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.conversionAccuracy = accurate ? \"longterm\" : \"casual\";\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.matrix = matrix;\n    /**\n     * @access private\n     */\n    this.isLuxonDuration = true;\n  }\n\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  Duration.fromMillis = function fromMillis(count, opts) {\n    return Duration.fromObject({\n      milliseconds: count\n    }, opts);\n  }\n\n  /**\n   * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.\n   * If this object is empty then a zero milliseconds duration is returned.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.years\n   * @param {number} obj.quarters\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {Object} [opts=[]] - options for creating this Duration\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use\n   * @param {string} [opts.matrix=Object] - the custom conversion system to use\n   * @return {Duration}\n   */;\n  Duration.fromObject = function fromObject(obj, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    if (obj == null || typeof obj !== \"object\") {\n      throw new InvalidArgumentError(\"Duration.fromObject: argument expected to be an object, got \" + (obj === null ? \"null\" : typeof obj));\n    }\n    return new Duration({\n      values: normalizeObject(obj, Duration.normalizeUnit),\n      loc: Locale.fromObject(opts),\n      conversionAccuracy: opts.conversionAccuracy,\n      matrix: opts.matrix\n    });\n  }\n\n  /**\n   * Create a Duration from DurationLike.\n   *\n   * @param {Object | number | Duration} durationLike\n   * One of:\n   * - object with keys like 'years' and 'hours'.\n   * - number representing milliseconds\n   * - Duration instance\n   * @return {Duration}\n   */;\n  Duration.fromDurationLike = function fromDurationLike(durationLike) {\n    if (isNumber(durationLike)) {\n      return Duration.fromMillis(durationLike);\n    } else if (Duration.isDuration(durationLike)) {\n      return durationLike;\n    } else if (typeof durationLike === \"object\") {\n      return Duration.fromObject(durationLike);\n    } else {\n      throw new InvalidArgumentError(\"Unknown duration argument \" + durationLike + \" of type \" + typeof durationLike);\n    }\n  }\n\n  /**\n   * Create a Duration from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use\n   * @param {string} [opts.matrix=Object] - the preset conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */;\n  Duration.fromISO = function fromISO(text, opts) {\n    var _parseISODuration = parseISODuration(text),\n      parsed = _parseISODuration[0];\n    if (parsed) {\n      return Duration.fromObject(parsed, opts);\n    } else {\n      return Duration.invalid(\"unparsable\", \"the input \\\"\" + text + \"\\\" can't be parsed as ISO 8601\");\n    }\n  }\n\n  /**\n   * Create a Duration from an ISO 8601 time string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use\n   * @param {string} [opts.matrix=Object] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Times\n   * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }\n   * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @return {Duration}\n   */;\n  Duration.fromISOTime = function fromISOTime(text, opts) {\n    var _parseISOTimeOnly = parseISOTimeOnly(text),\n      parsed = _parseISOTimeOnly[0];\n    if (parsed) {\n      return Duration.fromObject(parsed, opts);\n    } else {\n      return Duration.invalid(\"unparsable\", \"the input \\\"\" + text + \"\\\" can't be parsed as ISO 8601\");\n    }\n  }\n\n  /**\n   * Create an invalid Duration.\n   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Duration}\n   */;\n  Duration.invalid = function invalid(reason, explanation) {\n    if (explanation === void 0) {\n      explanation = null;\n    }\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Duration is invalid\");\n    }\n    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDurationError(invalid);\n    } else {\n      return new Duration({\n        invalid: invalid\n      });\n    }\n  }\n\n  /**\n   * @private\n   */;\n  Duration.normalizeUnit = function normalizeUnit(unit) {\n    var normalized = {\n      year: \"years\",\n      years: \"years\",\n      quarter: \"quarters\",\n      quarters: \"quarters\",\n      month: \"months\",\n      months: \"months\",\n      week: \"weeks\",\n      weeks: \"weeks\",\n      day: \"days\",\n      days: \"days\",\n      hour: \"hours\",\n      hours: \"hours\",\n      minute: \"minutes\",\n      minutes: \"minutes\",\n      second: \"seconds\",\n      seconds: \"seconds\",\n      millisecond: \"milliseconds\",\n      milliseconds: \"milliseconds\"\n    }[unit ? unit.toLowerCase() : unit];\n    if (!normalized) throw new InvalidUnitError(unit);\n    return normalized;\n  }\n\n  /**\n   * Check if an object is a Duration. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */;\n  Duration.isDuration = function isDuration(o) {\n    return o && o.isLuxonDuration || false;\n  }\n\n  /**\n   * Get  the locale of a Duration, such 'en-GB'\n   * @type {string}\n   */;\n  var _proto = Duration.prototype;\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:\n   * * `S` for milliseconds\n   * * `s` for seconds\n   * * `m` for minutes\n   * * `h` for hours\n   * * `d` for days\n   * * `w` for weeks\n   * * `M` for months\n   * * `y` for years\n   * Notes:\n   * * Add padding by repeating the token, e.g. \"yy\" pads the years to two digits, \"hhhh\" pads the hours out to four digits\n   * * Tokens can be escaped by wrapping with single quotes.\n   * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.\n   * @param {string} fmt - the format string\n   * @param {Object} opts - options\n   * @param {boolean} [opts.floor=true] - floor numerical values\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"y d s\") //=> \"1 6 2\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"yy dd sss\") //=> \"01 06 002\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"M S\") //=> \"12 518402000\"\n   * @return {string}\n   */\n  _proto.toFormat = function toFormat(fmt, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    // reverse-compat since 1.2; we always round down now, never up, and we do it by default\n    var fmtOpts = _extends({}, opts, {\n      floor: opts.round !== false && opts.floor !== false\n    });\n    return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID$2;\n  }\n\n  /**\n   * Returns a string representation of a Duration with all units included.\n   * To modify its behavior, use `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options\n   * @param {Object} opts - Formatting options. Accepts the same keys as the options parameter of the native `Intl.NumberFormat` constructor, as well as `listStyle`.\n   * @param {string} [opts.listStyle='narrow'] - How to format the merged list. Corresponds to the `style` property of the options parameter of the native `Intl.ListFormat` constructor.\n   * @example\n   * ```js\n   * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })\n   * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'\n   * dur.toHuman({ listStyle: \"long\" }) //=> '1 day, 5 hours, and 6 minutes'\n   * dur.toHuman({ unitDisplay: \"short\" }) //=> '1 day, 5 hr, 6 min'\n   * ```\n   */;\n  _proto.toHuman = function toHuman(opts) {\n    var _this = this;\n    if (opts === void 0) {\n      opts = {};\n    }\n    if (!this.isValid) return INVALID$2;\n    var l = orderedUnits$1.map(function (unit) {\n      var val = _this.values[unit];\n      if (isUndefined(val)) {\n        return null;\n      }\n      return _this.loc.numberFormatter(_extends({\n        style: \"unit\",\n        unitDisplay: \"long\"\n      }, opts, {\n        unit: unit.slice(0, -1)\n      })).format(val);\n    }).filter(function (n) {\n      return n;\n    });\n    return this.loc.listFormatter(_extends({\n      type: \"conjunction\",\n      style: opts.listStyle || \"narrow\"\n    }, opts)).format(l);\n  }\n\n  /**\n   * Returns a JavaScript object with this Duration's values.\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {Object}\n   */;\n  _proto.toObject = function toObject() {\n    if (!this.isValid) return {};\n    return _extends({}, this.values);\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\n   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'\n   * @return {string}\n   */;\n  _proto.toISO = function toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    if (!this.isValid) return null;\n    var s = \"P\";\n    if (this.years !== 0) s += this.years + \"Y\";\n    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + \"M\";\n    if (this.weeks !== 0) s += this.weeks + \"W\";\n    if (this.days !== 0) s += this.days + \"D\";\n    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0) s += \"T\";\n    if (this.hours !== 0) s += this.hours + \"H\";\n    if (this.minutes !== 0) s += this.minutes + \"M\";\n    if (this.seconds !== 0 || this.milliseconds !== 0)\n      // this will handle \"floating point madness\" by removing extra decimal places\n      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken\n      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + \"S\";\n    if (s === \"P\") s += \"T0S\";\n    return s;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.\n   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Times\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'\n   * @return {string}\n   */;\n  _proto.toISOTime = function toISOTime(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    if (!this.isValid) return null;\n    var millis = this.toMillis();\n    if (millis < 0 || millis >= 86400000) return null;\n    opts = _extends({\n      suppressMilliseconds: false,\n      suppressSeconds: false,\n      includePrefix: false,\n      format: \"extended\"\n    }, opts, {\n      includeOffset: false\n    });\n    var dateTime = DateTime.fromMillis(millis, {\n      zone: \"UTC\"\n    });\n    return dateTime.toISOTime(opts);\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */;\n  _proto.toJSON = function toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */;\n  _proto.toString = function toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a string representation of this Duration appropriate for the REPL.\n   * @return {string}\n   */;\n  _proto[_Symbol$for] = function () {\n    if (this.isValid) {\n      return \"Duration { values: \" + JSON.stringify(this.values) + \" }\";\n    } else {\n      return \"Duration { Invalid, reason: \" + this.invalidReason + \" }\";\n    }\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration.\n   * @return {number}\n   */;\n  _proto.toMillis = function toMillis() {\n    if (!this.isValid) return NaN;\n    return durationToMillis(this.matrix, this.values);\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}\n   * @return {number}\n   */;\n  _proto.valueOf = function valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */;\n  _proto.plus = function plus(duration) {\n    if (!this.isValid) return this;\n    var dur = Duration.fromDurationLike(duration),\n      result = {};\n    for (var _i2 = 0, _orderedUnits = orderedUnits$1; _i2 < _orderedUnits.length; _i2++) {\n      var k = _orderedUnits[_i2];\n      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {\n        result[k] = dur.get(k) + this.get(k);\n      }\n    }\n    return clone$1(this, {\n      values: result\n    }, true);\n  }\n\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */;\n  _proto.minus = function minus(duration) {\n    if (!this.isValid) return this;\n    var dur = Duration.fromDurationLike(duration);\n    return this.plus(dur.negate());\n  }\n\n  /**\n   * Scale this Duration by the specified amount. Return a newly-constructed Duration.\n   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === \"hours\" ? x * 2 : x) //=> { hours: 2, minutes: 30 }\n   * @return {Duration}\n   */;\n  _proto.mapUnits = function mapUnits(fn) {\n    if (!this.isValid) return this;\n    var result = {};\n    for (var _i3 = 0, _Object$keys = Object.keys(this.values); _i3 < _Object$keys.length; _i3++) {\n      var k = _Object$keys[_i3];\n      result[k] = asNumber(fn(this.values[k], k));\n    }\n    return clone$1(this, {\n      values: result\n    }, true);\n  }\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3\n   * @return {number}\n   */;\n  _proto.get = function get(unit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n\n  /**\n   * \"Set\" the values of specified units. Return a newly-constructed Duration.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */;\n  _proto.set = function set(values) {\n    if (!this.isValid) return this;\n    var mixed = _extends({}, this.values, normalizeObject(values, Duration.normalizeUnit));\n    return clone$1(this, {\n      values: mixed\n    });\n  }\n\n  /**\n   * \"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: 'en-GB' })\n   * @return {Duration}\n   */;\n  _proto.reconfigure = function reconfigure(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n      locale = _ref.locale,\n      numberingSystem = _ref.numberingSystem,\n      conversionAccuracy = _ref.conversionAccuracy,\n      matrix = _ref.matrix;\n    var loc = this.loc.clone({\n      locale: locale,\n      numberingSystem: numberingSystem\n    });\n    var opts = {\n      loc: loc,\n      matrix: matrix,\n      conversionAccuracy: conversionAccuracy\n    };\n    return clone$1(this, opts);\n  }\n\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as 'minutes' or 'days'\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\n   * @return {number}\n   */;\n  _proto.as = function as(unit) {\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\n  }\n\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * Assuming the overall value of the Duration is positive, this means:\n   * - excessive values for lower-order units are converted to higher-order units (if possible, see first and second example)\n   * - negative lower-order units are converted to higher order units (there must be such a higher order unit, otherwise\n   *   the overall value would be negative, see third example)\n   * - fractional values for higher-order units are converted to lower-order units (if possible, see fourth example)\n   *\n   * If the overall value is negative, the result of this method is equivalent to `this.negate().normalize().negate()`.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ days: 5000 }).normalize().toObject() //=> { days: 5000 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @example Duration.fromObject({ years: 2.5, days: 0, hours: 0 }).normalize().toObject() //=> { years: 2, days: 182, hours: 12 }\n   * @return {Duration}\n   */;\n  _proto.normalize = function normalize() {\n    if (!this.isValid) return this;\n    var vals = this.toObject();\n    normalizeValues(this.matrix, vals);\n    return clone$1(this, {\n      values: vals\n    }, true);\n  }\n\n  /**\n   * Rescale units to its largest representation\n   * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }\n   * @return {Duration}\n   */;\n  _proto.rescale = function rescale() {\n    if (!this.isValid) return this;\n    var vals = removeZeroes(this.normalize().shiftToAll().toObject());\n    return clone$1(this, {\n      values: vals\n    }, true);\n  }\n\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */;\n  _proto.shiftTo = function shiftTo() {\n    for (var _len = arguments.length, units = new Array(_len), _key = 0; _key < _len; _key++) {\n      units[_key] = arguments[_key];\n    }\n    if (!this.isValid) return this;\n    if (units.length === 0) {\n      return this;\n    }\n    units = units.map(function (u) {\n      return Duration.normalizeUnit(u);\n    });\n    var built = {},\n      accumulated = {},\n      vals = this.toObject();\n    var lastUnit;\n    for (var _i4 = 0, _orderedUnits2 = orderedUnits$1; _i4 < _orderedUnits2.length; _i4++) {\n      var k = _orderedUnits2[_i4];\n      if (units.indexOf(k) >= 0) {\n        lastUnit = k;\n        var own = 0;\n\n        // anything we haven't boiled down yet should get boiled to this unit\n        for (var ak in accumulated) {\n          own += this.matrix[ak][k] * accumulated[ak];\n          accumulated[ak] = 0;\n        }\n\n        // plus anything that's already in this unit\n        if (isNumber(vals[k])) {\n          own += vals[k];\n        }\n\n        // only keep the integer part for now in the hopes of putting any decimal part\n        // into a smaller unit later\n        var i = Math.trunc(own);\n        built[k] = i;\n        accumulated[k] = (own * 1000 - i * 1000) / 1000;\n\n        // otherwise, keep it in the wings to boil it later\n      } else if (isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    }\n\n    // anything leftover becomes the decimal for the last unit\n    // lastUnit must be defined since units is not empty\n    for (var key in accumulated) {\n      if (accumulated[key] !== 0) {\n        built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];\n      }\n    }\n    normalizeValues(this.matrix, built);\n    return clone$1(this, {\n      values: built\n    }, true);\n  }\n\n  /**\n   * Shift this Duration to all available units.\n   * Same as shiftTo(\"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\")\n   * @return {Duration}\n   */;\n  _proto.shiftToAll = function shiftToAll() {\n    if (!this.isValid) return this;\n    return this.shiftTo(\"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\");\n  }\n\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */;\n  _proto.negate = function negate() {\n    if (!this.isValid) return this;\n    var negated = {};\n    for (var _i5 = 0, _Object$keys2 = Object.keys(this.values); _i5 < _Object$keys2.length; _i5++) {\n      var k = _Object$keys2[_i5];\n      negated[k] = this.values[k] === 0 ? 0 : -this.values[k];\n    }\n    return clone$1(this, {\n      values: negated\n    }, true);\n  }\n\n  /**\n   * Get the years.\n   * @type {number}\n   */;\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  _proto.equals = function equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n    if (!this.loc.equals(other.loc)) {\n      return false;\n    }\n    function eq(v1, v2) {\n      // Consider 0 and undefined as equal\n      if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;\n      return v1 === v2;\n    }\n    for (var _i6 = 0, _orderedUnits3 = orderedUnits$1; _i6 < _orderedUnits3.length; _i6++) {\n      var u = _orderedUnits3[_i6];\n      if (!eq(this.values[u], other.values[u])) {\n        return false;\n      }\n    }\n    return true;\n  };\n  _createClass(Duration, [{\n    key: \"locale\",\n    get: function get() {\n      return this.isValid ? this.loc.locale : null;\n    }\n\n    /**\n     * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\n     *\n     * @type {string}\n     */\n  }, {\n    key: \"numberingSystem\",\n    get: function get() {\n      return this.isValid ? this.loc.numberingSystem : null;\n    }\n  }, {\n    key: \"years\",\n    get: function get() {\n      return this.isValid ? this.values.years || 0 : NaN;\n    }\n\n    /**\n     * Get the quarters.\n     * @type {number}\n     */\n  }, {\n    key: \"quarters\",\n    get: function get() {\n      return this.isValid ? this.values.quarters || 0 : NaN;\n    }\n\n    /**\n     * Get the months.\n     * @type {number}\n     */\n  }, {\n    key: \"months\",\n    get: function get() {\n      return this.isValid ? this.values.months || 0 : NaN;\n    }\n\n    /**\n     * Get the weeks\n     * @type {number}\n     */\n  }, {\n    key: \"weeks\",\n    get: function get() {\n      return this.isValid ? this.values.weeks || 0 : NaN;\n    }\n\n    /**\n     * Get the days.\n     * @type {number}\n     */\n  }, {\n    key: \"days\",\n    get: function get() {\n      return this.isValid ? this.values.days || 0 : NaN;\n    }\n\n    /**\n     * Get the hours.\n     * @type {number}\n     */\n  }, {\n    key: \"hours\",\n    get: function get() {\n      return this.isValid ? this.values.hours || 0 : NaN;\n    }\n\n    /**\n     * Get the minutes.\n     * @type {number}\n     */\n  }, {\n    key: \"minutes\",\n    get: function get() {\n      return this.isValid ? this.values.minutes || 0 : NaN;\n    }\n\n    /**\n     * Get the seconds.\n     * @return {number}\n     */\n  }, {\n    key: \"seconds\",\n    get: function get() {\n      return this.isValid ? this.values.seconds || 0 : NaN;\n    }\n\n    /**\n     * Get the milliseconds.\n     * @return {number}\n     */\n  }, {\n    key: \"milliseconds\",\n    get: function get() {\n      return this.isValid ? this.values.milliseconds || 0 : NaN;\n    }\n\n    /**\n     * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\n     * on invalid DateTimes or Intervals.\n     * @return {boolean}\n     */\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return this.invalid === null;\n    }\n\n    /**\n     * Returns an error code if this Duration became invalid, or null if the Duration is valid\n     * @return {string}\n     */\n  }, {\n    key: \"invalidReason\",\n    get: function get() {\n      return this.invalid ? this.invalid.reason : null;\n    }\n\n    /**\n     * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\n     * @type {string}\n     */\n  }, {\n    key: \"invalidExplanation\",\n    get: function get() {\n      return this.invalid ? this.invalid.explanation : null;\n    }\n  }]);\n  return Duration;\n}(Symbol.for(\"nodejs.util.inspect.custom\"));\n\nvar INVALID$1 = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\"end before start\", \"The end of an interval must be after its start, but you had start=\" + start.toISO() + \" and end=\" + end.toISO());\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\nvar Interval = /*#__PURE__*/function (_Symbol$for) {\n  /**\n   * @private\n   */\n  function Interval(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  Interval.invalid = function invalid(reason, explanation) {\n    if (explanation === void 0) {\n      explanation = null;\n    }\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({\n        invalid: invalid\n      });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */;\n  Interval.fromDateTimes = function fromDateTimes(start, end) {\n    var builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n    var validateError = validateStartEnd(builtStart, builtEnd);\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd\n      });\n    } else {\n      return validateError;\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */;\n  Interval.after = function after(start, duration) {\n    var dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */;\n  Interval.before = function before(end, duration) {\n    var dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */;\n  Interval.fromISO = function fromISO(text, opts) {\n    var _split = (text || \"\").split(\"/\", 2),\n      s = _split[0],\n      e = _split[1];\n    if (s && e) {\n      var start, startIsValid;\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n      var end, endIsValid;\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n      if (startIsValid) {\n        var dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        var _dur = Duration.fromISO(s, opts);\n        if (_dur.isValid) {\n          return Interval.before(end, _dur);\n        }\n      }\n    }\n    return Interval.invalid(\"unparsable\", \"the input \\\"\" + text + \"\\\" can't be parsed as ISO 8601\");\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */;\n  Interval.isInterval = function isInterval(o) {\n    return o && o.isLuxonInterval || false;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */;\n  var _proto = Interval.prototype;\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  _proto.length = function length(unit) {\n    if (unit === void 0) {\n      unit = \"milliseconds\";\n    }\n    return this.isValid ? this.toDuration.apply(this, [unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; this operation will always use the locale of the start DateTime\n   * @return {number}\n   */;\n  _proto.count = function count(unit, opts) {\n    if (unit === void 0) {\n      unit = \"milliseconds\";\n    }\n    if (!this.isValid) return NaN;\n    var start = this.start.startOf(unit, opts);\n    var end;\n    if (opts != null && opts.useLocaleWeeks) {\n      end = this.end.reconfigure({\n        locale: start.locale\n      });\n    } else {\n      end = this.end;\n    }\n    end = end.startOf(unit, opts);\n    return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */;\n  _proto.hasSame = function hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */;\n  _proto.isEmpty = function isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */;\n  _proto.isAfter = function isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */;\n  _proto.isBefore = function isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */;\n  _proto.contains = function contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */;\n  _proto.set = function set(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n      start = _ref.start,\n      end = _ref.end;\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTime} dateTimes - the unit of time to count.\n   * @return {Array}\n   */;\n  _proto.splitAt = function splitAt() {\n    var _this = this;\n    if (!this.isValid) return [];\n    for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {\n      dateTimes[_key] = arguments[_key];\n    }\n    var sorted = dateTimes.map(friendlyDateTime).filter(function (d) {\n        return _this.contains(d);\n      }).sort(function (a, b) {\n        return a.toMillis() - b.toMillis();\n      }),\n      results = [];\n    var s = this.s,\n      i = 0;\n    while (s < this.e) {\n      var added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {Array}\n   */;\n  _proto.splitBy = function splitBy(duration) {\n    var dur = Duration.fromDurationLike(duration);\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n    var s = this.s,\n      idx = 1,\n      next;\n    var results = [];\n    while (s < this.e) {\n      var added = this.start.plus(dur.mapUnits(function (x) {\n        return x * idx;\n      }));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {Array}\n   */;\n  _proto.divideEqually = function divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */;\n  _proto.overlaps = function overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */;\n  _proto.abutsStart = function abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */;\n  _proto.abutsEnd = function abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Returns true if this Interval fully contains the specified Interval, specifically if the intersect (of this Interval and the other Interval) is equal to the other Interval; false otherwise.\n   * @param {Interval} other\n   * @return {boolean}\n   */;\n  _proto.engulfs = function engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */;\n  _proto.equals = function equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */;\n  _proto.intersection = function intersection(other) {\n    if (!this.isValid) return this;\n    var s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */;\n  _proto.union = function union(other) {\n    if (!this.isValid) return this;\n    var s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */;\n  Interval.merge = function merge(intervals) {\n    var _intervals$sort$reduc = intervals.sort(function (a, b) {\n        return a.s - b.s;\n      }).reduce(function (_ref2, item) {\n        var sofar = _ref2[0],\n          current = _ref2[1];\n        if (!current) {\n          return [sofar, item];\n        } else if (current.overlaps(item) || current.abutsStart(item)) {\n          return [sofar, current.union(item)];\n        } else {\n          return [sofar.concat([current]), item];\n        }\n      }, [[], null]),\n      found = _intervals$sort$reduc[0],\n      final = _intervals$sort$reduc[1];\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */;\n  Interval.xor = function xor(intervals) {\n    var _Array$prototype;\n    var start = null,\n      currentCount = 0;\n    var results = [],\n      ends = intervals.map(function (i) {\n        return [{\n          time: i.s,\n          type: \"s\"\n        }, {\n          time: i.e,\n          type: \"e\"\n        }];\n      }),\n      flattened = (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, ends),\n      arr = flattened.sort(function (a, b) {\n        return a.time - b.time;\n      });\n    for (var _iterator = _createForOfIteratorHelperLoose(arr), _step; !(_step = _iterator()).done;) {\n      var i = _step.value;\n      currentCount += i.type === \"s\" ? 1 : -1;\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n        start = null;\n      }\n    }\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Array}\n   */;\n  _proto.difference = function difference() {\n    var _this2 = this;\n    for (var _len2 = arguments.length, intervals = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      intervals[_key2] = arguments[_key2];\n    }\n    return Interval.xor([this].concat(intervals)).map(function (i) {\n      return _this2.intersection(i);\n    }).filter(function (i) {\n      return i && !i.isEmpty();\n    });\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */;\n  _proto.toString = function toString() {\n    if (!this.isValid) return INVALID$1;\n    return \"[\" + this.s.toISO() + \" \\u2013 \" + this.e.toISO() + \")\";\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for the REPL.\n   * @return {string}\n   */;\n  _proto[_Symbol$for] = function () {\n    if (this.isValid) {\n      return \"Interval { start: \" + this.s.toISO() + \", end: \" + this.e.toISO() + \" }\";\n    } else {\n      return \"Interval { Invalid, reason: \" + this.invalidReason + \" }\";\n    }\n  }\n\n  /**\n   * Returns a localized string representing this Interval. Accepts the same options as the\n   * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as\n   * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method\n   * is browser-specific, but in general it will return an appropriate representation of the\n   * Interval in the assigned locale. Defaults to the system's locale if no locale has been\n   * specified.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or\n   * Intl.DateTimeFormat constructor options.\n   * @param {Object} opts - Options to override the configuration of the start DateTime.\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p\n   * @return {string}\n   */;\n  _proto.toLocaleString = function toLocaleString(formatOpts, opts) {\n    if (formatOpts === void 0) {\n      formatOpts = DATE_SHORT;\n    }\n    if (opts === void 0) {\n      opts = {};\n    }\n    return this.isValid ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this) : INVALID$1;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */;\n  _proto.toISO = function toISO(opts) {\n    if (!this.isValid) return INVALID$1;\n    return this.s.toISO(opts) + \"/\" + this.e.toISO(opts);\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */;\n  _proto.toISODate = function toISODate() {\n    if (!this.isValid) return INVALID$1;\n    return this.s.toISODate() + \"/\" + this.e.toISODate();\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */;\n  _proto.toISOTime = function toISOTime(opts) {\n    if (!this.isValid) return INVALID$1;\n    return this.s.toISOTime(opts) + \"/\" + this.e.toISOTime(opts);\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format\n   * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible\n   * formatting tool.\n   * @param {string} dateFormat - The format string. This string formats the start and end time.\n   * See {@link DateTime#toFormat} for details.\n   * @param {Object} opts - Options.\n   * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end\n   * representations.\n   * @return {string}\n   */;\n  _proto.toFormat = function toFormat(dateFormat, _temp2) {\n    var _ref3 = _temp2 === void 0 ? {} : _temp2,\n      _ref3$separator = _ref3.separator,\n      separator = _ref3$separator === void 0 ? \" – \" : _ref3$separator;\n    if (!this.isValid) return INVALID$1;\n    return \"\" + this.s.toFormat(dateFormat) + separator + this.e.toFormat(dateFormat);\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */;\n  _proto.toDuration = function toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */;\n  _proto.mapEndpoints = function mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  };\n  _createClass(Interval, [{\n    key: \"start\",\n    get: function get() {\n      return this.isValid ? this.s : null;\n    }\n\n    /**\n     * Returns the end of the Interval\n     * @type {DateTime}\n     */\n  }, {\n    key: \"end\",\n    get: function get() {\n      return this.isValid ? this.e : null;\n    }\n\n    /**\n     * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n     * @type {boolean}\n     */\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return this.invalidReason === null;\n    }\n\n    /**\n     * Returns an error code if this Interval is invalid, or null if the Interval is valid\n     * @type {string}\n     */\n  }, {\n    key: \"invalidReason\",\n    get: function get() {\n      return this.invalid ? this.invalid.reason : null;\n    }\n\n    /**\n     * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n     * @type {string}\n     */\n  }, {\n    key: \"invalidExplanation\",\n    get: function get() {\n      return this.invalid ? this.invalid.explanation : null;\n    }\n  }]);\n  return Interval;\n}(Symbol.for(\"nodejs.util.inspect.custom\"));\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\nvar Info = /*#__PURE__*/function () {\n  function Info() {}\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.\n   * @return {boolean}\n   */\n  Info.hasDST = function hasDST(zone) {\n    if (zone === void 0) {\n      zone = Settings.defaultZone;\n    }\n    var proto = DateTime.now().setZone(zone).set({\n      month: 12\n    });\n    return !zone.isUniversal && proto.offset !== proto.set({\n      month: 6\n    }).offset;\n  }\n\n  /**\n   * Return whether the specified zone is a valid IANA specifier.\n   * @param {string} zone - Zone to check\n   * @return {boolean}\n   */;\n  Info.isValidIANAZone = function isValidIANAZone(zone) {\n    return IANAZone.isValidZone(zone);\n  }\n\n  /**\n   * Converts the input into a {@link Zone} instance.\n   *\n   * * If `input` is already a Zone instance, it is returned unchanged.\n   * * If `input` is a string containing a valid time zone name, a Zone instance\n   *   with that name is returned.\n   * * If `input` is a string that doesn't refer to a known time zone, a Zone\n   *   instance with {@link Zone#isValid} == false is returned.\n   * * If `input is a number, a Zone instance with the specified fixed offset\n   *   in minutes is returned.\n   * * If `input` is `null` or `undefined`, the default zone is returned.\n   * @param {string|Zone|number} [input] - the value to be converted\n   * @return {Zone}\n   */;\n  Info.normalizeZone = function normalizeZone$1(input) {\n    return normalizeZone(input, Settings.defaultZone);\n  }\n\n  /**\n   * Get the weekday on which the week starts according to the given locale.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @returns {number} the start of the week, 1 for Monday through 7 for Sunday\n   */;\n  Info.getStartOfWeek = function getStartOfWeek(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n      _ref$locale = _ref.locale,\n      locale = _ref$locale === void 0 ? null : _ref$locale,\n      _ref$locObj = _ref.locObj,\n      locObj = _ref$locObj === void 0 ? null : _ref$locObj;\n    return (locObj || Locale.create(locale)).getStartOfWeek();\n  }\n\n  /**\n   * Get the minimum number of days necessary in a week before it is considered part of the next year according\n   * to the given locale.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @returns {number}\n   */;\n  Info.getMinimumDaysInFirstWeek = function getMinimumDaysInFirstWeek(_temp2) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n      _ref2$locale = _ref2.locale,\n      locale = _ref2$locale === void 0 ? null : _ref2$locale,\n      _ref2$locObj = _ref2.locObj,\n      locObj = _ref2$locObj === void 0 ? null : _ref2$locObj;\n    return (locObj || Locale.create(locale)).getMinDaysInFirstWeek();\n  }\n\n  /**\n   * Get the weekdays, which are considered the weekend according to the given locale\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @returns {number[]} an array of weekdays, 1 for Monday through 7 for Sunday\n   */;\n  Info.getWeekendWeekdays = function getWeekendWeekdays(_temp3) {\n    var _ref3 = _temp3 === void 0 ? {} : _temp3,\n      _ref3$locale = _ref3.locale,\n      locale = _ref3$locale === void 0 ? null : _ref3$locale,\n      _ref3$locObj = _ref3.locObj,\n      locObj = _ref3$locObj === void 0 ? null : _ref3$locObj;\n    // copy the array, because we cache it internally\n    return (locObj || Locale.create(locale)).getWeekendDays().slice();\n  }\n\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.months()[0] //=> 'January'\n   * @example Info.months('short')[0] //=> 'Jan'\n   * @example Info.months('numeric')[0] //=> '1'\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\n   * @return {Array}\n   */;\n  Info.months = function months(length, _temp4) {\n    if (length === void 0) {\n      length = \"long\";\n    }\n    var _ref4 = _temp4 === void 0 ? {} : _temp4,\n      _ref4$locale = _ref4.locale,\n      locale = _ref4$locale === void 0 ? null : _ref4$locale,\n      _ref4$numberingSystem = _ref4.numberingSystem,\n      numberingSystem = _ref4$numberingSystem === void 0 ? null : _ref4$numberingSystem,\n      _ref4$locObj = _ref4.locObj,\n      locObj = _ref4$locObj === void 0 ? null : _ref4$locObj,\n      _ref4$outputCalendar = _ref4.outputCalendar,\n      outputCalendar = _ref4$outputCalendar === void 0 ? \"gregory\" : _ref4$outputCalendar;\n    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);\n  }\n\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link Info#months}\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {Array}\n   */;\n  Info.monthsFormat = function monthsFormat(length, _temp5) {\n    if (length === void 0) {\n      length = \"long\";\n    }\n    var _ref5 = _temp5 === void 0 ? {} : _temp5,\n      _ref5$locale = _ref5.locale,\n      locale = _ref5$locale === void 0 ? null : _ref5$locale,\n      _ref5$numberingSystem = _ref5.numberingSystem,\n      numberingSystem = _ref5$numberingSystem === void 0 ? null : _ref5$numberingSystem,\n      _ref5$locObj = _ref5.locObj,\n      locObj = _ref5$locObj === void 0 ? null : _ref5$locObj,\n      _ref5$outputCalendar = _ref5.outputCalendar,\n      outputCalendar = _ref5$outputCalendar === void 0 ? \"gregory\" : _ref5$outputCalendar;\n    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);\n  }\n\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the weekday representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @example Info.weekdays()[0] //=> 'Monday'\n   * @example Info.weekdays('short')[0] //=> 'Mon'\n   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'\n   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'\n   * @return {Array}\n   */;\n  Info.weekdays = function weekdays(length, _temp6) {\n    if (length === void 0) {\n      length = \"long\";\n    }\n    var _ref6 = _temp6 === void 0 ? {} : _temp6,\n      _ref6$locale = _ref6.locale,\n      locale = _ref6$locale === void 0 ? null : _ref6$locale,\n      _ref6$numberingSystem = _ref6.numberingSystem,\n      numberingSystem = _ref6$numberingSystem === void 0 ? null : _ref6$numberingSystem,\n      _ref6$locObj = _ref6.locObj,\n      locObj = _ref6$locObj === void 0 ? null : _ref6$locObj;\n    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);\n  }\n\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link Info#weekdays}\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale=null] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @return {Array}\n   */;\n  Info.weekdaysFormat = function weekdaysFormat(length, _temp7) {\n    if (length === void 0) {\n      length = \"long\";\n    }\n    var _ref7 = _temp7 === void 0 ? {} : _temp7,\n      _ref7$locale = _ref7.locale,\n      locale = _ref7$locale === void 0 ? null : _ref7$locale,\n      _ref7$numberingSystem = _ref7.numberingSystem,\n      numberingSystem = _ref7$numberingSystem === void 0 ? null : _ref7$numberingSystem,\n      _ref7$locObj = _ref7.locObj,\n      locObj = _ref7$locObj === void 0 ? null : _ref7$locObj;\n    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);\n  }\n\n  /**\n   * Return an array of meridiems.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\n   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]\n   * @return {Array}\n   */;\n  Info.meridiems = function meridiems(_temp8) {\n    var _ref8 = _temp8 === void 0 ? {} : _temp8,\n      _ref8$locale = _ref8.locale,\n      locale = _ref8$locale === void 0 ? null : _ref8$locale;\n    return Locale.create(locale).meridiems();\n  }\n\n  /**\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\n   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n   * @return {Array}\n   */;\n  Info.eras = function eras(length, _temp9) {\n    if (length === void 0) {\n      length = \"short\";\n    }\n    var _ref9 = _temp9 === void 0 ? {} : _temp9,\n      _ref9$locale = _ref9.locale,\n      locale = _ref9$locale === void 0 ? null : _ref9$locale;\n    return Locale.create(locale, null, \"gregory\").eras(length);\n  }\n\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.\n   * Keys:\n   * * `relative`: whether this environment supports relative time formatting\n   * * `localeWeek`: whether this environment supports different weekdays for the start of the week based on the locale\n   * @example Info.features() //=> { relative: false, localeWeek: true }\n   * @return {Object}\n   */;\n  Info.features = function features() {\n    return {\n      relative: hasRelative(),\n      localeWeek: hasLocaleWeekInfo()\n    };\n  };\n  return Info;\n}();\n\nfunction dayDiff(earlier, later) {\n  var utcDayStart = function utcDayStart(dt) {\n      return dt.toUTC(0, {\n        keepLocalTime: true\n      }).startOf(\"day\").valueOf();\n    },\n    ms = utcDayStart(later) - utcDayStart(earlier);\n  return Math.floor(Duration.fromMillis(ms).as(\"days\"));\n}\nfunction highOrderDiffs(cursor, later, units) {\n  var differs = [[\"years\", function (a, b) {\n    return b.year - a.year;\n  }], [\"quarters\", function (a, b) {\n    return b.quarter - a.quarter + (b.year - a.year) * 4;\n  }], [\"months\", function (a, b) {\n    return b.month - a.month + (b.year - a.year) * 12;\n  }], [\"weeks\", function (a, b) {\n    var days = dayDiff(a, b);\n    return (days - days % 7) / 7;\n  }], [\"days\", dayDiff]];\n  var results = {};\n  var earlier = cursor;\n  var lowestOrder, highWater;\n\n  /* This loop tries to diff using larger units first.\n     If we overshoot, we backtrack and try the next smaller unit.\n     \"cursor\" starts out at the earlier timestamp and moves closer and closer to \"later\"\n     as we use smaller and smaller units.\n     highWater keeps track of where we would be if we added one more of the smallest unit,\n     this is used later to potentially convert any difference smaller than the smallest higher order unit\n     into a fraction of that smallest higher order unit\n  */\n  for (var _i = 0, _differs = differs; _i < _differs.length; _i++) {\n    var _differs$_i = _differs[_i],\n      unit = _differs$_i[0],\n      differ = _differs$_i[1];\n    if (units.indexOf(unit) >= 0) {\n      lowestOrder = unit;\n      results[unit] = differ(cursor, later);\n      highWater = earlier.plus(results);\n      if (highWater > later) {\n        // we overshot the end point, backtrack cursor by 1\n        results[unit]--;\n        cursor = earlier.plus(results);\n\n        // if we are still overshooting now, we need to backtrack again\n        // this happens in certain situations when diffing times in different zones,\n        // because this calculation ignores time zones\n        if (cursor > later) {\n          // keep the \"overshot by 1\" around as highWater\n          highWater = cursor;\n          // backtrack cursor by 1\n          results[unit]--;\n          cursor = earlier.plus(results);\n        }\n      } else {\n        cursor = highWater;\n      }\n    }\n  }\n  return [cursor, results, highWater, lowestOrder];\n}\nfunction _diff (earlier, later, units, opts) {\n  var _highOrderDiffs = highOrderDiffs(earlier, later, units),\n    cursor = _highOrderDiffs[0],\n    results = _highOrderDiffs[1],\n    highWater = _highOrderDiffs[2],\n    lowestOrder = _highOrderDiffs[3];\n  var remainingMillis = later - cursor;\n  var lowerOrderUnits = units.filter(function (u) {\n    return [\"hours\", \"minutes\", \"seconds\", \"milliseconds\"].indexOf(u) >= 0;\n  });\n  if (lowerOrderUnits.length === 0) {\n    if (highWater < later) {\n      var _cursor$plus;\n      highWater = cursor.plus((_cursor$plus = {}, _cursor$plus[lowestOrder] = 1, _cursor$plus));\n    }\n    if (highWater !== cursor) {\n      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);\n    }\n  }\n  var duration = Duration.fromObject(results, opts);\n  if (lowerOrderUnits.length > 0) {\n    var _Duration$fromMillis;\n    return (_Duration$fromMillis = Duration.fromMillis(remainingMillis, opts)).shiftTo.apply(_Duration$fromMillis, lowerOrderUnits).plus(duration);\n  } else {\n    return duration;\n  }\n}\n\nvar MISSING_FTP = \"missing Intl.DateTimeFormat.formatToParts support\";\nfunction intUnit(regex, post) {\n  if (post === void 0) {\n    post = function post(i) {\n      return i;\n    };\n  }\n  return {\n    regex: regex,\n    deser: function deser(_ref) {\n      var s = _ref[0];\n      return post(parseDigits(s));\n    }\n  };\n}\nvar NBSP = String.fromCharCode(160);\nvar spaceOrNBSP = \"[ \" + NBSP + \"]\";\nvar spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, \"g\");\nfunction fixListRegex(s) {\n  // make dots optional and also make them literal\n  // make space and non breakable space characters interchangeable\n  return s.replace(/\\./g, \"\\\\.?\").replace(spaceOrNBSPRegExp, spaceOrNBSP);\n}\nfunction stripInsensitivities(s) {\n  return s.replace(/\\./g, \"\") // ignore dots that were made optional\n  .replace(spaceOrNBSPRegExp, \" \") // interchange space and nbsp\n  .toLowerCase();\n}\nfunction oneOf(strings, startIndex) {\n  if (strings === null) {\n    return null;\n  } else {\n    return {\n      regex: RegExp(strings.map(fixListRegex).join(\"|\")),\n      deser: function deser(_ref2) {\n        var s = _ref2[0];\n        return strings.findIndex(function (i) {\n          return stripInsensitivities(s) === stripInsensitivities(i);\n        }) + startIndex;\n      }\n    };\n  }\n}\nfunction offset(regex, groups) {\n  return {\n    regex: regex,\n    deser: function deser(_ref3) {\n      var h = _ref3[1],\n        m = _ref3[2];\n      return signedOffset(h, m);\n    },\n    groups: groups\n  };\n}\nfunction simple(regex) {\n  return {\n    regex: regex,\n    deser: function deser(_ref4) {\n      var s = _ref4[0];\n      return s;\n    }\n  };\n}\nfunction escapeToken(value) {\n  return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n}\n\n/**\n * @param token\n * @param {Locale} loc\n */\nfunction unitForToken(token, loc) {\n  var one = digitRegex(loc),\n    two = digitRegex(loc, \"{2}\"),\n    three = digitRegex(loc, \"{3}\"),\n    four = digitRegex(loc, \"{4}\"),\n    six = digitRegex(loc, \"{6}\"),\n    oneOrTwo = digitRegex(loc, \"{1,2}\"),\n    oneToThree = digitRegex(loc, \"{1,3}\"),\n    oneToSix = digitRegex(loc, \"{1,6}\"),\n    oneToNine = digitRegex(loc, \"{1,9}\"),\n    twoToFour = digitRegex(loc, \"{2,4}\"),\n    fourToSix = digitRegex(loc, \"{4,6}\"),\n    literal = function literal(t) {\n      return {\n        regex: RegExp(escapeToken(t.val)),\n        deser: function deser(_ref5) {\n          var s = _ref5[0];\n          return s;\n        },\n        literal: true\n      };\n    },\n    unitate = function unitate(t) {\n      if (token.literal) {\n        return literal(t);\n      }\n      switch (t.val) {\n        // era\n        case \"G\":\n          return oneOf(loc.eras(\"short\"), 0);\n        case \"GG\":\n          return oneOf(loc.eras(\"long\"), 0);\n        // years\n        case \"y\":\n          return intUnit(oneToSix);\n        case \"yy\":\n          return intUnit(twoToFour, untruncateYear);\n        case \"yyyy\":\n          return intUnit(four);\n        case \"yyyyy\":\n          return intUnit(fourToSix);\n        case \"yyyyyy\":\n          return intUnit(six);\n        // months\n        case \"M\":\n          return intUnit(oneOrTwo);\n        case \"MM\":\n          return intUnit(two);\n        case \"MMM\":\n          return oneOf(loc.months(\"short\", true), 1);\n        case \"MMMM\":\n          return oneOf(loc.months(\"long\", true), 1);\n        case \"L\":\n          return intUnit(oneOrTwo);\n        case \"LL\":\n          return intUnit(two);\n        case \"LLL\":\n          return oneOf(loc.months(\"short\", false), 1);\n        case \"LLLL\":\n          return oneOf(loc.months(\"long\", false), 1);\n        // dates\n        case \"d\":\n          return intUnit(oneOrTwo);\n        case \"dd\":\n          return intUnit(two);\n        // ordinals\n        case \"o\":\n          return intUnit(oneToThree);\n        case \"ooo\":\n          return intUnit(three);\n        // time\n        case \"HH\":\n          return intUnit(two);\n        case \"H\":\n          return intUnit(oneOrTwo);\n        case \"hh\":\n          return intUnit(two);\n        case \"h\":\n          return intUnit(oneOrTwo);\n        case \"mm\":\n          return intUnit(two);\n        case \"m\":\n          return intUnit(oneOrTwo);\n        case \"q\":\n          return intUnit(oneOrTwo);\n        case \"qq\":\n          return intUnit(two);\n        case \"s\":\n          return intUnit(oneOrTwo);\n        case \"ss\":\n          return intUnit(two);\n        case \"S\":\n          return intUnit(oneToThree);\n        case \"SSS\":\n          return intUnit(three);\n        case \"u\":\n          return simple(oneToNine);\n        case \"uu\":\n          return simple(oneOrTwo);\n        case \"uuu\":\n          return intUnit(one);\n        // meridiem\n        case \"a\":\n          return oneOf(loc.meridiems(), 0);\n        // weekYear (k)\n        case \"kkkk\":\n          return intUnit(four);\n        case \"kk\":\n          return intUnit(twoToFour, untruncateYear);\n        // weekNumber (W)\n        case \"W\":\n          return intUnit(oneOrTwo);\n        case \"WW\":\n          return intUnit(two);\n        // weekdays\n        case \"E\":\n        case \"c\":\n          return intUnit(one);\n        case \"EEE\":\n          return oneOf(loc.weekdays(\"short\", false), 1);\n        case \"EEEE\":\n          return oneOf(loc.weekdays(\"long\", false), 1);\n        case \"ccc\":\n          return oneOf(loc.weekdays(\"short\", true), 1);\n        case \"cccc\":\n          return oneOf(loc.weekdays(\"long\", true), 1);\n        // offset/zone\n        case \"Z\":\n        case \"ZZ\":\n          return offset(new RegExp(\"([+-]\" + oneOrTwo.source + \")(?::(\" + two.source + \"))?\"), 2);\n        case \"ZZZ\":\n          return offset(new RegExp(\"([+-]\" + oneOrTwo.source + \")(\" + two.source + \")?\"), 2);\n        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\n        // because we don't have any way to figure out what they are\n        case \"z\":\n          return simple(/[a-z_+-/]{1,256}?/i);\n        // this special-case \"token\" represents a place where a macro-token expanded into a white-space literal\n        // in this case we accept any non-newline white-space\n        case \" \":\n          return simple(/[^\\S\\n\\r]/);\n        default:\n          return literal(t);\n      }\n    };\n  var unit = unitate(token) || {\n    invalidReason: MISSING_FTP\n  };\n  unit.token = token;\n  return unit;\n}\nvar partTypeStyleToTokenVal = {\n  year: {\n    \"2-digit\": \"yy\",\n    numeric: \"yyyyy\"\n  },\n  month: {\n    numeric: \"M\",\n    \"2-digit\": \"MM\",\n    short: \"MMM\",\n    long: \"MMMM\"\n  },\n  day: {\n    numeric: \"d\",\n    \"2-digit\": \"dd\"\n  },\n  weekday: {\n    short: \"EEE\",\n    long: \"EEEE\"\n  },\n  dayperiod: \"a\",\n  dayPeriod: \"a\",\n  hour12: {\n    numeric: \"h\",\n    \"2-digit\": \"hh\"\n  },\n  hour24: {\n    numeric: \"H\",\n    \"2-digit\": \"HH\"\n  },\n  minute: {\n    numeric: \"m\",\n    \"2-digit\": \"mm\"\n  },\n  second: {\n    numeric: \"s\",\n    \"2-digit\": \"ss\"\n  },\n  timeZoneName: {\n    long: \"ZZZZZ\",\n    short: \"ZZZ\"\n  }\n};\nfunction tokenForPart(part, formatOpts, resolvedOpts) {\n  var type = part.type,\n    value = part.value;\n  if (type === \"literal\") {\n    var isSpace = /^\\s+$/.test(value);\n    return {\n      literal: !isSpace,\n      val: isSpace ? \" \" : value\n    };\n  }\n  var style = formatOpts[type];\n\n  // The user might have explicitly specified hour12 or hourCycle\n  // if so, respect their decision\n  // if not, refer back to the resolvedOpts, which are based on the locale\n  var actualType = type;\n  if (type === \"hour\") {\n    if (formatOpts.hour12 != null) {\n      actualType = formatOpts.hour12 ? \"hour12\" : \"hour24\";\n    } else if (formatOpts.hourCycle != null) {\n      if (formatOpts.hourCycle === \"h11\" || formatOpts.hourCycle === \"h12\") {\n        actualType = \"hour12\";\n      } else {\n        actualType = \"hour24\";\n      }\n    } else {\n      // tokens only differentiate between 24 hours or not,\n      // so we do not need to check hourCycle here, which is less supported anyways\n      actualType = resolvedOpts.hour12 ? \"hour12\" : \"hour24\";\n    }\n  }\n  var val = partTypeStyleToTokenVal[actualType];\n  if (typeof val === \"object\") {\n    val = val[style];\n  }\n  if (val) {\n    return {\n      literal: false,\n      val: val\n    };\n  }\n  return undefined;\n}\nfunction buildRegex(units) {\n  var re = units.map(function (u) {\n    return u.regex;\n  }).reduce(function (f, r) {\n    return f + \"(\" + r.source + \")\";\n  }, \"\");\n  return [\"^\" + re + \"$\", units];\n}\nfunction match(input, regex, handlers) {\n  var matches = input.match(regex);\n  if (matches) {\n    var all = {};\n    var matchIndex = 1;\n    for (var i in handlers) {\n      if (hasOwnProperty(handlers, i)) {\n        var h = handlers[i],\n          groups = h.groups ? h.groups + 1 : 1;\n        if (!h.literal && h.token) {\n          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\n        }\n        matchIndex += groups;\n      }\n    }\n    return [matches, all];\n  } else {\n    return [matches, {}];\n  }\n}\nfunction dateTimeFromMatches(matches) {\n  var toField = function toField(token) {\n    switch (token) {\n      case \"S\":\n        return \"millisecond\";\n      case \"s\":\n        return \"second\";\n      case \"m\":\n        return \"minute\";\n      case \"h\":\n      case \"H\":\n        return \"hour\";\n      case \"d\":\n        return \"day\";\n      case \"o\":\n        return \"ordinal\";\n      case \"L\":\n      case \"M\":\n        return \"month\";\n      case \"y\":\n        return \"year\";\n      case \"E\":\n      case \"c\":\n        return \"weekday\";\n      case \"W\":\n        return \"weekNumber\";\n      case \"k\":\n        return \"weekYear\";\n      case \"q\":\n        return \"quarter\";\n      default:\n        return null;\n    }\n  };\n  var zone = null;\n  var specificOffset;\n  if (!isUndefined(matches.z)) {\n    zone = IANAZone.create(matches.z);\n  }\n  if (!isUndefined(matches.Z)) {\n    if (!zone) {\n      zone = new FixedOffsetZone(matches.Z);\n    }\n    specificOffset = matches.Z;\n  }\n  if (!isUndefined(matches.q)) {\n    matches.M = (matches.q - 1) * 3 + 1;\n  }\n  if (!isUndefined(matches.h)) {\n    if (matches.h < 12 && matches.a === 1) {\n      matches.h += 12;\n    } else if (matches.h === 12 && matches.a === 0) {\n      matches.h = 0;\n    }\n  }\n  if (matches.G === 0 && matches.y) {\n    matches.y = -matches.y;\n  }\n  if (!isUndefined(matches.u)) {\n    matches.S = parseMillis(matches.u);\n  }\n  var vals = Object.keys(matches).reduce(function (r, k) {\n    var f = toField(k);\n    if (f) {\n      r[f] = matches[k];\n    }\n    return r;\n  }, {});\n  return [vals, zone, specificOffset];\n}\nvar dummyDateTimeCache = null;\nfunction getDummyDateTime() {\n  if (!dummyDateTimeCache) {\n    dummyDateTimeCache = DateTime.fromMillis(1555555555555);\n  }\n  return dummyDateTimeCache;\n}\nfunction maybeExpandMacroToken(token, locale) {\n  if (token.literal) {\n    return token;\n  }\n  var formatOpts = Formatter.macroTokenToFormatOpts(token.val);\n  var tokens = formatOptsToTokens(formatOpts, locale);\n  if (tokens == null || tokens.includes(undefined)) {\n    return token;\n  }\n  return tokens;\n}\nfunction expandMacroTokens(tokens, locale) {\n  var _Array$prototype;\n  return (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, tokens.map(function (t) {\n    return maybeExpandMacroToken(t, locale);\n  }));\n}\n\n/**\n * @private\n */\n\nvar TokenParser = /*#__PURE__*/function () {\n  function TokenParser(locale, format) {\n    this.locale = locale;\n    this.format = format;\n    this.tokens = expandMacroTokens(Formatter.parseFormat(format), locale);\n    this.units = this.tokens.map(function (t) {\n      return unitForToken(t, locale);\n    });\n    this.disqualifyingUnit = this.units.find(function (t) {\n      return t.invalidReason;\n    });\n    if (!this.disqualifyingUnit) {\n      var _buildRegex = buildRegex(this.units),\n        regexString = _buildRegex[0],\n        handlers = _buildRegex[1];\n      this.regex = RegExp(regexString, \"i\");\n      this.handlers = handlers;\n    }\n  }\n  var _proto = TokenParser.prototype;\n  _proto.explainFromTokens = function explainFromTokens(input) {\n    if (!this.isValid) {\n      return {\n        input: input,\n        tokens: this.tokens,\n        invalidReason: this.invalidReason\n      };\n    } else {\n      var _match = match(input, this.regex, this.handlers),\n        rawMatches = _match[0],\n        matches = _match[1],\n        _ref6 = matches ? dateTimeFromMatches(matches) : [null, null, undefined],\n        result = _ref6[0],\n        zone = _ref6[1],\n        specificOffset = _ref6[2];\n      if (hasOwnProperty(matches, \"a\") && hasOwnProperty(matches, \"H\")) {\n        throw new ConflictingSpecificationError(\"Can't include meridiem when specifying 24-hour format\");\n      }\n      return {\n        input: input,\n        tokens: this.tokens,\n        regex: this.regex,\n        rawMatches: rawMatches,\n        matches: matches,\n        result: result,\n        zone: zone,\n        specificOffset: specificOffset\n      };\n    }\n  };\n  _createClass(TokenParser, [{\n    key: \"isValid\",\n    get: function get() {\n      return !this.disqualifyingUnit;\n    }\n  }, {\n    key: \"invalidReason\",\n    get: function get() {\n      return this.disqualifyingUnit ? this.disqualifyingUnit.invalidReason : null;\n    }\n  }]);\n  return TokenParser;\n}();\nfunction explainFromTokens(locale, input, format) {\n  var parser = new TokenParser(locale, format);\n  return parser.explainFromTokens(input);\n}\nfunction parseFromTokens(locale, input, format) {\n  var _explainFromTokens = explainFromTokens(locale, input, format),\n    result = _explainFromTokens.result,\n    zone = _explainFromTokens.zone,\n    specificOffset = _explainFromTokens.specificOffset,\n    invalidReason = _explainFromTokens.invalidReason;\n  return [result, zone, specificOffset, invalidReason];\n}\nfunction formatOptsToTokens(formatOpts, locale) {\n  if (!formatOpts) {\n    return null;\n  }\n  var formatter = Formatter.create(locale, formatOpts);\n  var df = formatter.dtFormatter(getDummyDateTime());\n  var parts = df.formatToParts();\n  var resolvedOpts = df.resolvedOptions();\n  return parts.map(function (p) {\n    return tokenForPart(p, formatOpts, resolvedOpts);\n  });\n}\n\nvar INVALID = \"Invalid DateTime\";\nvar MAX_DATE = 8.64e15;\nfunction unsupportedZone(zone) {\n  return new Invalid(\"unsupported zone\", \"the zone \\\"\" + zone.name + \"\\\" is not supported\");\n}\n\n// we cache week data on the DT object and this intermediates the cache\n/**\n * @param {DateTime} dt\n */\nfunction possiblyCachedWeekData(dt) {\n  if (dt.weekData === null) {\n    dt.weekData = gregorianToWeek(dt.c);\n  }\n  return dt.weekData;\n}\n\n/**\n * @param {DateTime} dt\n */\nfunction possiblyCachedLocalWeekData(dt) {\n  if (dt.localWeekData === null) {\n    dt.localWeekData = gregorianToWeek(dt.c, dt.loc.getMinDaysInFirstWeek(), dt.loc.getStartOfWeek());\n  }\n  return dt.localWeekData;\n}\n\n// clone really means, \"make a new object with these modifications\". all \"setters\" really use this\n// to create a new object while only changing some of the properties\nfunction clone(inst, alts) {\n  var current = {\n    ts: inst.ts,\n    zone: inst.zone,\n    c: inst.c,\n    o: inst.o,\n    loc: inst.loc,\n    invalid: inst.invalid\n  };\n  return new DateTime(_extends({}, current, alts, {\n    old: current\n  }));\n}\n\n// find the right offset a given local time. The o input is our guess, which determines which\n// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)\nfunction fixOffset(localTS, o, tz) {\n  // Our UTC time is just a guess because our offset is just a guess\n  var utcGuess = localTS - o * 60 * 1000;\n\n  // Test whether the zone matches the offset for this ts\n  var o2 = tz.offset(utcGuess);\n\n  // If so, offset didn't change and we're done\n  if (o === o2) {\n    return [utcGuess, o];\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= (o2 - o) * 60 * 1000;\n\n  // If that gives us the local time we want, we're done\n  var o3 = tz.offset(utcGuess);\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  }\n\n  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n}\n\n// convert an epoch timestamp into a calendar object with the given offset\nfunction tsToObj(ts, offset) {\n  ts += offset * 60 * 1000;\n  var d = new Date(ts);\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds()\n  };\n}\n\n// convert a calendar object to a epoch timestamp\nfunction objToTS(obj, offset, zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n}\n\n// create a new DT instance by adding a duration, adjusting for DSTs\nfunction adjustTime(inst, dur) {\n  var oPre = inst.o,\n    year = inst.c.year + Math.trunc(dur.years),\n    month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,\n    c = _extends({}, inst.c, {\n      year: year,\n      month: month,\n      day: Math.min(inst.c.day, daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7\n    }),\n    millisToAdd = Duration.fromObject({\n      years: dur.years - Math.trunc(dur.years),\n      quarters: dur.quarters - Math.trunc(dur.quarters),\n      months: dur.months - Math.trunc(dur.months),\n      weeks: dur.weeks - Math.trunc(dur.weeks),\n      days: dur.days - Math.trunc(dur.days),\n      hours: dur.hours,\n      minutes: dur.minutes,\n      seconds: dur.seconds,\n      milliseconds: dur.milliseconds\n    }).as(\"milliseconds\"),\n    localTS = objToLocalTS(c);\n  var _fixOffset = fixOffset(localTS, oPre, inst.zone),\n    ts = _fixOffset[0],\n    o = _fixOffset[1];\n  if (millisToAdd !== 0) {\n    ts += millisToAdd;\n    // that could have changed the offset by going over a DST, but we want to keep the ts the same\n    o = inst.zone.offset(ts);\n  }\n  return {\n    ts: ts,\n    o: o\n  };\n}\n\n// helper useful in turning the results of parsing into real dates\n// by handling the zone options\nfunction parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {\n  var setZone = opts.setZone,\n    zone = opts.zone;\n  if (parsed && Object.keys(parsed).length !== 0 || parsedZone) {\n    var interpretationZone = parsedZone || zone,\n      inst = DateTime.fromObject(parsed, _extends({}, opts, {\n        zone: interpretationZone,\n        specificOffset: specificOffset\n      }));\n    return setZone ? inst : inst.setZone(zone);\n  } else {\n    return DateTime.invalid(new Invalid(\"unparsable\", \"the input \\\"\" + text + \"\\\" can't be parsed as \" + format));\n  }\n}\n\n// if you want to output a technical format (e.g. RFC 2822), this helper\n// helps handle the details\nfunction toTechFormat(dt, format, allowZ) {\n  if (allowZ === void 0) {\n    allowZ = true;\n  }\n  return dt.isValid ? Formatter.create(Locale.create(\"en-US\"), {\n    allowZ: allowZ,\n    forceSimple: true\n  }).formatDateTimeFromString(dt, format) : null;\n}\nfunction _toISODate(o, extended) {\n  var longFormat = o.c.year > 9999 || o.c.year < 0;\n  var c = \"\";\n  if (longFormat && o.c.year >= 0) c += \"+\";\n  c += padStart(o.c.year, longFormat ? 6 : 4);\n  if (extended) {\n    c += \"-\";\n    c += padStart(o.c.month);\n    c += \"-\";\n    c += padStart(o.c.day);\n  } else {\n    c += padStart(o.c.month);\n    c += padStart(o.c.day);\n  }\n  return c;\n}\nfunction _toISOTime(o, extended, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone) {\n  var c = padStart(o.c.hour);\n  if (extended) {\n    c += \":\";\n    c += padStart(o.c.minute);\n    if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {\n      c += \":\";\n    }\n  } else {\n    c += padStart(o.c.minute);\n  }\n  if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {\n    c += padStart(o.c.second);\n    if (o.c.millisecond !== 0 || !suppressMilliseconds) {\n      c += \".\";\n      c += padStart(o.c.millisecond, 3);\n    }\n  }\n  if (includeOffset) {\n    if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {\n      c += \"Z\";\n    } else if (o.o < 0) {\n      c += \"-\";\n      c += padStart(Math.trunc(-o.o / 60));\n      c += \":\";\n      c += padStart(Math.trunc(-o.o % 60));\n    } else {\n      c += \"+\";\n      c += padStart(Math.trunc(o.o / 60));\n      c += \":\";\n      c += padStart(Math.trunc(o.o % 60));\n    }\n  }\n  if (extendedZone) {\n    c += \"[\" + o.zone.ianaName + \"]\";\n  }\n  return c;\n}\n\n// defaults for unspecified units in the supported calendars\nvar defaultUnitValues = {\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultWeekUnitValues = {\n    weekNumber: 1,\n    weekday: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultOrdinalUnitValues = {\n    ordinal: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  };\n\n// Units in the supported calendars, sorted by bigness\nvar orderedUnits = [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\"],\n  orderedWeekUnits = [\"weekYear\", \"weekNumber\", \"weekday\", \"hour\", \"minute\", \"second\", \"millisecond\"],\n  orderedOrdinalUnits = [\"year\", \"ordinal\", \"hour\", \"minute\", \"second\", \"millisecond\"];\n\n// standardize case and plurality in units\nfunction normalizeUnit(unit) {\n  var normalized = {\n    year: \"year\",\n    years: \"year\",\n    month: \"month\",\n    months: \"month\",\n    day: \"day\",\n    days: \"day\",\n    hour: \"hour\",\n    hours: \"hour\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    quarter: \"quarter\",\n    quarters: \"quarter\",\n    second: \"second\",\n    seconds: \"second\",\n    millisecond: \"millisecond\",\n    milliseconds: \"millisecond\",\n    weekday: \"weekday\",\n    weekdays: \"weekday\",\n    weeknumber: \"weekNumber\",\n    weeksnumber: \"weekNumber\",\n    weeknumbers: \"weekNumber\",\n    weekyear: \"weekYear\",\n    weekyears: \"weekYear\",\n    ordinal: \"ordinal\"\n  }[unit.toLowerCase()];\n  if (!normalized) throw new InvalidUnitError(unit);\n  return normalized;\n}\nfunction normalizeUnitWithLocalWeeks(unit) {\n  switch (unit.toLowerCase()) {\n    case \"localweekday\":\n    case \"localweekdays\":\n      return \"localWeekday\";\n    case \"localweeknumber\":\n    case \"localweeknumbers\":\n      return \"localWeekNumber\";\n    case \"localweekyear\":\n    case \"localweekyears\":\n      return \"localWeekYear\";\n    default:\n      return normalizeUnit(unit);\n  }\n}\n\n// cache offsets for zones based on the current timestamp when this function is\n// first called. When we are handling a datetime from components like (year,\n// month, day, hour) in a time zone, we need a guess about what the timezone\n// offset is so that we can convert into a UTC timestamp. One way is to find the\n// offset of now in the zone. The actual date may have a different offset (for\n// example, if we handle a date in June while we're in December in a zone that\n// observes DST), but we can check and adjust that.\n//\n// When handling many dates, calculating the offset for now every time is\n// expensive. It's just a guess, so we can cache the offset to use even if we\n// are right on a time change boundary (we'll just correct in the other\n// direction). Using a timestamp from first read is a slight optimization for\n// handling dates close to the current date, since those dates will usually be\n// in the same offset (we could set the timestamp statically, instead). We use a\n// single timestamp for all zones to make things a bit more predictable.\n//\n// This is safe for quickDT (used by local() and utc()) because we don't fill in\n// higher-order units from tsNow (as we do in fromObject, this requires that\n// offset is calculated from tsNow).\nfunction guessOffsetForZone(zone) {\n  if (!zoneOffsetGuessCache[zone]) {\n    if (zoneOffsetTs === undefined) {\n      zoneOffsetTs = Settings.now();\n    }\n    zoneOffsetGuessCache[zone] = zone.offset(zoneOffsetTs);\n  }\n  return zoneOffsetGuessCache[zone];\n}\n\n// this is a dumbed down version of fromObject() that runs about 60% faster\n// but doesn't do any validation, makes a bunch of assumptions about what units\n// are present, and so on.\nfunction quickDT(obj, opts) {\n  var zone = normalizeZone(opts.zone, Settings.defaultZone);\n  if (!zone.isValid) {\n    return DateTime.invalid(unsupportedZone(zone));\n  }\n  var loc = Locale.fromObject(opts);\n  var ts, o;\n\n  // assume we have the higher-order units\n  if (!isUndefined(obj.year)) {\n    for (var _i = 0, _orderedUnits = orderedUnits; _i < _orderedUnits.length; _i++) {\n      var u = _orderedUnits[_i];\n      if (isUndefined(obj[u])) {\n        obj[u] = defaultUnitValues[u];\n      }\n    }\n    var invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    }\n    var offsetProvis = guessOffsetForZone(zone);\n    var _objToTS = objToTS(obj, offsetProvis, zone);\n    ts = _objToTS[0];\n    o = _objToTS[1];\n  } else {\n    ts = Settings.now();\n  }\n  return new DateTime({\n    ts: ts,\n    zone: zone,\n    loc: loc,\n    o: o\n  });\n}\nfunction diffRelative(start, end, opts) {\n  var round = isUndefined(opts.round) ? true : opts.round,\n    format = function format(c, unit) {\n      c = roundTo(c, round || opts.calendary ? 0 : 2, true);\n      var formatter = end.loc.clone(opts).relFormatter(opts);\n      return formatter.format(c, unit);\n    },\n    differ = function differ(unit) {\n      if (opts.calendary) {\n        if (!end.hasSame(start, unit)) {\n          return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);\n        } else return 0;\n      } else {\n        return end.diff(start, unit).get(unit);\n      }\n    };\n  if (opts.unit) {\n    return format(differ(opts.unit), opts.unit);\n  }\n  for (var _iterator = _createForOfIteratorHelperLoose(opts.units), _step; !(_step = _iterator()).done;) {\n    var unit = _step.value;\n    var count = differ(unit);\n    if (Math.abs(count) >= 1) {\n      return format(count, unit);\n    }\n  }\n  return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);\n}\nfunction lastOpts(argList) {\n  var opts = {},\n    args;\n  if (argList.length > 0 && typeof argList[argList.length - 1] === \"object\") {\n    opts = argList[argList.length - 1];\n    args = Array.from(argList).slice(0, argList.length - 1);\n  } else {\n    args = Array.from(argList);\n  }\n  return [opts, args];\n}\n\n/**\n * Timestamp to use for cached zone offset guesses (exposed for test)\n */\nvar zoneOffsetTs;\n/**\n * Cache for zone offset guesses (exposed for test).\n *\n * This optimizes quickDT via guessOffsetForZone to avoid repeated calls of\n * zone.offset().\n */\nvar zoneOffsetGuessCache = {};\n\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},\n * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.\n * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime.plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.\n * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.\n *\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\nvar DateTime = /*#__PURE__*/function (_Symbol$for) {\n  /**\n   * @access private\n   */\n  function DateTime(config) {\n    var zone = config.zone || Settings.defaultZone;\n    var invalid = config.invalid || (Number.isNaN(config.ts) ? new Invalid(\"invalid input\") : null) || (!zone.isValid ? unsupportedZone(zone) : null);\n    /**\n     * @access private\n     */\n    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;\n    var c = null,\n      o = null;\n    if (!invalid) {\n      var unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);\n      if (unchanged) {\n        var _ref = [config.old.c, config.old.o];\n        c = _ref[0];\n        o = _ref[1];\n      } else {\n        // If an offset has been passed and we have not been called from\n        // clone(), we can trust it and avoid the offset calculation.\n        var ot = isNumber(config.o) && !config.old ? config.o : zone.offset(this.ts);\n        c = tsToObj(this.ts, ot);\n        invalid = Number.isNaN(c.year) ? new Invalid(\"invalid input\") : null;\n        c = invalid ? null : c;\n        o = invalid ? null : ot;\n      }\n    }\n\n    /**\n     * @access private\n     */\n    this._zone = zone;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.invalid = invalid;\n    /**\n     * @access private\n     */\n    this.weekData = null;\n    /**\n     * @access private\n     */\n    this.localWeekData = null;\n    /**\n     * @access private\n     */\n    this.c = c;\n    /**\n     * @access private\n     */\n    this.o = o;\n    /**\n     * @access private\n     */\n    this.isLuxonDateTime = true;\n  }\n\n  // CONSTRUCT\n\n  /**\n   * Create a DateTime for the current instant, in the system's time zone.\n   *\n   * Use Settings to override these default values if needed.\n   * @example DateTime.now().toISO() //~> now in the ISO format\n   * @return {DateTime}\n   */\n  DateTime.now = function now() {\n    return new DateTime({});\n  }\n\n  /**\n   * Create a local DateTime\n   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month, 1-indexed\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @example DateTime.local()                                  //~> now\n   * @example DateTime.local({ zone: \"America/New_York\" })      //~> now, in US east coast time\n   * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12, { locale: \"fr\" })     //~> 2017-03-12T00:00:00, with a French locale\n   * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, { zone: \"utc\" })   //~> 2017-03-12T05:00:00, in UTC\n   * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765\n   * @return {DateTime}\n   */;\n  DateTime.local = function local() {\n    var _lastOpts = lastOpts(arguments),\n      opts = _lastOpts[0],\n      args = _lastOpts[1],\n      year = args[0],\n      month = args[1],\n      day = args[2],\n      hour = args[3],\n      minute = args[4],\n      second = args[5],\n      millisecond = args[6];\n    return quickDT({\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: second,\n      millisecond: millisecond\n    }, opts);\n  }\n\n  /**\n   * Create a DateTime in UTC\n   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {string} [options.weekSettings] - the week settings to set on the resulting DateTime instance\n   * @example DateTime.utc()                                              //~> now\n   * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: \"fr\" })          //~> 2017-03-12T05:45:00Z with a French locale\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: \"fr\" }) //~> 2017-03-12T05:45:10.765Z with a French locale\n   * @return {DateTime}\n   */;\n  DateTime.utc = function utc() {\n    var _lastOpts2 = lastOpts(arguments),\n      opts = _lastOpts2[0],\n      args = _lastOpts2[1],\n      year = args[0],\n      month = args[1],\n      day = args[2],\n      hour = args[3],\n      minute = args[4],\n      second = args[5],\n      millisecond = args[6];\n    opts.zone = FixedOffsetZone.utcInstance;\n    return quickDT({\n      year: year,\n      month: month,\n      day: day,\n      hour: hour,\n      minute: minute,\n      second: second,\n      millisecond: millisecond\n    }, opts);\n  }\n\n  /**\n   * Create a DateTime from a JavaScript Date object. Uses the default zone.\n   * @param {Date} date - a JavaScript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @return {DateTime}\n   */;\n  DateTime.fromJSDate = function fromJSDate(date, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var ts = isDate(date) ? date.valueOf() : NaN;\n    if (Number.isNaN(ts)) {\n      return DateTime.invalid(\"invalid input\");\n    }\n    var zoneToUse = normalizeZone(options.zone, Settings.defaultZone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n    return new DateTime({\n      ts: ts,\n      zone: zoneToUse,\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  /**\n   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance\n   * @return {DateTime}\n   */;\n  DateTime.fromMillis = function fromMillis(milliseconds, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (!isNumber(milliseconds)) {\n      throw new InvalidArgumentError(\"fromMillis requires a numerical input, but received a \" + typeof milliseconds + \" with value \" + milliseconds);\n    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {\n      // this isn't perfect because we can still end up out of range because of additional shifting, but it's a start\n      return DateTime.invalid(\"Timestamp out of range\");\n    } else {\n      return new DateTime({\n        ts: milliseconds,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options)\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} seconds - a number of seconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance\n   * @return {DateTime}\n   */;\n  DateTime.fromSeconds = function fromSeconds(seconds, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (!isNumber(seconds)) {\n      throw new InvalidArgumentError(\"fromSeconds requires a numerical input\");\n    } else {\n      return new DateTime({\n        ts: seconds * 1000,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options)\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.localWeekYear - a week year, according to the locale\n   * @param {number} obj.localWeekNumber - a week number, between 1 and 52 or 53, depending on the year, according to the locale\n   * @param {number} obj.localWeekday - a weekday, 1-7, where 1 is the first and 7 is the last day of the week, according to the locale\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {Object} opts - options for creating this DateTime\n   * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [opts.locale='system\\'s locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\n   * @example DateTime.fromObject({ localWeekYear: 2022, localWeekNumber: 1, localWeekday: 1 }, { locale: \"en-US\" }).toISODate() //=> '2021-12-26'\n   * @return {DateTime}\n   */;\n  DateTime.fromObject = function fromObject(obj, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    obj = obj || {};\n    var zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n    var loc = Locale.fromObject(opts);\n    var normalized = normalizeObject(obj, normalizeUnitWithLocalWeeks);\n    var _usesLocalWeekValues = usesLocalWeekValues(normalized, loc),\n      minDaysInFirstWeek = _usesLocalWeekValues.minDaysInFirstWeek,\n      startOfWeek = _usesLocalWeekValues.startOfWeek;\n    var tsNow = Settings.now(),\n      offsetProvis = !isUndefined(opts.specificOffset) ? opts.specificOffset : zoneToUse.offset(tsNow),\n      containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber;\n\n    // cases:\n    // just a weekday -> this week's instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\"Can't mix weekYear/weekNumber units with year/month/day or ordinals\");\n    }\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n    var useWeekData = definiteWeekDef || normalized.weekday && !containsGregor;\n\n    // configure ourselves to deal with gregorian dates or week stuff\n    var units,\n      defaultValues,\n      objNow = tsToObj(tsNow, offsetProvis);\n    if (useWeekData) {\n      units = orderedWeekUnits;\n      defaultValues = defaultWeekUnitValues;\n      objNow = gregorianToWeek(objNow, minDaysInFirstWeek, startOfWeek);\n    } else if (containsOrdinal) {\n      units = orderedOrdinalUnits;\n      defaultValues = defaultOrdinalUnitValues;\n      objNow = gregorianToOrdinal(objNow);\n    } else {\n      units = orderedUnits;\n      defaultValues = defaultUnitValues;\n    }\n\n    // set default values for missing stuff\n    var foundFirst = false;\n    for (var _iterator2 = _createForOfIteratorHelperLoose(units), _step2; !(_step2 = _iterator2()).done;) {\n      var u = _step2.value;\n      var v = normalized[u];\n      if (!isUndefined(v)) {\n        foundFirst = true;\n      } else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      } else {\n        normalized[u] = objNow[u];\n      }\n    }\n\n    // make sure the values we have are in range\n    var higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized, minDaysInFirstWeek, startOfWeek) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized),\n      invalid = higherOrderInvalid || hasInvalidTimeData(normalized);\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    }\n\n    // compute the actual time\n    var gregorian = useWeekData ? weekToGregorian(normalized, minDaysInFirstWeek, startOfWeek) : containsOrdinal ? ordinalToGregorian(normalized) : normalized,\n      _objToTS2 = objToTS(gregorian, offsetProvis, zoneToUse),\n      tsFinal = _objToTS2[0],\n      offsetFinal = _objToTS2[1],\n      inst = new DateTime({\n        ts: tsFinal,\n        zone: zoneToUse,\n        o: offsetFinal,\n        loc: loc\n      });\n\n    // gregorian data + weekday serves only to validate\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\n      return DateTime.invalid(\"mismatched weekday\", \"you can't specify both a weekday of \" + normalized.weekday + \" and a date of \" + inst.toISO());\n    }\n    if (!inst.isValid) {\n      return DateTime.invalid(inst.invalid);\n    }\n    return inst;\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {string} [opts.weekSettings] - the week settings to set on the resulting DateTime instance\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})\n   * @example DateTime.fromISO('2016-W05-4')\n   * @return {DateTime}\n   */;\n  DateTime.fromISO = function fromISO(text, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var _parseISODate = parseISODate(text),\n      vals = _parseISODate[0],\n      parsedZone = _parseISODate[1];\n    return parseDataToDateTime(vals, parsedZone, opts, \"ISO 8601\", text);\n  }\n\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\n   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\n   * @return {DateTime}\n   */;\n  DateTime.fromRFC2822 = function fromRFC2822(text, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var _parseRFC2822Date = parseRFC2822Date(text),\n      vals = _parseRFC2822Date[0],\n      parsedZone = _parseRFC2822Date[1];\n    return parseDataToDateTime(vals, parsedZone, opts, \"RFC 2822\", text);\n  }\n\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\n   * @return {DateTime}\n   */;\n  DateTime.fromHTTP = function fromHTTP(text, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var _parseHTTPDate = parseHTTPDate(text),\n      vals = _parseHTTPDate[0],\n      parsedZone = _parseHTTPDate[1];\n    return parseDataToDateTime(vals, parsedZone, opts, \"HTTP\", opts);\n  }\n\n  /**\n   * Create a DateTime from an input string and format string.\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @return {DateTime}\n   */;\n  DateTime.fromFormat = function fromFormat(text, fmt, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    if (isUndefined(text) || isUndefined(fmt)) {\n      throw new InvalidArgumentError(\"fromFormat requires an input string and a format\");\n    }\n    var _opts = opts,\n      _opts$locale = _opts.locale,\n      locale = _opts$locale === void 0 ? null : _opts$locale,\n      _opts$numberingSystem = _opts.numberingSystem,\n      numberingSystem = _opts$numberingSystem === void 0 ? null : _opts$numberingSystem,\n      localeToUse = Locale.fromOpts({\n        locale: locale,\n        numberingSystem: numberingSystem,\n        defaultToEN: true\n      }),\n      _parseFromTokens = parseFromTokens(localeToUse, text, fmt),\n      vals = _parseFromTokens[0],\n      parsedZone = _parseFromTokens[1],\n      specificOffset = _parseFromTokens[2],\n      invalid = _parseFromTokens[3];\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    } else {\n      return parseDataToDateTime(vals, parsedZone, opts, \"format \" + fmt, text, specificOffset);\n    }\n  }\n\n  /**\n   * @deprecated use fromFormat instead\n   */;\n  DateTime.fromString = function fromString(text, fmt, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return DateTime.fromFormat(text, fmt, opts);\n  }\n\n  /**\n   * Create a DateTime from a SQL date, time, or datetime\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} text - the string to parse\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @example DateTime.fromSQL('2017-05-15')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })\n   * @example DateTime.fromSQL('09:12:34.342')\n   * @return {DateTime}\n   */;\n  DateTime.fromSQL = function fromSQL(text, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var _parseSQL = parseSQL(text),\n      vals = _parseSQL[0],\n      parsedZone = _parseSQL[1];\n    return parseDataToDateTime(vals, parsedZone, opts, \"SQL\", text);\n  }\n\n  /**\n   * Create an invalid DateTime.\n   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent.\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {DateTime}\n   */;\n  DateTime.invalid = function invalid(reason, explanation) {\n    if (explanation === void 0) {\n      explanation = null;\n    }\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the DateTime is invalid\");\n    }\n    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDateTimeError(invalid);\n    } else {\n      return new DateTime({\n        invalid: invalid\n      });\n    }\n  }\n\n  /**\n   * Check if an object is an instance of DateTime. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */;\n  DateTime.isDateTime = function isDateTime(o) {\n    return o && o.isLuxonDateTime || false;\n  }\n\n  /**\n   * Produce the format string for a set of options\n   * @param formatOpts\n   * @param localeOpts\n   * @returns {string}\n   */;\n  DateTime.parseFormatForOpts = function parseFormatForOpts(formatOpts, localeOpts) {\n    if (localeOpts === void 0) {\n      localeOpts = {};\n    }\n    var tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));\n    return !tokenList ? null : tokenList.map(function (t) {\n      return t ? t.val : null;\n    }).join(\"\");\n  }\n\n  /**\n   * Produce the the fully expanded format token for the locale\n   * Does NOT quote characters, so quoted tokens will not round trip correctly\n   * @param fmt\n   * @param localeOpts\n   * @returns {string}\n   */;\n  DateTime.expandFormat = function expandFormat(fmt, localeOpts) {\n    if (localeOpts === void 0) {\n      localeOpts = {};\n    }\n    var expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));\n    return expanded.map(function (t) {\n      return t.val;\n    }).join(\"\");\n  };\n  DateTime.resetCache = function resetCache() {\n    zoneOffsetTs = undefined;\n    zoneOffsetGuessCache = {};\n  }\n\n  // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\n   * @return {number}\n   */;\n  var _proto = DateTime.prototype;\n  _proto.get = function get(unit) {\n    return this[unit];\n  }\n\n  /**\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\n   * * The DateTime was created by an operation on another invalid date\n   * @type {boolean}\n   */;\n  /**\n   * Get those DateTimes which have the same local time as this DateTime, but a different offset from UTC\n   * in this DateTime's zone. During DST changes local time can be ambiguous, for example\n   * `2023-10-29T02:30:00` in `Europe/Berlin` can have offset `+01:00` or `+02:00`.\n   * This method will return both possible DateTimes if this DateTime's local time is ambiguous.\n   * @returns {DateTime[]}\n   */\n  _proto.getPossibleOffsets = function getPossibleOffsets() {\n    if (!this.isValid || this.isOffsetFixed) {\n      return [this];\n    }\n    var dayMs = 86400000;\n    var minuteMs = 60000;\n    var localTS = objToLocalTS(this.c);\n    var oEarlier = this.zone.offset(localTS - dayMs);\n    var oLater = this.zone.offset(localTS + dayMs);\n    var o1 = this.zone.offset(localTS - oEarlier * minuteMs);\n    var o2 = this.zone.offset(localTS - oLater * minuteMs);\n    if (o1 === o2) {\n      return [this];\n    }\n    var ts1 = localTS - o1 * minuteMs;\n    var ts2 = localTS - o2 * minuteMs;\n    var c1 = tsToObj(ts1, o1);\n    var c2 = tsToObj(ts2, o2);\n    if (c1.hour === c2.hour && c1.minute === c2.minute && c1.second === c2.second && c1.millisecond === c2.millisecond) {\n      return [clone(this, {\n        ts: ts1\n      }), clone(this, {\n        ts: ts2\n      })];\n    }\n    return [this];\n  }\n\n  /**\n   * Returns true if this DateTime is in a leap year, false otherwise\n   * @example DateTime.local(2016).isInLeapYear //=> true\n   * @example DateTime.local(2013).isInLeapYear //=> false\n   * @type {boolean}\n   */;\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of formatting methods\n   * @param {Object} opts - the same options as toLocaleString\n   * @return {Object}\n   */\n  _proto.resolvedLocaleOptions = function resolvedLocaleOptions(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var _Formatter$create$res = Formatter.create(this.loc.clone(opts), opts).resolvedOptions(this),\n      locale = _Formatter$create$res.locale,\n      numberingSystem = _Formatter$create$res.numberingSystem,\n      calendar = _Formatter$create$res.calendar;\n    return {\n      locale: locale,\n      numberingSystem: numberingSystem,\n      outputCalendar: calendar\n    };\n  }\n\n  // TRANSFORM\n\n  /**\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link DateTime#setZone}('utc')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {Object} [opts={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */;\n  _proto.toUTC = function toUTC(offset, opts) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n    if (opts === void 0) {\n      opts = {};\n    }\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to `setZone('local')`\n   * @return {DateTime}\n   */;\n  _proto.toLocal = function toLocal() {\n    return this.setZone(Settings.defaultZone);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */;\n  _proto.setZone = function setZone(zone, _temp) {\n    var _ref2 = _temp === void 0 ? {} : _temp,\n      _ref2$keepLocalTime = _ref2.keepLocalTime,\n      keepLocalTime = _ref2$keepLocalTime === void 0 ? false : _ref2$keepLocalTime,\n      _ref2$keepCalendarTim = _ref2.keepCalendarTime,\n      keepCalendarTime = _ref2$keepCalendarTim === void 0 ? false : _ref2$keepCalendarTim;\n    zone = normalizeZone(zone, Settings.defaultZone);\n    if (zone.equals(this.zone)) {\n      return this;\n    } else if (!zone.isValid) {\n      return DateTime.invalid(unsupportedZone(zone));\n    } else {\n      var newTS = this.ts;\n      if (keepLocalTime || keepCalendarTime) {\n        var offsetGuess = zone.offset(this.ts);\n        var asObj = this.toObject();\n        var _objToTS3 = objToTS(asObj, offsetGuess, zone);\n        newTS = _objToTS3[0];\n      }\n      return clone(this, {\n        ts: newTS,\n        zone: zone\n      });\n    }\n  }\n\n  /**\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {Object} properties - the properties to set\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })\n   * @return {DateTime}\n   */;\n  _proto.reconfigure = function reconfigure(_temp2) {\n    var _ref3 = _temp2 === void 0 ? {} : _temp2,\n      locale = _ref3.locale,\n      numberingSystem = _ref3.numberingSystem,\n      outputCalendar = _ref3.outputCalendar;\n    var loc = this.loc.clone({\n      locale: locale,\n      numberingSystem: numberingSystem,\n      outputCalendar: outputCalendar\n    });\n    return clone(this, {\n      loc: loc\n    });\n  }\n\n  /**\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')\n   * @return {DateTime}\n   */;\n  _proto.setLocale = function setLocale(locale) {\n    return this.reconfigure({\n      locale: locale\n    });\n  }\n\n  /**\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\n   * You can only set units with this method; for \"setting\" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.\n   *\n   * This method also supports setting locale-based week units, i.e. `localWeekday`, `localWeekNumber` and `localWeekYear`.\n   * They cannot be mixed with ISO-week units like `weekday`.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @return {DateTime}\n   */;\n  _proto.set = function set(values) {\n    if (!this.isValid) return this;\n    var normalized = normalizeObject(values, normalizeUnitWithLocalWeeks);\n    var _usesLocalWeekValues2 = usesLocalWeekValues(normalized, this.loc),\n      minDaysInFirstWeek = _usesLocalWeekValues2.minDaysInFirstWeek,\n      startOfWeek = _usesLocalWeekValues2.startOfWeek;\n    var settingWeekStuff = !isUndefined(normalized.weekYear) || !isUndefined(normalized.weekNumber) || !isUndefined(normalized.weekday),\n      containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber;\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\"Can't mix weekYear/weekNumber units with year/month/day or ordinals\");\n    }\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n    var mixed;\n    if (settingWeekStuff) {\n      mixed = weekToGregorian(_extends({}, gregorianToWeek(this.c, minDaysInFirstWeek, startOfWeek), normalized), minDaysInFirstWeek, startOfWeek);\n    } else if (!isUndefined(normalized.ordinal)) {\n      mixed = ordinalToGregorian(_extends({}, gregorianToOrdinal(this.c), normalized));\n    } else {\n      mixed = _extends({}, this.toObject(), normalized);\n\n      // if we didn't set the day but we ended up on an overflow date,\n      // use the last day of the right month\n      if (isUndefined(normalized.day)) {\n        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);\n      }\n    }\n    var _objToTS4 = objToTS(mixed, this.o, this.zone),\n      ts = _objToTS4[0],\n      o = _objToTS4[1];\n    return clone(this, {\n      ts: ts,\n      o: o\n    });\n  }\n\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @example DateTime.now().plus(123) //~> in 123 milliseconds\n   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday\n   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min\n   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min\n   * @return {DateTime}\n   */;\n  _proto.plus = function plus(duration) {\n    if (!this.isValid) return this;\n    var dur = Duration.fromDurationLike(duration);\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link DateTime#plus}\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   @return {DateTime}\n   */;\n  _proto.minus = function minus(duration) {\n    if (!this.isValid) return this;\n    var dur = Duration.fromDurationLike(duration).negate();\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * \"Set\" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\n   * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\n   * @return {DateTime}\n   */;\n  _proto.startOf = function startOf(unit, _temp3) {\n    var _ref4 = _temp3 === void 0 ? {} : _temp3,\n      _ref4$useLocaleWeeks = _ref4.useLocaleWeeks,\n      useLocaleWeeks = _ref4$useLocaleWeeks === void 0 ? false : _ref4$useLocaleWeeks;\n    if (!this.isValid) return this;\n    var o = {},\n      normalizedUnit = Duration.normalizeUnit(unit);\n    switch (normalizedUnit) {\n      case \"years\":\n        o.month = 1;\n      // falls through\n      case \"quarters\":\n      case \"months\":\n        o.day = 1;\n      // falls through\n      case \"weeks\":\n      case \"days\":\n        o.hour = 0;\n      // falls through\n      case \"hours\":\n        o.minute = 0;\n      // falls through\n      case \"minutes\":\n        o.second = 0;\n      // falls through\n      case \"seconds\":\n        o.millisecond = 0;\n        break;\n      // no default, invalid units throw in normalizeUnit()\n    }\n\n    if (normalizedUnit === \"weeks\") {\n      if (useLocaleWeeks) {\n        var startOfWeek = this.loc.getStartOfWeek();\n        var weekday = this.weekday;\n        if (weekday < startOfWeek) {\n          o.weekNumber = this.weekNumber - 1;\n        }\n        o.weekday = startOfWeek;\n      } else {\n        o.weekday = 1;\n      }\n    }\n    if (normalizedUnit === \"quarters\") {\n      var q = Math.ceil(this.month / 3);\n      o.month = (q - 1) * 3 + 1;\n    }\n    return this.set(o);\n  }\n\n  /**\n   * \"Set\" this DateTime to the end (meaning the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\n   * @return {DateTime}\n   */;\n  _proto.endOf = function endOf(unit, opts) {\n    var _this$plus;\n    return this.isValid ? this.plus((_this$plus = {}, _this$plus[unit] = 1, _this$plus)).startOf(unit, opts).minus(1) : this;\n  }\n\n  // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale.\n   * @param {string} fmt - the format string\n   * @param {Object} opts - opts to override the configuration options on this DateTime\n   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'\n   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'\n   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: \"fr\" }) //=> '2017 avr. 22'\n   * @example DateTime.now().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\n   * @return {string}\n   */;\n  _proto.toFormat = function toFormat(fmt, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID;\n  }\n\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation\n   * of the DateTime in the assigned locale.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options\n   * @param {Object} opts - opts to override the configuration options on this DateTime\n   * @example DateTime.now().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\n   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\n   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'\n   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\n   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\n   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'\n   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'\n   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'\n   * @return {string}\n   */;\n  _proto.toLocaleString = function toLocaleString(formatOpts, opts) {\n    if (formatOpts === void 0) {\n      formatOpts = DATE_SHORT;\n    }\n    if (opts === void 0) {\n      opts = {};\n    }\n    return this.isValid ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this) : INVALID;\n  }\n\n  /**\n   * Returns an array of format \"parts\", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.\n   * @example DateTime.now().toLocaleParts(); //=> [\n   *                                   //=>   { type: 'day', value: '25' },\n   *                                   //=>   { type: 'literal', value: '/' },\n   *                                   //=>   { type: 'month', value: '05' },\n   *                                   //=>   { type: 'literal', value: '/' },\n   *                                   //=>   { type: 'year', value: '1982' }\n   *                                   //=> ]\n   */;\n  _proto.toLocaleParts = function toLocaleParts(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.extendedZone=false] - add the time zone format extension\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\n   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'\n   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'\n   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'\n   * @return {string}\n   */;\n  _proto.toISO = function toISO(_temp4) {\n    var _ref5 = _temp4 === void 0 ? {} : _temp4,\n      _ref5$format = _ref5.format,\n      format = _ref5$format === void 0 ? \"extended\" : _ref5$format,\n      _ref5$suppressSeconds = _ref5.suppressSeconds,\n      suppressSeconds = _ref5$suppressSeconds === void 0 ? false : _ref5$suppressSeconds,\n      _ref5$suppressMillise = _ref5.suppressMilliseconds,\n      suppressMilliseconds = _ref5$suppressMillise === void 0 ? false : _ref5$suppressMillise,\n      _ref5$includeOffset = _ref5.includeOffset,\n      includeOffset = _ref5$includeOffset === void 0 ? true : _ref5$includeOffset,\n      _ref5$extendedZone = _ref5.extendedZone,\n      extendedZone = _ref5$extendedZone === void 0 ? false : _ref5$extendedZone;\n    if (!this.isValid) {\n      return null;\n    }\n    var ext = format === \"extended\";\n    var c = _toISODate(this, ext);\n    c += \"T\";\n    c += _toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);\n    return c;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\n   * @param {Object} opts - options\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'\n   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'\n   * @return {string}\n   */;\n  _proto.toISODate = function toISODate(_temp5) {\n    var _ref6 = _temp5 === void 0 ? {} : _temp5,\n      _ref6$format = _ref6.format,\n      format = _ref6$format === void 0 ? \"extended\" : _ref6$format;\n    if (!this.isValid) {\n      return null;\n    }\n    return _toISODate(this, format === \"extended\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\n   * @return {string}\n   */;\n  _proto.toISOWeekDate = function toISOWeekDate() {\n    return toTechFormat(this, \"kkkk-'W'WW-c\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.extendedZone=true] - add the time zone format extension\n   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'\n   * @return {string}\n   */;\n  _proto.toISOTime = function toISOTime(_temp6) {\n    var _ref7 = _temp6 === void 0 ? {} : _temp6,\n      _ref7$suppressMillise = _ref7.suppressMilliseconds,\n      suppressMilliseconds = _ref7$suppressMillise === void 0 ? false : _ref7$suppressMillise,\n      _ref7$suppressSeconds = _ref7.suppressSeconds,\n      suppressSeconds = _ref7$suppressSeconds === void 0 ? false : _ref7$suppressSeconds,\n      _ref7$includeOffset = _ref7.includeOffset,\n      includeOffset = _ref7$includeOffset === void 0 ? true : _ref7$includeOffset,\n      _ref7$includePrefix = _ref7.includePrefix,\n      includePrefix = _ref7$includePrefix === void 0 ? false : _ref7$includePrefix,\n      _ref7$extendedZone = _ref7.extendedZone,\n      extendedZone = _ref7$extendedZone === void 0 ? false : _ref7$extendedZone,\n      _ref7$format = _ref7.format,\n      format = _ref7$format === void 0 ? \"extended\" : _ref7$format;\n    if (!this.isValid) {\n      return null;\n    }\n    var c = includePrefix ? \"T\" : \"\";\n    return c + _toISOTime(this, format === \"extended\", suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);\n  }\n\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\n   * @return {string}\n   */;\n  _proto.toRFC2822 = function toRFC2822() {\n    return toTechFormat(this, \"EEE, dd LLL yyyy HH:mm:ss ZZZ\", false);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\n   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'\n   * @return {string}\n   */;\n  _proto.toHTTP = function toHTTP() {\n    return toTechFormat(this.toUTC(), \"EEE, dd LLL yyyy HH:mm:ss 'GMT'\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Date\n   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'\n   * @return {string}\n   */;\n  _proto.toSQLDate = function toSQLDate() {\n    if (!this.isValid) {\n      return null;\n    }\n    return _toISODate(this, true);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Time\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'\n   * @example DateTime.utc().toSQL() //=> '05:15:16.345'\n   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'\n   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'\n   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'\n   * @return {string}\n   */;\n  _proto.toSQLTime = function toSQLTime(_temp7) {\n    var _ref8 = _temp7 === void 0 ? {} : _temp7,\n      _ref8$includeOffset = _ref8.includeOffset,\n      includeOffset = _ref8$includeOffset === void 0 ? true : _ref8$includeOffset,\n      _ref8$includeZone = _ref8.includeZone,\n      includeZone = _ref8$includeZone === void 0 ? false : _ref8$includeZone,\n      _ref8$includeOffsetSp = _ref8.includeOffsetSpace,\n      includeOffsetSpace = _ref8$includeOffsetSp === void 0 ? true : _ref8$includeOffsetSp;\n    var fmt = \"HH:mm:ss.SSS\";\n    if (includeZone || includeOffset) {\n      if (includeOffsetSpace) {\n        fmt += \" \";\n      }\n      if (includeZone) {\n        fmt += \"z\";\n      } else if (includeOffset) {\n        fmt += \"ZZ\";\n      }\n    }\n    return toTechFormat(this, fmt, true);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'\n   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'\n   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'\n   * @return {string}\n   */;\n  _proto.toSQL = function toSQL(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    if (!this.isValid) {\n      return null;\n    }\n    return this.toSQLDate() + \" \" + this.toSQLTime(opts);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */;\n  _proto.toString = function toString() {\n    return this.isValid ? this.toISO() : INVALID;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for the REPL.\n   * @return {string}\n   */;\n  _proto[_Symbol$for] = function () {\n    if (this.isValid) {\n      return \"DateTime { ts: \" + this.toISO() + \", zone: \" + this.zone.name + \", locale: \" + this.locale + \" }\";\n    } else {\n      return \"DateTime { Invalid, reason: \" + this.invalidReason + \" }\";\n    }\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}\n   * @return {number}\n   */;\n  _proto.valueOf = function valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime.\n   * @return {number}\n   */;\n  _proto.toMillis = function toMillis() {\n    return this.isValid ? this.ts : NaN;\n  }\n\n  /**\n   * Returns the epoch seconds of this DateTime.\n   * @return {number}\n   */;\n  _proto.toSeconds = function toSeconds() {\n    return this.isValid ? this.ts / 1000 : NaN;\n  }\n\n  /**\n   * Returns the epoch seconds (as a whole number) of this DateTime.\n   * @return {number}\n   */;\n  _proto.toUnixInteger = function toUnixInteger() {\n    return this.isValid ? Math.floor(this.ts / 1000) : NaN;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */;\n  _proto.toJSON = function toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a BSON serializable equivalent to this DateTime.\n   * @return {Date}\n   */;\n  _proto.toBSON = function toBSON() {\n    return this.toJSDate();\n  }\n\n  /**\n   * Returns a JavaScript object with this DateTime's year, month, day, and so on.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {Object}\n   */;\n  _proto.toObject = function toObject(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    if (!this.isValid) return {};\n    var base = _extends({}, this.c);\n    if (opts.includeConfig) {\n      base.outputCalendar = this.outputCalendar;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns a JavaScript Date equivalent to this DateTime.\n   * @return {Date}\n   */;\n  _proto.toJSDate = function toJSDate() {\n    return new Date(this.isValid ? this.ts : NaN);\n  }\n\n  // COMPARE\n\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */;\n  _proto.diff = function diff(otherDateTime, unit, opts) {\n    if (unit === void 0) {\n      unit = \"milliseconds\";\n    }\n    if (opts === void 0) {\n      opts = {};\n    }\n    if (!this.isValid || !otherDateTime.isValid) {\n      return Duration.invalid(\"created by diffing an invalid DateTime\");\n    }\n    var durOpts = _extends({\n      locale: this.locale,\n      numberingSystem: this.numberingSystem\n    }, opts);\n    var units = maybeArray(unit).map(Duration.normalizeUnit),\n      otherIsLater = otherDateTime.valueOf() > this.valueOf(),\n      earlier = otherIsLater ? this : otherDateTime,\n      later = otherIsLater ? otherDateTime : this,\n      diffed = _diff(earlier, later, units, durOpts);\n    return otherIsLater ? diffed.negate() : diffed;\n  }\n\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link DateTime#diff}\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */;\n  _proto.diffNow = function diffNow(unit, opts) {\n    if (unit === void 0) {\n      unit = \"milliseconds\";\n    }\n    if (opts === void 0) {\n      opts = {};\n    }\n    return this.diff(DateTime.now(), unit, opts);\n  }\n\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} otherDateTime - the other end point of the Interval\n   * @return {Interval}\n   */;\n  _proto.until = function until(otherDateTime) {\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\n  }\n\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime.\n   * Higher-order units must also be identical for this function to return `true`.\n   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.\n   * @param {DateTime} otherDateTime - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @param {Object} opts - options\n   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; only the locale of this DateTime is used\n   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day\n   * @return {boolean}\n   */;\n  _proto.hasSame = function hasSame(otherDateTime, unit, opts) {\n    if (!this.isValid) return false;\n    var inputMs = otherDateTime.valueOf();\n    var adjustedToZone = this.setZone(otherDateTime.zone, {\n      keepLocalTime: true\n    });\n    return adjustedToZone.startOf(unit, opts) <= inputMs && inputMs <= adjustedToZone.endOf(unit, opts);\n  }\n\n  /**\n   * Equality check\n   * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.\n   * To compare just the millisecond values, use `+dt1 === +dt2`.\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */;\n  _proto.equals = function equals(other) {\n    return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);\n  }\n\n  /**\n   * Returns a string representation of a this time relative to now, such as \"in two days\". Can only internationalize if your\n   * platform supports Intl.RelativeTimeFormat. Rounds down by default.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} [options.style=\"long\"] - the style of units, must be \"long\", \"short\", or \"narrow\"\n   * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of \"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", or \"seconds\"\n   * @param {boolean} [options.round=true] - whether to round the numbers in the output.\n   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.\n   * @param {string} options.locale - override the locale of this DateTime\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> \"in 1 day\"\n   * @example DateTime.now().setLocale(\"es\").toRelative({ days: 1 }) //=> \"dentro de 1 día\"\n   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: \"fr\" }) //=> \"dans 23 heures\"\n   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> \"2 days ago\"\n   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: \"hours\" }) //=> \"48 hours ago\"\n   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> \"1.5 days ago\"\n   */;\n  _proto.toRelative = function toRelative(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (!this.isValid) return null;\n    var base = options.base || DateTime.fromObject({}, {\n        zone: this.zone\n      }),\n      padding = options.padding ? this < base ? -options.padding : options.padding : 0;\n    var units = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\"];\n    var unit = options.unit;\n    if (Array.isArray(options.unit)) {\n      units = options.unit;\n      unit = undefined;\n    }\n    return diffRelative(base, this.plus(padding), _extends({}, options, {\n      numeric: \"always\",\n      units: units,\n      unit: unit\n    }));\n  }\n\n  /**\n   * Returns a string representation of this date relative to today, such as \"yesterday\" or \"next month\".\n   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} options.locale - override the locale of this DateTime\n   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of \"years\", \"quarters\", \"months\", \"weeks\", or \"days\"\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> \"tomorrow\"\n   * @example DateTime.now().setLocale(\"es\").plus({ days: 1 }).toRelative() //=> \"\"mañana\"\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: \"fr\" }) //=> \"demain\"\n   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> \"2 days ago\"\n   */;\n  _proto.toRelativeCalendar = function toRelativeCalendar(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (!this.isValid) return null;\n    return diffRelative(options.base || DateTime.fromObject({}, {\n      zone: this.zone\n    }), this, _extends({}, options, {\n      numeric: \"auto\",\n      units: [\"years\", \"months\", \"days\"],\n      calendary: true\n    }));\n  }\n\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime} the min DateTime, or undefined if called with no argument\n   */;\n  DateTime.min = function min() {\n    for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {\n      dateTimes[_key] = arguments[_key];\n    }\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError(\"min requires all arguments be DateTimes\");\n    }\n    return bestBy(dateTimes, function (i) {\n      return i.valueOf();\n    }, Math.min);\n  }\n\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime} the max DateTime, or undefined if called with no argument\n   */;\n  DateTime.max = function max() {\n    for (var _len2 = arguments.length, dateTimes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      dateTimes[_key2] = arguments[_key2];\n    }\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError(\"max requires all arguments be DateTimes\");\n    }\n    return bestBy(dateTimes, function (i) {\n      return i.valueOf();\n    }, Math.max);\n  }\n\n  // MISC\n\n  /**\n   * Explain how a string would be parsed by fromFormat()\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} options - options taken by fromFormat()\n   * @return {Object}\n   */;\n  DateTime.fromFormatExplain = function fromFormatExplain(text, fmt, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _options = options,\n      _options$locale = _options.locale,\n      locale = _options$locale === void 0 ? null : _options$locale,\n      _options$numberingSys = _options.numberingSystem,\n      numberingSystem = _options$numberingSys === void 0 ? null : _options$numberingSys,\n      localeToUse = Locale.fromOpts({\n        locale: locale,\n        numberingSystem: numberingSystem,\n        defaultToEN: true\n      });\n    return explainFromTokens(localeToUse, text, fmt);\n  }\n\n  /**\n   * @deprecated use fromFormatExplain instead\n   */;\n  DateTime.fromStringExplain = function fromStringExplain(text, fmt, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return DateTime.fromFormatExplain(text, fmt, options);\n  }\n\n  /**\n   * Build a parser for `fmt` using the given locale. This parser can be passed\n   * to {@link DateTime.fromFormatParser} to a parse a date in this format. This\n   * can be used to optimize cases where many dates need to be parsed in a\n   * specific format.\n   *\n   * @param {String} fmt - the format the string is expected to be in (see\n   * description)\n   * @param {Object} options - options used to set locale and numberingSystem\n   * for parser\n   * @returns {TokenParser} - opaque object to be used\n   */;\n  DateTime.buildFormatParser = function buildFormatParser(fmt, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _options2 = options,\n      _options2$locale = _options2.locale,\n      locale = _options2$locale === void 0 ? null : _options2$locale,\n      _options2$numberingSy = _options2.numberingSystem,\n      numberingSystem = _options2$numberingSy === void 0 ? null : _options2$numberingSy,\n      localeToUse = Locale.fromOpts({\n        locale: locale,\n        numberingSystem: numberingSystem,\n        defaultToEN: true\n      });\n    return new TokenParser(localeToUse, fmt);\n  }\n\n  /**\n   * Create a DateTime from an input string and format parser.\n   *\n   * The format parser must have been created with the same locale as this call.\n   *\n   * @param {String} text - the string to parse\n   * @param {TokenParser} formatParser - parser from {@link DateTime.buildFormatParser}\n   * @param {Object} opts - options taken by fromFormat()\n   * @returns {DateTime}\n   */;\n  DateTime.fromFormatParser = function fromFormatParser(text, formatParser, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    if (isUndefined(text) || isUndefined(formatParser)) {\n      throw new InvalidArgumentError(\"fromFormatParser requires an input string and a format parser\");\n    }\n    var _opts2 = opts,\n      _opts2$locale = _opts2.locale,\n      locale = _opts2$locale === void 0 ? null : _opts2$locale,\n      _opts2$numberingSyste = _opts2.numberingSystem,\n      numberingSystem = _opts2$numberingSyste === void 0 ? null : _opts2$numberingSyste,\n      localeToUse = Locale.fromOpts({\n        locale: locale,\n        numberingSystem: numberingSystem,\n        defaultToEN: true\n      });\n    if (!localeToUse.equals(formatParser.locale)) {\n      throw new InvalidArgumentError(\"fromFormatParser called with a locale of \" + localeToUse + \", \" + (\"but the format parser was created for \" + formatParser.locale));\n    }\n    var _formatParser$explain = formatParser.explainFromTokens(text),\n      result = _formatParser$explain.result,\n      zone = _formatParser$explain.zone,\n      specificOffset = _formatParser$explain.specificOffset,\n      invalidReason = _formatParser$explain.invalidReason;\n    if (invalidReason) {\n      return DateTime.invalid(invalidReason);\n    } else {\n      return parseDataToDateTime(result, zone, opts, \"format \" + formatParser.format, text, specificOffset);\n    }\n  }\n\n  // FORMAT PRESETS\n\n  /**\n   * {@link DateTime#toLocaleString} format like 10/14/1983\n   * @type {Object}\n   */;\n  _createClass(DateTime, [{\n    key: \"isValid\",\n    get: function get() {\n      return this.invalid === null;\n    }\n\n    /**\n     * Returns an error code if this DateTime is invalid, or null if the DateTime is valid\n     * @type {string}\n     */\n  }, {\n    key: \"invalidReason\",\n    get: function get() {\n      return this.invalid ? this.invalid.reason : null;\n    }\n\n    /**\n     * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\n     * @type {string}\n     */\n  }, {\n    key: \"invalidExplanation\",\n    get: function get() {\n      return this.invalid ? this.invalid.explanation : null;\n    }\n\n    /**\n     * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime\n     *\n     * @type {string}\n     */\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this.isValid ? this.loc.locale : null;\n    }\n\n    /**\n     * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\n     *\n     * @type {string}\n     */\n  }, {\n    key: \"numberingSystem\",\n    get: function get() {\n      return this.isValid ? this.loc.numberingSystem : null;\n    }\n\n    /**\n     * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\n     *\n     * @type {string}\n     */\n  }, {\n    key: \"outputCalendar\",\n    get: function get() {\n      return this.isValid ? this.loc.outputCalendar : null;\n    }\n\n    /**\n     * Get the time zone associated with this DateTime.\n     * @type {Zone}\n     */\n  }, {\n    key: \"zone\",\n    get: function get() {\n      return this._zone;\n    }\n\n    /**\n     * Get the name of the time zone.\n     * @type {string}\n     */\n  }, {\n    key: \"zoneName\",\n    get: function get() {\n      return this.isValid ? this.zone.name : null;\n    }\n\n    /**\n     * Get the year\n     * @example DateTime.local(2017, 5, 25).year //=> 2017\n     * @type {number}\n     */\n  }, {\n    key: \"year\",\n    get: function get() {\n      return this.isValid ? this.c.year : NaN;\n    }\n\n    /**\n     * Get the quarter\n     * @example DateTime.local(2017, 5, 25).quarter //=> 2\n     * @type {number}\n     */\n  }, {\n    key: \"quarter\",\n    get: function get() {\n      return this.isValid ? Math.ceil(this.c.month / 3) : NaN;\n    }\n\n    /**\n     * Get the month (1-12).\n     * @example DateTime.local(2017, 5, 25).month //=> 5\n     * @type {number}\n     */\n  }, {\n    key: \"month\",\n    get: function get() {\n      return this.isValid ? this.c.month : NaN;\n    }\n\n    /**\n     * Get the day of the month (1-30ish).\n     * @example DateTime.local(2017, 5, 25).day //=> 25\n     * @type {number}\n     */\n  }, {\n    key: \"day\",\n    get: function get() {\n      return this.isValid ? this.c.day : NaN;\n    }\n\n    /**\n     * Get the hour of the day (0-23).\n     * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n     * @type {number}\n     */\n  }, {\n    key: \"hour\",\n    get: function get() {\n      return this.isValid ? this.c.hour : NaN;\n    }\n\n    /**\n     * Get the minute of the hour (0-59).\n     * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n     * @type {number}\n     */\n  }, {\n    key: \"minute\",\n    get: function get() {\n      return this.isValid ? this.c.minute : NaN;\n    }\n\n    /**\n     * Get the second of the minute (0-59).\n     * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n     * @type {number}\n     */\n  }, {\n    key: \"second\",\n    get: function get() {\n      return this.isValid ? this.c.second : NaN;\n    }\n\n    /**\n     * Get the millisecond of the second (0-999).\n     * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n     * @type {number}\n     */\n  }, {\n    key: \"millisecond\",\n    get: function get() {\n      return this.isValid ? this.c.millisecond : NaN;\n    }\n\n    /**\n     * Get the week year\n     * @see https://en.wikipedia.org/wiki/ISO_week_date\n     * @example DateTime.local(2014, 12, 31).weekYear //=> 2015\n     * @type {number}\n     */\n  }, {\n    key: \"weekYear\",\n    get: function get() {\n      return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\n    }\n\n    /**\n     * Get the week number of the week year (1-52ish).\n     * @see https://en.wikipedia.org/wiki/ISO_week_date\n     * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n     * @type {number}\n     */\n  }, {\n    key: \"weekNumber\",\n    get: function get() {\n      return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\n    }\n\n    /**\n     * Get the day of the week.\n     * 1 is Monday and 7 is Sunday\n     * @see https://en.wikipedia.org/wiki/ISO_week_date\n     * @example DateTime.local(2014, 11, 31).weekday //=> 4\n     * @type {number}\n     */\n  }, {\n    key: \"weekday\",\n    get: function get() {\n      return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\n    }\n\n    /**\n     * Returns true if this date is on a weekend according to the locale, false otherwise\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isWeekend\",\n    get: function get() {\n      return this.isValid && this.loc.getWeekendDays().includes(this.weekday);\n    }\n\n    /**\n     * Get the day of the week according to the locale.\n     * 1 is the first day of the week and 7 is the last day of the week.\n     * If the locale assigns Sunday as the first day of the week, then a date which is a Sunday will return 1,\n     * @returns {number}\n     */\n  }, {\n    key: \"localWeekday\",\n    get: function get() {\n      return this.isValid ? possiblyCachedLocalWeekData(this).weekday : NaN;\n    }\n\n    /**\n     * Get the week number of the week year according to the locale. Different locales assign week numbers differently,\n     * because the week can start on different days of the week (see localWeekday) and because a different number of days\n     * is required for a week to count as the first week of a year.\n     * @returns {number}\n     */\n  }, {\n    key: \"localWeekNumber\",\n    get: function get() {\n      return this.isValid ? possiblyCachedLocalWeekData(this).weekNumber : NaN;\n    }\n\n    /**\n     * Get the week year according to the locale. Different locales assign week numbers (and therefor week years)\n     * differently, see localWeekNumber.\n     * @returns {number}\n     */\n  }, {\n    key: \"localWeekYear\",\n    get: function get() {\n      return this.isValid ? possiblyCachedLocalWeekData(this).weekYear : NaN;\n    }\n\n    /**\n     * Get the ordinal (meaning the day of the year)\n     * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n     * @type {number|DateTime}\n     */\n  }, {\n    key: \"ordinal\",\n    get: function get() {\n      return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;\n    }\n\n    /**\n     * Get the human readable short month name, such as 'Oct'.\n     * Defaults to the system's locale if no locale has been specified\n     * @example DateTime.local(2017, 10, 30).monthShort //=> Oct\n     * @type {string}\n     */\n  }, {\n    key: \"monthShort\",\n    get: function get() {\n      return this.isValid ? Info.months(\"short\", {\n        locObj: this.loc\n      })[this.month - 1] : null;\n    }\n\n    /**\n     * Get the human readable long month name, such as 'October'.\n     * Defaults to the system's locale if no locale has been specified\n     * @example DateTime.local(2017, 10, 30).monthLong //=> October\n     * @type {string}\n     */\n  }, {\n    key: \"monthLong\",\n    get: function get() {\n      return this.isValid ? Info.months(\"long\", {\n        locObj: this.loc\n      })[this.month - 1] : null;\n    }\n\n    /**\n     * Get the human readable short weekday, such as 'Mon'.\n     * Defaults to the system's locale if no locale has been specified\n     * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon\n     * @type {string}\n     */\n  }, {\n    key: \"weekdayShort\",\n    get: function get() {\n      return this.isValid ? Info.weekdays(\"short\", {\n        locObj: this.loc\n      })[this.weekday - 1] : null;\n    }\n\n    /**\n     * Get the human readable long weekday, such as 'Monday'.\n     * Defaults to the system's locale if no locale has been specified\n     * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday\n     * @type {string}\n     */\n  }, {\n    key: \"weekdayLong\",\n    get: function get() {\n      return this.isValid ? Info.weekdays(\"long\", {\n        locObj: this.loc\n      })[this.weekday - 1] : null;\n    }\n\n    /**\n     * Get the UTC offset of this DateTime in minutes\n     * @example DateTime.now().offset //=> -240\n     * @example DateTime.utc().offset //=> 0\n     * @type {number}\n     */\n  }, {\n    key: \"offset\",\n    get: function get() {\n      return this.isValid ? +this.o : NaN;\n    }\n\n    /**\n     * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\n     * Defaults to the system's locale if no locale has been specified\n     * @type {string}\n     */\n  }, {\n    key: \"offsetNameShort\",\n    get: function get() {\n      if (this.isValid) {\n        return this.zone.offsetName(this.ts, {\n          format: \"short\",\n          locale: this.locale\n        });\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\n     * Defaults to the system's locale if no locale has been specified\n     * @type {string}\n     */\n  }, {\n    key: \"offsetNameLong\",\n    get: function get() {\n      if (this.isValid) {\n        return this.zone.offsetName(this.ts, {\n          format: \"long\",\n          locale: this.locale\n        });\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Get whether this zone's offset ever changes, as in a DST.\n     * @type {boolean}\n     */\n  }, {\n    key: \"isOffsetFixed\",\n    get: function get() {\n      return this.isValid ? this.zone.isUniversal : null;\n    }\n\n    /**\n     * Get whether the DateTime is in a DST.\n     * @type {boolean}\n     */\n  }, {\n    key: \"isInDST\",\n    get: function get() {\n      if (this.isOffsetFixed) {\n        return false;\n      } else {\n        return this.offset > this.set({\n          month: 1,\n          day: 1\n        }).offset || this.offset > this.set({\n          month: 5\n        }).offset;\n      }\n    }\n  }, {\n    key: \"isInLeapYear\",\n    get: function get() {\n      return isLeapYear(this.year);\n    }\n\n    /**\n     * Returns the number of days in this DateTime's month\n     * @example DateTime.local(2016, 2).daysInMonth //=> 29\n     * @example DateTime.local(2016, 3).daysInMonth //=> 31\n     * @type {number}\n     */\n  }, {\n    key: \"daysInMonth\",\n    get: function get() {\n      return daysInMonth(this.year, this.month);\n    }\n\n    /**\n     * Returns the number of days in this DateTime's year\n     * @example DateTime.local(2016).daysInYear //=> 366\n     * @example DateTime.local(2013).daysInYear //=> 365\n     * @type {number}\n     */\n  }, {\n    key: \"daysInYear\",\n    get: function get() {\n      return this.isValid ? daysInYear(this.year) : NaN;\n    }\n\n    /**\n     * Returns the number of weeks in this DateTime's year\n     * @see https://en.wikipedia.org/wiki/ISO_week_date\n     * @example DateTime.local(2004).weeksInWeekYear //=> 53\n     * @example DateTime.local(2013).weeksInWeekYear //=> 52\n     * @type {number}\n     */\n  }, {\n    key: \"weeksInWeekYear\",\n    get: function get() {\n      return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;\n    }\n\n    /**\n     * Returns the number of weeks in this DateTime's local week year\n     * @example DateTime.local(2020, 6, {locale: 'en-US'}).weeksInLocalWeekYear //=> 52\n     * @example DateTime.local(2020, 6, {locale: 'de-DE'}).weeksInLocalWeekYear //=> 53\n     * @type {number}\n     */\n  }, {\n    key: \"weeksInLocalWeekYear\",\n    get: function get() {\n      return this.isValid ? weeksInWeekYear(this.localWeekYear, this.loc.getMinDaysInFirstWeek(), this.loc.getStartOfWeek()) : NaN;\n    }\n  }], [{\n    key: \"DATE_SHORT\",\n    get: function get() {\n      return DATE_SHORT;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'\n     * @type {Object}\n     */\n  }, {\n    key: \"DATE_MED\",\n    get: function get() {\n      return DATE_MED;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'\n     * @type {Object}\n     */\n  }, {\n    key: \"DATE_MED_WITH_WEEKDAY\",\n    get: function get() {\n      return DATE_MED_WITH_WEEKDAY;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like 'October 14, 1983'\n     * @type {Object}\n     */\n  }, {\n    key: \"DATE_FULL\",\n    get: function get() {\n      return DATE_FULL;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'\n     * @type {Object}\n     */\n  }, {\n    key: \"DATE_HUGE\",\n    get: function get() {\n      return DATE_HUGE;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n  }, {\n    key: \"TIME_SIMPLE\",\n    get: function get() {\n      return TIME_SIMPLE;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n  }, {\n    key: \"TIME_WITH_SECONDS\",\n    get: function get() {\n      return TIME_WITH_SECONDS;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n  }, {\n    key: \"TIME_WITH_SHORT_OFFSET\",\n    get: function get() {\n      return TIME_WITH_SHORT_OFFSET;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n  }, {\n    key: \"TIME_WITH_LONG_OFFSET\",\n    get: function get() {\n      return TIME_WITH_LONG_OFFSET;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.\n     * @type {Object}\n     */\n  }, {\n    key: \"TIME_24_SIMPLE\",\n    get: function get() {\n      return TIME_24_SIMPLE;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.\n     * @type {Object}\n     */\n  }, {\n    key: \"TIME_24_WITH_SECONDS\",\n    get: function get() {\n      return TIME_24_WITH_SECONDS;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.\n     * @type {Object}\n     */\n  }, {\n    key: \"TIME_24_WITH_SHORT_OFFSET\",\n    get: function get() {\n      return TIME_24_WITH_SHORT_OFFSET;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\n     * @type {Object}\n     */\n  }, {\n    key: \"TIME_24_WITH_LONG_OFFSET\",\n    get: function get() {\n      return TIME_24_WITH_LONG_OFFSET;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n  }, {\n    key: \"DATETIME_SHORT\",\n    get: function get() {\n      return DATETIME_SHORT;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n  }, {\n    key: \"DATETIME_SHORT_WITH_SECONDS\",\n    get: function get() {\n      return DATETIME_SHORT_WITH_SECONDS;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n  }, {\n    key: \"DATETIME_MED\",\n    get: function get() {\n      return DATETIME_MED;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n  }, {\n    key: \"DATETIME_MED_WITH_SECONDS\",\n    get: function get() {\n      return DATETIME_MED_WITH_SECONDS;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n  }, {\n    key: \"DATETIME_MED_WITH_WEEKDAY\",\n    get: function get() {\n      return DATETIME_MED_WITH_WEEKDAY;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n  }, {\n    key: \"DATETIME_FULL\",\n    get: function get() {\n      return DATETIME_FULL;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n  }, {\n    key: \"DATETIME_FULL_WITH_SECONDS\",\n    get: function get() {\n      return DATETIME_FULL_WITH_SECONDS;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n  }, {\n    key: \"DATETIME_HUGE\",\n    get: function get() {\n      return DATETIME_HUGE;\n    }\n\n    /**\n     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n     * @type {Object}\n     */\n  }, {\n    key: \"DATETIME_HUGE_WITH_SECONDS\",\n    get: function get() {\n      return DATETIME_HUGE_WITH_SECONDS;\n    }\n  }]);\n  return DateTime;\n}(Symbol.for(\"nodejs.util.inspect.custom\"));\nfunction friendlyDateTime(dateTimeish) {\n  if (DateTime.isDateTime(dateTimeish)) {\n    return dateTimeish;\n  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {\n    return DateTime.fromJSDate(dateTimeish);\n  } else if (dateTimeish && typeof dateTimeish === \"object\") {\n    return DateTime.fromObject(dateTimeish);\n  } else {\n    throw new InvalidArgumentError(\"Unknown datetime argument: \" + dateTimeish + \", of type \" + typeof dateTimeish);\n  }\n}\n\nvar VERSION = \"3.5.0\";\n\nexports.DateTime = DateTime;\nexports.Duration = Duration;\nexports.FixedOffsetZone = FixedOffsetZone;\nexports.IANAZone = IANAZone;\nexports.Info = Info;\nexports.Interval = Interval;\nexports.InvalidZone = InvalidZone;\nexports.Settings = Settings;\nexports.SystemZone = SystemZone;\nexports.VERSION = VERSION;\nexports.Zone = Zone;\n//# sourceMappingURL=luxon.js.map\n","// these aren't really private, but nor are they really useful to document\n\n/**\n * @private\n */\nclass LuxonError extends Error {}\n\n/**\n * @private\n */\nexport class InvalidDateTimeError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid DateTime: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidIntervalError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Interval: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidDurationError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Duration: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class ConflictingSpecificationError extends LuxonError {}\n\n/**\n * @private\n */\nexport class InvalidUnitError extends LuxonError {\n  constructor(unit) {\n    super(`Invalid unit ${unit}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidArgumentError extends LuxonError {}\n\n/**\n * @private\n */\nexport class ZoneIsAbstractError extends LuxonError {\n  constructor() {\n    super(\"Zone is an abstract class\");\n  }\n}\n","/**\n * @private\n */\n\nconst n = \"numeric\",\n  s = \"short\",\n  l = \"long\";\n\nexport const DATE_SHORT = {\n  year: n,\n  month: n,\n  day: n,\n};\n\nexport const DATE_MED = {\n  year: n,\n  month: s,\n  day: n,\n};\n\nexport const DATE_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s,\n};\n\nexport const DATE_FULL = {\n  year: n,\n  month: l,\n  day: n,\n};\n\nexport const DATE_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n};\n\nexport const TIME_SIMPLE = {\n  hour: n,\n  minute: n,\n};\n\nexport const TIME_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n,\n};\n\nexport const TIME_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s,\n};\n\nexport const TIME_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l,\n};\n\nexport const TIME_24_SIMPLE = {\n  hour: n,\n  minute: n,\n  hourCycle: \"h23\",\n};\n\nexport const TIME_24_WITH_SECONDS = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n};\n\nexport const TIME_24_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n  timeZoneName: s,\n};\n\nexport const TIME_24_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: n,\n  second: n,\n  hourCycle: \"h23\",\n  timeZoneName: l,\n};\n\nexport const DATETIME_SHORT = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n,\n};\n\nexport const DATETIME_SHORT_WITH_SECONDS = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n};\n\nexport const DATETIME_MED = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n,\n};\n\nexport const DATETIME_MED_WITH_SECONDS = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n};\n\nexport const DATETIME_MED_WITH_WEEKDAY = {\n  year: n,\n  month: s,\n  day: n,\n  weekday: s,\n  hour: n,\n  minute: n,\n};\n\nexport const DATETIME_FULL = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  timeZoneName: s,\n};\n\nexport const DATETIME_FULL_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: s,\n};\n\nexport const DATETIME_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  timeZoneName: l,\n};\n\nexport const DATETIME_HUGE_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: n,\n  second: n,\n  timeZoneName: l,\n};\n","import { ZoneIsAbstractError } from \"./errors.js\";\n\n/**\n * @interface\n */\nexport default class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @type {string}\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @type {string}\n   */\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The IANA name of this zone.\n   * Defaults to `name` if not overwritten by a subclass.\n   * @abstract\n   * @type {string}\n   */\n  get ianaName() {\n    return this.name;\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @type {boolean}\n   */\n  get isUniversal() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  formatOffset(ts, format) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @type {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n}\n","import { formatOffset, parseZoneInfo } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * Represents the local zone for this JavaScript environment.\n * @implements {Zone}\n */\nexport default class SystemZone extends Zone {\n  /**\n   * Get a singleton instance of the local zone\n   * @return {SystemZone}\n   */\n  static get instance() {\n    if (singleton === null) {\n      singleton = new SystemZone();\n    }\n    return singleton;\n  }\n\n  /** @override **/\n  get type() {\n    return \"system\";\n  }\n\n  /** @override **/\n  get name() {\n    return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale);\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"system\";\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n","import { formatOffset, parseZoneInfo, isUndefined, objToLocalTS } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet dtfCache = {};\nfunction makeDTF(zone) {\n  if (!dtfCache[zone]) {\n    dtfCache[zone] = new Intl.DateTimeFormat(\"en-US\", {\n      hour12: false,\n      timeZone: zone,\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      era: \"short\",\n    });\n  }\n  return dtfCache[zone];\n}\n\nconst typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  era: 3,\n  hour: 4,\n  minute: 5,\n  second: 6,\n};\n\nfunction hackyOffset(dtf, date) {\n  const formatted = dtf.format(date).replace(/\\u200E/g, \"\"),\n    parsed = /(\\d+)\\/(\\d+)\\/(\\d+) (AD|BC),? (\\d+):(\\d+):(\\d+)/.exec(formatted),\n    [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;\n  return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];\n}\n\nfunction partsOffset(dtf, date) {\n  const formatted = dtf.formatToParts(date);\n  const filled = [];\n  for (let i = 0; i < formatted.length; i++) {\n    const { type, value } = formatted[i];\n    const pos = typeToPos[type];\n\n    if (type === \"era\") {\n      filled[pos] = value;\n    } else if (!isUndefined(pos)) {\n      filled[pos] = parseInt(value, 10);\n    }\n  }\n  return filled;\n}\n\nlet ianaZoneCache = {};\n/**\n * A zone identified by an IANA identifier, like America/New_York\n * @implements {Zone}\n */\nexport default class IANAZone extends Zone {\n  /**\n   * @param {string} name - Zone name\n   * @return {IANAZone}\n   */\n  static create(name) {\n    if (!ianaZoneCache[name]) {\n      ianaZoneCache[name] = new IANAZone(name);\n    }\n    return ianaZoneCache[name];\n  }\n\n  /**\n   * Reset local caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCache() {\n    ianaZoneCache = {};\n    dtfCache = {};\n  }\n\n  /**\n   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.\n   * @param {string} s - The string to check validity on\n   * @example IANAZone.isValidSpecifier(\"America/New_York\") //=> true\n   * @example IANAZone.isValidSpecifier(\"Sport~~blorp\") //=> false\n   * @deprecated For backward compatibility, this forwards to isValidZone, better use `isValidZone()` directly instead.\n   * @return {boolean}\n   */\n  static isValidSpecifier(s) {\n    return this.isValidZone(s);\n  }\n\n  /**\n   * Returns whether the provided string identifies a real zone\n   * @param {string} zone - The string to check\n   * @example IANAZone.isValidZone(\"America/New_York\") //=> true\n   * @example IANAZone.isValidZone(\"Fantasia/Castle\") //=> false\n   * @example IANAZone.isValidZone(\"Sport~~blorp\") //=> false\n   * @return {boolean}\n   */\n  static isValidZone(zone) {\n    if (!zone) {\n      return false;\n    }\n    try {\n      new Intl.DateTimeFormat(\"en-US\", { timeZone: zone }).format();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(name) {\n    super();\n    /** @private **/\n    this.zoneName = name;\n    /** @private **/\n    this.valid = IANAZone.isValidZone(name);\n  }\n\n  /**\n   * The type of zone. `iana` for all instances of `IANAZone`.\n   * @override\n   * @type {string}\n   */\n  get type() {\n    return \"iana\";\n  }\n\n  /**\n   * The name of this zone (i.e. the IANA zone name).\n   * @override\n   * @type {string}\n   */\n  get name() {\n    return this.zoneName;\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year:\n   * Always returns false for all IANA zones.\n   * @override\n   * @type {boolean}\n   */\n  get isUniversal() {\n    return false;\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @override\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale, this.name);\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @override\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @override\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    const date = new Date(ts);\n\n    if (isNaN(date)) return NaN;\n\n    const dtf = makeDTF(this.name);\n    let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts\n      ? partsOffset(dtf, date)\n      : hackyOffset(dtf, date);\n\n    if (adOrBc === \"BC\") {\n      year = -Math.abs(year) + 1;\n    }\n\n    // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat\n    const adjustedHour = hour === 24 ? 0 : hour;\n\n    const asUTC = objToLocalTS({\n      year,\n      month,\n      day,\n      hour: adjustedHour,\n      minute,\n      second,\n      millisecond: 0,\n    });\n\n    let asTS = +date;\n    const over = asTS % 1000;\n    asTS -= over >= 0 ? over : 1000 + over;\n    return (asUTC - asTS) / (60 * 1000);\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone\n   * @override\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    return otherZone.type === \"iana\" && otherZone.name === this.name;\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @override\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.valid;\n  }\n}\n","import { hasLocaleWeekInfo, hasRelative, padStart, roundTo, validateWeekSettings } from \"./util.js\";\nimport * as English from \"./english.js\";\nimport Settings from \"../settings.js\";\nimport DateTime from \"../datetime.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n\n// todo - remap caching\n\nlet intlLFCache = {};\nfunction getCachedLF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlLFCache[key];\n  if (!dtf) {\n    dtf = new Intl.ListFormat(locString, opts);\n    intlLFCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlDTCache = {};\nfunction getCachedDTF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlDTCache[key];\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlNumCache = {};\nfunction getCachedINF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let inf = intlNumCache[key];\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache[key] = inf;\n  }\n  return inf;\n}\n\nlet intlRelCache = {};\nfunction getCachedRTF(locString, opts = {}) {\n  const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options\n  const key = JSON.stringify([locString, cacheKeyOpts]);\n  let inf = intlRelCache[key];\n  if (!inf) {\n    inf = new Intl.RelativeTimeFormat(locString, opts);\n    intlRelCache[key] = inf;\n  }\n  return inf;\n}\n\nlet sysLocaleCache = null;\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;\n    return sysLocaleCache;\n  }\n}\n\nlet weekInfoCache = {};\nfunction getCachedWeekInfo(locString) {\n  let data = weekInfoCache[locString];\n  if (!data) {\n    const locale = new Intl.Locale(locString);\n    // browsers currently implement this as a property, but spec says it should be a getter function\n    data = \"getWeekInfo\" in locale ? locale.getWeekInfo() : locale.weekInfo;\n    weekInfoCache[locString] = data;\n  }\n  return data;\n}\n\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we'll do this:\n\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n\n  // private subtags and unicode subtags have ordering requirements,\n  // and we're not properly parsing this, so just strip out the\n  // private ones if they exist.\n  const xIndex = localeStr.indexOf(\"-x-\");\n  if (xIndex !== -1) {\n    localeStr = localeStr.substring(0, xIndex);\n  }\n\n  const uIndex = localeStr.indexOf(\"-u-\");\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    let options;\n    let selectedStr;\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n      selectedStr = localeStr;\n    } catch (e) {\n      const smaller = localeStr.substring(0, uIndex);\n      options = getCachedDTF(smaller).resolvedOptions();\n      selectedStr = smaller;\n    }\n\n    const { numberingSystem, calendar } = options;\n    return [selectedStr, numberingSystem, calendar];\n  }\n}\n\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (outputCalendar || numberingSystem) {\n    if (!localeStr.includes(\"-u-\")) {\n      localeStr += \"-u\";\n    }\n\n    if (outputCalendar) {\n      localeStr += `-ca-${outputCalendar}`;\n    }\n\n    if (numberingSystem) {\n      localeStr += `-nu-${numberingSystem}`;\n    }\n    return localeStr;\n  } else {\n    return localeStr;\n  }\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2009, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction listStuff(loc, length, englishFn, intlFn) {\n  const mode = loc.listingMode();\n\n  if (mode === \"error\") {\n    return null;\n  } else if (mode === \"en\") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\n    return false;\n  } else {\n    return (\n      loc.numberingSystem === \"latn\" ||\n      !loc.locale ||\n      loc.locale.startsWith(\"en\") ||\n      new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === \"latn\"\n    );\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyNumberFormatter {\n  constructor(intl, forceSimple, opts) {\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n\n    const { padTo, floor, ...otherOpts } = opts;\n\n    if (!forceSimple || Object.keys(otherOpts).length > 0) {\n      const intlOpts = { useGrouping: false, ...opts };\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n\n  format(i) {\n    if (this.inf) {\n      const fixed = this.floor ? Math.floor(i) : i;\n      return this.inf.format(fixed);\n    } else {\n      // to match the browser's numberformatter defaults\n      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n      return padStart(fixed, this.padTo);\n    }\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyDateFormatter {\n  constructor(dt, intl, opts) {\n    this.opts = opts;\n    this.originalZone = undefined;\n\n    let z = undefined;\n    if (this.opts.timeZone) {\n      // Don't apply any workarounds if a timeZone is explicitly provided in opts\n      this.dt = dt;\n    } else if (dt.zone.type === \"fixed\") {\n      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.\n      // That is why fixed-offset TZ is set to that unless it is:\n      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.\n      // 2. Unsupported by the browser:\n      //    - some do not support Etc/\n      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata\n      const gmtOffset = -1 * (dt.offset / 60);\n      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;\n      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {\n        z = offsetZ;\n        this.dt = dt;\n      } else {\n        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata so\n        // we manually apply the offset and substitute the zone as needed.\n        z = \"UTC\";\n        this.dt = dt.offset === 0 ? dt : dt.setZone(\"UTC\").plus({ minutes: dt.offset });\n        this.originalZone = dt.zone;\n      }\n    } else if (dt.zone.type === \"system\") {\n      this.dt = dt;\n    } else if (dt.zone.type === \"iana\") {\n      this.dt = dt;\n      z = dt.zone.name;\n    } else {\n      // Custom zones can have any offset / offsetName so we just manually\n      // apply the offset and substitute the zone as needed.\n      z = \"UTC\";\n      this.dt = dt.setZone(\"UTC\").plus({ minutes: dt.offset });\n      this.originalZone = dt.zone;\n    }\n\n    const intlOpts = { ...this.opts };\n    intlOpts.timeZone = intlOpts.timeZone || z;\n    this.dtf = getCachedDTF(intl, intlOpts);\n  }\n\n  format() {\n    if (this.originalZone) {\n      // If we have to substitute in the actual zone name, we have to use\n      // formatToParts so that the timezone can be replaced.\n      return this.formatToParts()\n        .map(({ value }) => value)\n        .join(\"\");\n    }\n    return this.dtf.format(this.dt.toJSDate());\n  }\n\n  formatToParts() {\n    const parts = this.dtf.formatToParts(this.dt.toJSDate());\n    if (this.originalZone) {\n      return parts.map((part) => {\n        if (part.type === \"timeZoneName\") {\n          const offsetName = this.originalZone.offsetName(this.dt.ts, {\n            locale: this.dt.locale,\n            format: this.opts.timeZoneName,\n          });\n          return {\n            ...part,\n            value: offsetName,\n          };\n        } else {\n          return part;\n        }\n      });\n    }\n    return parts;\n  }\n\n  resolvedOptions() {\n    return this.dtf.resolvedOptions();\n  }\n}\n\n/**\n * @private\n */\nclass PolyRelFormatter {\n  constructor(intl, isEnglish, opts) {\n    this.opts = { style: \"long\", ...opts };\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(intl, opts);\n    }\n  }\n\n  format(count, unit) {\n    if (this.rtf) {\n      return this.rtf.format(count, unit);\n    } else {\n      return English.formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== \"long\");\n    }\n  }\n\n  formatToParts(count, unit) {\n    if (this.rtf) {\n      return this.rtf.formatToParts(count, unit);\n    } else {\n      return [];\n    }\n  }\n}\n\nconst fallbackWeekSettings = {\n  firstDay: 1,\n  minimalDays: 4,\n  weekend: [6, 7],\n};\n\n/**\n * @private\n */\n\nexport default class Locale {\n  static fromOpts(opts) {\n    return Locale.create(\n      opts.locale,\n      opts.numberingSystem,\n      opts.outputCalendar,\n      opts.weekSettings,\n      opts.defaultToEN\n    );\n  }\n\n  static create(locale, numberingSystem, outputCalendar, weekSettings, defaultToEN = false) {\n    const specifiedLocale = locale || Settings.defaultLocale;\n    // the system locale is useful for human-readable strings but annoying for parsing/formatting known formats\n    const localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale());\n    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;\n    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n    const weekSettingsR = validateWeekSettings(weekSettings) || Settings.defaultWeekSettings;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);\n  }\n\n  static resetCache() {\n    sysLocaleCache = null;\n    intlDTCache = {};\n    intlNumCache = {};\n    intlRelCache = {};\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar, weekSettings } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar, weekSettings);\n  }\n\n  constructor(locale, numbering, outputCalendar, weekSettings, specifiedLocale) {\n    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);\n\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.weekSettings = weekSettings;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n\n    this.weekdaysCache = { format: {}, standalone: {} };\n    this.monthsCache = { format: {}, standalone: {} };\n    this.meridiemCache = null;\n    this.eraCache = {};\n\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n\n  get fastNumbers() {\n    if (this.fastNumbersCached == null) {\n      this.fastNumbersCached = supportsFastNumbers(this);\n    }\n\n    return this.fastNumbersCached;\n  }\n\n  listingMode() {\n    const isActuallyEn = this.isEnglish();\n    const hasNoWeirdness =\n      (this.numberingSystem === null || this.numberingSystem === \"latn\") &&\n      (this.outputCalendar === null || this.outputCalendar === \"gregory\");\n    return isActuallyEn && hasNoWeirdness ? \"en\" : \"intl\";\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.specifiedLocale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar,\n        validateWeekSettings(alts.weekSettings) || this.weekSettings,\n        alts.defaultToEN || false\n      );\n    }\n  }\n\n  redefaultToEN(alts = {}) {\n    return this.clone({ ...alts, defaultToEN: true });\n  }\n\n  redefaultToSystem(alts = {}) {\n    return this.clone({ ...alts, defaultToEN: false });\n  }\n\n  months(length, format = false) {\n    return listStuff(this, length, English.months, () => {\n      const intl = format ? { month: length, day: \"numeric\" } : { month: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.monthsCache[formatStr][length]) {\n        this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, \"month\"));\n      }\n      return this.monthsCache[formatStr][length];\n    });\n  }\n\n  weekdays(length, format = false) {\n    return listStuff(this, length, English.weekdays, () => {\n      const intl = format\n          ? { weekday: length, year: \"numeric\", month: \"long\", day: \"numeric\" }\n          : { weekday: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.weekdaysCache[formatStr][length]) {\n        this.weekdaysCache[formatStr][length] = mapWeekdays((dt) =>\n          this.extract(dt, intl, \"weekday\")\n        );\n      }\n      return this.weekdaysCache[formatStr][length];\n    });\n  }\n\n  meridiems() {\n    return listStuff(\n      this,\n      undefined,\n      () => English.meridiems,\n      () => {\n        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n        if (!this.meridiemCache) {\n          const intl = { hour: \"numeric\", hourCycle: \"h12\" };\n          this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(\n            (dt) => this.extract(dt, intl, \"dayperiod\")\n          );\n        }\n\n        return this.meridiemCache;\n      }\n    );\n  }\n\n  eras(length) {\n    return listStuff(this, length, English.eras, () => {\n      const intl = { era: length };\n\n      // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!this.eraCache[length]) {\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map((dt) =>\n          this.extract(dt, intl, \"era\")\n        );\n      }\n\n      return this.eraCache[length];\n    });\n  }\n\n  extract(dt, intlOpts, field) {\n    const df = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(),\n      matching = results.find((m) => m.type.toLowerCase() === field);\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}) {\n    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n    // (in contrast, the rest of the condition is used heavily)\n    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  }\n\n  relFormatter(opts = {}) {\n    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\n  }\n\n  listFormatter(opts = {}) {\n    return getCachedLF(this.intl, opts);\n  }\n\n  isEnglish() {\n    return (\n      this.locale === \"en\" ||\n      this.locale.toLowerCase() === \"en-us\" ||\n      new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith(\"en-us\")\n    );\n  }\n\n  getWeekSettings() {\n    if (this.weekSettings) {\n      return this.weekSettings;\n    } else if (!hasLocaleWeekInfo()) {\n      return fallbackWeekSettings;\n    } else {\n      return getCachedWeekInfo(this.locale);\n    }\n  }\n\n  getStartOfWeek() {\n    return this.getWeekSettings().firstDay;\n  }\n\n  getMinDaysInFirstWeek() {\n    return this.getWeekSettings().minimalDays;\n  }\n\n  getWeekendDays() {\n    return this.getWeekSettings().weekend;\n  }\n\n  equals(other) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n\n  toString() {\n    return `Locale(${this.locale}, ${this.numberingSystem}, ${this.outputCalendar})`;\n  }\n}\n","import { formatOffset, signedOffset } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * A zone with a fixed offset (meaning no DST)\n * @implements {Zone}\n */\nexport default class FixedOffsetZone extends Zone {\n  /**\n   * Get a singleton instance of UTC\n   * @return {FixedOffsetZone}\n   */\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  /**\n   * Get an instance with a specified offset\n   * @param {number} offset - The offset in minutes\n   * @return {FixedOffsetZone}\n   */\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  /**\n   * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\n   * @param {string} s - The offset string to parse\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\n   * @return {FixedOffsetZone}\n   */\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    /** @private **/\n    this.fixed = offset;\n  }\n\n  /**\n   * The type of zone. `fixed` for all instances of `FixedOffsetZone`.\n   * @override\n   * @type {string}\n   */\n  get type() {\n    return \"fixed\";\n  }\n\n  /**\n   * The name of this zone.\n   * All fixed zones' names always start with \"UTC\" (plus optional offset)\n   * @override\n   * @type {string}\n   */\n  get name() {\n    return this.fixed === 0 ? \"UTC\" : `UTC${formatOffset(this.fixed, \"narrow\")}`;\n  }\n\n  /**\n   * The IANA name of this zone, i.e. `Etc/UTC` or `Etc/GMT+/-nn`\n   *\n   * @override\n   * @type {string}\n   */\n  get ianaName() {\n    if (this.fixed === 0) {\n      return \"Etc/UTC\";\n    } else {\n      return `Etc/GMT${formatOffset(-this.fixed, \"narrow\")}`;\n    }\n  }\n\n  /**\n   * Returns the offset's common name at the specified timestamp.\n   *\n   * For fixed offset zones this equals to the zone name.\n   * @override\n   */\n  offsetName() {\n    return this.name;\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @override\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  formatOffset(ts, format) {\n    return formatOffset(this.fixed, format);\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year:\n   * Always returns true for all fixed offset zones.\n   * @override\n   * @type {boolean}\n   */\n  get isUniversal() {\n    return true;\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   *\n   * For fixed offset zones, this is constant and does not depend on a timestamp.\n   * @override\n   * @return {number}\n   */\n  offset() {\n    return this.fixed;\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone (i.e. also fixed and same offset)\n   * @override\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    return otherZone.type === \"fixed\" && otherZone.fixed === this.fixed;\n  }\n\n  /**\n   * Return whether this Zone is valid:\n   * All fixed offset zones are valid.\n   * @override\n   * @type {boolean}\n   */\n  get isValid() {\n    return true;\n  }\n}\n","import Zone from \"../zone.js\";\n\n/**\n * A zone that failed to parse. You should never need to instantiate this.\n * @implements {Zone}\n */\nexport default class InvalidZone extends Zone {\n  constructor(zoneName) {\n    super();\n    /**  @private */\n    this.zoneName = zoneName;\n  }\n\n  /** @override **/\n  get type() {\n    return \"invalid\";\n  }\n\n  /** @override **/\n  get name() {\n    return this.zoneName;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName() {\n    return null;\n  }\n\n  /** @override **/\n  formatOffset() {\n    return \"\";\n  }\n\n  /** @override **/\n  offset() {\n    return NaN;\n  }\n\n  /** @override **/\n  equals() {\n    return false;\n  }\n\n  /** @override **/\n  get isValid() {\n    return false;\n  }\n}\n","/**\n * @private\n */\n\nimport Zone from \"../zone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport InvalidZone from \"../zones/invalidZone.js\";\n\nimport { isUndefined, isString, isNumber } from \"./util.js\";\nimport SystemZone from \"../zones/systemZone.js\";\n\nexport function normalizeZone(input, defaultZone) {\n  let offset;\n  if (isUndefined(input) || input === null) {\n    return defaultZone;\n  } else if (input instanceof Zone) {\n    return input;\n  } else if (isString(input)) {\n    const lowered = input.toLowerCase();\n    if (lowered === \"default\") return defaultZone;\n    else if (lowered === \"local\" || lowered === \"system\") return SystemZone.instance;\n    else if (lowered === \"utc\" || lowered === \"gmt\") return FixedOffsetZone.utcInstance;\n    else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);\n  } else if (isNumber(input)) {\n    return FixedOffsetZone.instance(input);\n  } else if (typeof input === \"object\" && \"offset\" in input && typeof input.offset === \"function\") {\n    // This is dumb, but the instanceof check above doesn't seem to really work\n    // so we're duck checking it\n    return input;\n  } else {\n    return new InvalidZone(input);\n  }\n}\n","const numberingSystems = {\n  arab: \"[\\u0660-\\u0669]\",\n  arabext: \"[\\u06F0-\\u06F9]\",\n  bali: \"[\\u1B50-\\u1B59]\",\n  beng: \"[\\u09E6-\\u09EF]\",\n  deva: \"[\\u0966-\\u096F]\",\n  fullwide: \"[\\uFF10-\\uFF19]\",\n  gujr: \"[\\u0AE6-\\u0AEF]\",\n  hanidec: \"[〇|一|二|三|四|五|六|七|八|九]\",\n  khmr: \"[\\u17E0-\\u17E9]\",\n  knda: \"[\\u0CE6-\\u0CEF]\",\n  laoo: \"[\\u0ED0-\\u0ED9]\",\n  limb: \"[\\u1946-\\u194F]\",\n  mlym: \"[\\u0D66-\\u0D6F]\",\n  mong: \"[\\u1810-\\u1819]\",\n  mymr: \"[\\u1040-\\u1049]\",\n  orya: \"[\\u0B66-\\u0B6F]\",\n  tamldec: \"[\\u0BE6-\\u0BEF]\",\n  telu: \"[\\u0C66-\\u0C6F]\",\n  thai: \"[\\u0E50-\\u0E59]\",\n  tibt: \"[\\u0F20-\\u0F29]\",\n  latn: \"\\\\d\",\n};\n\nconst numberingSystemsUTF16 = {\n  arab: [1632, 1641],\n  arabext: [1776, 1785],\n  bali: [6992, 7001],\n  beng: [2534, 2543],\n  deva: [2406, 2415],\n  fullwide: [65296, 65303],\n  gujr: [2790, 2799],\n  khmr: [6112, 6121],\n  knda: [3302, 3311],\n  laoo: [3792, 3801],\n  limb: [6470, 6479],\n  mlym: [3430, 3439],\n  mong: [6160, 6169],\n  mymr: [4160, 4169],\n  orya: [2918, 2927],\n  tamldec: [3046, 3055],\n  telu: [3174, 3183],\n  thai: [3664, 3673],\n  tibt: [3872, 3881],\n};\n\nconst hanidecChars = numberingSystems.hanidec.replace(/[\\[|\\]]/g, \"\").split(\"\");\n\nexport function parseDigits(str) {\n  let value = parseInt(str, 10);\n  if (isNaN(value)) {\n    value = \"\";\n    for (let i = 0; i < str.length; i++) {\n      const code = str.charCodeAt(i);\n\n      if (str[i].search(numberingSystems.hanidec) !== -1) {\n        value += hanidecChars.indexOf(str[i]);\n      } else {\n        for (const key in numberingSystemsUTF16) {\n          const [min, max] = numberingSystemsUTF16[key];\n          if (code >= min && code <= max) {\n            value += code - min;\n          }\n        }\n      }\n    }\n    return parseInt(value, 10);\n  } else {\n    return value;\n  }\n}\n\n// cache of {numberingSystem: {append: regex}}\nlet digitRegexCache = {};\nexport function resetDigitRegexCache() {\n  digitRegexCache = {};\n}\n\nexport function digitRegex({ numberingSystem }, append = \"\") {\n  const ns = numberingSystem || \"latn\";\n\n  if (!digitRegexCache[ns]) {\n    digitRegexCache[ns] = {};\n  }\n  if (!digitRegexCache[ns][append]) {\n    digitRegexCache[ns][append] = new RegExp(`${numberingSystems[ns]}${append}`);\n  }\n\n  return digitRegexCache[ns][append];\n}\n","import SystemZone from \"./zones/systemZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport Locale from \"./impl/locale.js\";\nimport DateTime from \"./datetime.js\";\n\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\nimport { validateWeekSettings } from \"./impl/util.js\";\nimport { resetDigitRegexCache } from \"./impl/digits.js\";\n\nlet now = () => Date.now(),\n  defaultZone = \"system\",\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  twoDigitCutoffYear = 60,\n  throwOnInvalid,\n  defaultWeekSettings = null;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport default class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\n   * @type {function}\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * Use the value \"system\" to reset this value to the system's time zone.\n   * @type {string}\n   */\n  static set defaultZone(zone) {\n    defaultZone = zone;\n  }\n\n  /**\n   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\n   * The default value is the system's time zone (the one set on the machine that runs this code).\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return normalizeZone(defaultZone, SystemZone.instance);\n  }\n\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n\n  /**\n   * @typedef {Object} WeekSettings\n   * @property {number} firstDay\n   * @property {number} minimalDays\n   * @property {number[]} weekend\n   */\n\n  /**\n   * @return {WeekSettings|null}\n   */\n  static get defaultWeekSettings() {\n    return defaultWeekSettings;\n  }\n\n  /**\n   * Allows overriding the default locale week settings, i.e. the start of the week, the weekend and\n   * how many days are required in the first week of a year.\n   * Does not affect existing instances.\n   *\n   * @param {WeekSettings|null} weekSettings\n   */\n  static set defaultWeekSettings(weekSettings) {\n    defaultWeekSettings = validateWeekSettings(weekSettings);\n  }\n\n  /**\n   * Get the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.\n   * @type {number}\n   */\n  static get twoDigitCutoffYear() {\n    return twoDigitCutoffYear;\n  }\n\n  /**\n   * Set the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.\n   * @type {number}\n   * @example Settings.twoDigitCutoffYear = 0 // all 'yy' are interpreted as 20th century\n   * @example Settings.twoDigitCutoffYear = 99 // all 'yy' are interpreted as 21st century\n   * @example Settings.twoDigitCutoffYear = 50 // '49' -> 2049; '50' -> 1950\n   * @example Settings.twoDigitCutoffYear = 1950 // interpreted as 50\n   * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpreted as 50\n   */\n  static set twoDigitCutoffYear(cutoffYear) {\n    twoDigitCutoffYear = cutoffYear % 100;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n    DateTime.resetCache();\n    resetDigitRegexCache();\n  }\n}\n","export default class Invalid {\n  constructor(reason, explanation) {\n    this.reason = reason;\n    this.explanation = explanation;\n  }\n\n  toMessage() {\n    if (this.explanation) {\n      return `${this.reason}: ${this.explanation}`;\n    } else {\n      return this.reason;\n    }\n  }\n}\n","import {\n  integerBetween,\n  isLeapYear,\n  timeObject,\n  daysInYear,\n  daysInMonth,\n  weeksInWeekYear,\n  isInteger,\n  isUndefined,\n} from \"./util.js\";\nimport Invalid from \"./invalid.js\";\nimport { ConflictingSpecificationError } from \"../errors.js\";\n\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction unitOutOfRange(unit, value) {\n  return new Invalid(\n    \"unit out of range\",\n    `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`\n  );\n}\n\nexport function dayOfWeek(year, month, day) {\n  const d = new Date(Date.UTC(year, month - 1, day));\n\n  if (year < 100 && year >= 0) {\n    d.setUTCFullYear(d.getUTCFullYear() - 1900);\n  }\n\n  const js = d.getUTCDay();\n\n  return js === 0 ? 7 : js;\n}\n\nfunction computeOrdinal(year, month, day) {\n  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year, ordinal) {\n  const table = isLeapYear(year) ? leapLadder : nonLeapLadder,\n    month0 = table.findIndex((i) => i < ordinal),\n    day = ordinal - table[month0];\n  return { month: month0 + 1, day };\n}\n\nexport function isoWeekdayToLocal(isoWeekday, startOfWeek) {\n  return ((isoWeekday - startOfWeek + 7) % 7) + 1;\n}\n\n/**\n * @private\n */\n\nexport function gregorianToWeek(gregObj, minDaysInFirstWeek = 4, startOfWeek = 1) {\n  const { year, month, day } = gregObj,\n    ordinal = computeOrdinal(year, month, day),\n    weekday = isoWeekdayToLocal(dayOfWeek(year, month, day), startOfWeek);\n\n  let weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7),\n    weekYear;\n\n  if (weekNumber < 1) {\n    weekYear = year - 1;\n    weekNumber = weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek);\n  } else if (weekNumber > weeksInWeekYear(year, minDaysInFirstWeek, startOfWeek)) {\n    weekYear = year + 1;\n    weekNumber = 1;\n  } else {\n    weekYear = year;\n  }\n\n  return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };\n}\n\nexport function weekToGregorian(weekData, minDaysInFirstWeek = 4, startOfWeek = 1) {\n  const { weekYear, weekNumber, weekday } = weekData,\n    weekdayOfJan4 = isoWeekdayToLocal(dayOfWeek(weekYear, 1, minDaysInFirstWeek), startOfWeek),\n    yearInDays = daysInYear(weekYear);\n\n  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek,\n    year;\n\n  if (ordinal < 1) {\n    year = weekYear - 1;\n    ordinal += daysInYear(year);\n  } else if (ordinal > yearInDays) {\n    year = weekYear + 1;\n    ordinal -= daysInYear(weekYear);\n  } else {\n    year = weekYear;\n  }\n\n  const { month, day } = uncomputeOrdinal(year, ordinal);\n  return { year, month, day, ...timeObject(weekData) };\n}\n\nexport function gregorianToOrdinal(gregData) {\n  const { year, month, day } = gregData;\n  const ordinal = computeOrdinal(year, month, day);\n  return { year, ordinal, ...timeObject(gregData) };\n}\n\nexport function ordinalToGregorian(ordinalData) {\n  const { year, ordinal } = ordinalData;\n  const { month, day } = uncomputeOrdinal(year, ordinal);\n  return { year, month, day, ...timeObject(ordinalData) };\n}\n\n/**\n * Check if local week units like localWeekday are used in obj.\n * If so, validates that they are not mixed with ISO week units and then copies them to the normal week unit properties.\n * Modifies obj in-place!\n * @param obj the object values\n */\nexport function usesLocalWeekValues(obj, loc) {\n  const hasLocaleWeekData =\n    !isUndefined(obj.localWeekday) ||\n    !isUndefined(obj.localWeekNumber) ||\n    !isUndefined(obj.localWeekYear);\n  if (hasLocaleWeekData) {\n    const hasIsoWeekData =\n      !isUndefined(obj.weekday) || !isUndefined(obj.weekNumber) || !isUndefined(obj.weekYear);\n\n    if (hasIsoWeekData) {\n      throw new ConflictingSpecificationError(\n        \"Cannot mix locale-based week fields with ISO-based week fields\"\n      );\n    }\n    if (!isUndefined(obj.localWeekday)) obj.weekday = obj.localWeekday;\n    if (!isUndefined(obj.localWeekNumber)) obj.weekNumber = obj.localWeekNumber;\n    if (!isUndefined(obj.localWeekYear)) obj.weekYear = obj.localWeekYear;\n    delete obj.localWeekday;\n    delete obj.localWeekNumber;\n    delete obj.localWeekYear;\n    return {\n      minDaysInFirstWeek: loc.getMinDaysInFirstWeek(),\n      startOfWeek: loc.getStartOfWeek(),\n    };\n  } else {\n    return { minDaysInFirstWeek: 4, startOfWeek: 1 };\n  }\n}\n\nexport function hasInvalidWeekData(obj, minDaysInFirstWeek = 4, startOfWeek = 1) {\n  const validYear = isInteger(obj.weekYear),\n    validWeek = integerBetween(\n      obj.weekNumber,\n      1,\n      weeksInWeekYear(obj.weekYear, minDaysInFirstWeek, startOfWeek)\n    ),\n    validWeekday = integerBetween(obj.weekday, 1, 7);\n\n  if (!validYear) {\n    return unitOutOfRange(\"weekYear\", obj.weekYear);\n  } else if (!validWeek) {\n    return unitOutOfRange(\"week\", obj.weekNumber);\n  } else if (!validWeekday) {\n    return unitOutOfRange(\"weekday\", obj.weekday);\n  } else return false;\n}\n\nexport function hasInvalidOrdinalData(obj) {\n  const validYear = isInteger(obj.year),\n    validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validOrdinal) {\n    return unitOutOfRange(\"ordinal\", obj.ordinal);\n  } else return false;\n}\n\nexport function hasInvalidGregorianData(obj) {\n  const validYear = isInteger(obj.year),\n    validMonth = integerBetween(obj.month, 1, 12),\n    validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validMonth) {\n    return unitOutOfRange(\"month\", obj.month);\n  } else if (!validDay) {\n    return unitOutOfRange(\"day\", obj.day);\n  } else return false;\n}\n\nexport function hasInvalidTimeData(obj) {\n  const { hour, minute, second, millisecond } = obj;\n  const validHour =\n      integerBetween(hour, 0, 23) ||\n      (hour === 24 && minute === 0 && second === 0 && millisecond === 0),\n    validMinute = integerBetween(minute, 0, 59),\n    validSecond = integerBetween(second, 0, 59),\n    validMillisecond = integerBetween(millisecond, 0, 999);\n\n  if (!validHour) {\n    return unitOutOfRange(\"hour\", hour);\n  } else if (!validMinute) {\n    return unitOutOfRange(\"minute\", minute);\n  } else if (!validSecond) {\n    return unitOutOfRange(\"second\", second);\n  } else if (!validMillisecond) {\n    return unitOutOfRange(\"millisecond\", millisecond);\n  } else return false;\n}\n","/*\n  This is just a junk drawer, containing anything used across multiple classes.\n  Because Luxon is small(ish), this should stay small and we won't worry about splitting\n  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.\n*/\n\nimport { InvalidArgumentError } from \"../errors.js\";\nimport Settings from \"../settings.js\";\nimport { dayOfWeek, isoWeekdayToLocal } from \"./conversions.js\";\n\n/**\n * @private\n */\n\n// TYPES\n\nexport function isUndefined(o) {\n  return typeof o === \"undefined\";\n}\n\nexport function isNumber(o) {\n  return typeof o === \"number\";\n}\n\nexport function isInteger(o) {\n  return typeof o === \"number\" && o % 1 === 0;\n}\n\nexport function isString(o) {\n  return typeof o === \"string\";\n}\n\nexport function isDate(o) {\n  return Object.prototype.toString.call(o) === \"[object Date]\";\n}\n\n// CAPABILITIES\n\nexport function hasRelative() {\n  try {\n    return typeof Intl !== \"undefined\" && !!Intl.RelativeTimeFormat;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function hasLocaleWeekInfo() {\n  try {\n    return (\n      typeof Intl !== \"undefined\" &&\n      !!Intl.Locale &&\n      (\"weekInfo\" in Intl.Locale.prototype || \"getWeekInfo\" in Intl.Locale.prototype)\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n// OBJECTS AND ARRAYS\n\nexport function maybeArray(thing) {\n  return Array.isArray(thing) ? thing : [thing];\n}\n\nexport function bestBy(arr, by, compare) {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  return arr.reduce((best, next) => {\n    const pair = [by(next), next];\n    if (!best) {\n      return pair;\n    } else if (compare(best[0], pair[0]) === best[0]) {\n      return best;\n    } else {\n      return pair;\n    }\n  }, null)[1];\n}\n\nexport function pick(obj, keys) {\n  return keys.reduce((a, k) => {\n    a[k] = obj[k];\n    return a;\n  }, {});\n}\n\nexport function hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nexport function validateWeekSettings(settings) {\n  if (settings == null) {\n    return null;\n  } else if (typeof settings !== \"object\") {\n    throw new InvalidArgumentError(\"Week settings must be an object\");\n  } else {\n    if (\n      !integerBetween(settings.firstDay, 1, 7) ||\n      !integerBetween(settings.minimalDays, 1, 7) ||\n      !Array.isArray(settings.weekend) ||\n      settings.weekend.some((v) => !integerBetween(v, 1, 7))\n    ) {\n      throw new InvalidArgumentError(\"Invalid week settings\");\n    }\n    return {\n      firstDay: settings.firstDay,\n      minimalDays: settings.minimalDays,\n      weekend: Array.from(settings.weekend),\n    };\n  }\n}\n\n// NUMBERS AND STRINGS\n\nexport function integerBetween(thing, bottom, top) {\n  return isInteger(thing) && thing >= bottom && thing <= top;\n}\n\n// x % n but takes the sign of n instead of x\nexport function floorMod(x, n) {\n  return x - n * Math.floor(x / n);\n}\n\nexport function padStart(input, n = 2) {\n  const isNeg = input < 0;\n  let padded;\n  if (isNeg) {\n    padded = \"-\" + (\"\" + -input).padStart(n, \"0\");\n  } else {\n    padded = (\"\" + input).padStart(n, \"0\");\n  }\n  return padded;\n}\n\nexport function parseInteger(string) {\n  if (isUndefined(string) || string === null || string === \"\") {\n    return undefined;\n  } else {\n    return parseInt(string, 10);\n  }\n}\n\nexport function parseFloating(string) {\n  if (isUndefined(string) || string === null || string === \"\") {\n    return undefined;\n  } else {\n    return parseFloat(string);\n  }\n}\n\nexport function parseMillis(fraction) {\n  // Return undefined (instead of 0) in these cases, where fraction is not set\n  if (isUndefined(fraction) || fraction === null || fraction === \"\") {\n    return undefined;\n  } else {\n    const f = parseFloat(\"0.\" + fraction) * 1000;\n    return Math.floor(f);\n  }\n}\n\nexport function roundTo(number, digits, towardZero = false) {\n  const factor = 10 ** digits,\n    rounder = towardZero ? Math.trunc : Math.round;\n  return rounder(number * factor) / factor;\n}\n\n// DATE BASICS\n\nexport function isLeapYear(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nexport function daysInYear(year) {\n  return isLeapYear(year) ? 366 : 365;\n}\n\nexport function daysInMonth(year, month) {\n  const modMonth = floorMod(month - 1, 12) + 1,\n    modYear = year + (month - modMonth) / 12;\n\n  if (modMonth === 2) {\n    return isLeapYear(modYear) ? 29 : 28;\n  } else {\n    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];\n  }\n}\n\n// convert a calendar object to a local timestamp (epoch, but with the offset baked in)\nexport function objToLocalTS(obj) {\n  let d = Date.UTC(\n    obj.year,\n    obj.month - 1,\n    obj.day,\n    obj.hour,\n    obj.minute,\n    obj.second,\n    obj.millisecond\n  );\n\n  // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that\n  if (obj.year < 100 && obj.year >= 0) {\n    d = new Date(d);\n    // set the month and day again, this is necessary because year 2000 is a leap year, but year 100 is not\n    // so if obj.year is in 99, but obj.day makes it roll over into year 100,\n    // the calculations done by Date.UTC are using year 2000 - which is incorrect\n    d.setUTCFullYear(obj.year, obj.month - 1, obj.day);\n  }\n  return +d;\n}\n\n// adapted from moment.js: https://github.com/moment/moment/blob/000ac1800e620f770f4eb31b5ae908f6167b0ab2/src/lib/units/week-calendar-utils.js\nfunction firstWeekOffset(year, minDaysInFirstWeek, startOfWeek) {\n  const fwdlw = isoWeekdayToLocal(dayOfWeek(year, 1, minDaysInFirstWeek), startOfWeek);\n  return -fwdlw + minDaysInFirstWeek - 1;\n}\n\nexport function weeksInWeekYear(weekYear, minDaysInFirstWeek = 4, startOfWeek = 1) {\n  const weekOffset = firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);\n  const weekOffsetNext = firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);\n  return (daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;\n}\n\nexport function untruncateYear(year) {\n  if (year > 99) {\n    return year;\n  } else return year > Settings.twoDigitCutoffYear ? 1900 + year : 2000 + year;\n}\n\n// PARSING\n\nexport function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {\n  const date = new Date(ts),\n    intlOpts = {\n      hourCycle: \"h23\",\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    };\n\n  if (timeZone) {\n    intlOpts.timeZone = timeZone;\n  }\n\n  const modified = { timeZoneName: offsetFormat, ...intlOpts };\n\n  const parsed = new Intl.DateTimeFormat(locale, modified)\n    .formatToParts(date)\n    .find((m) => m.type.toLowerCase() === \"timezonename\");\n  return parsed ? parsed.value : null;\n}\n\n// signedOffset('-5', '30') -> -330\nexport function signedOffset(offHourStr, offMinuteStr) {\n  let offHour = parseInt(offHourStr, 10);\n\n  // don't || this because we want to preserve -0\n  if (Number.isNaN(offHour)) {\n    offHour = 0;\n  }\n\n  const offMin = parseInt(offMinuteStr, 10) || 0,\n    offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;\n  return offHour * 60 + offMinSigned;\n}\n\n// COERCION\n\nexport function asNumber(value) {\n  const numericValue = Number(value);\n  if (typeof value === \"boolean\" || value === \"\" || Number.isNaN(numericValue))\n    throw new InvalidArgumentError(`Invalid unit value ${value}`);\n  return numericValue;\n}\n\nexport function normalizeObject(obj, normalizer) {\n  const normalized = {};\n  for (const u in obj) {\n    if (hasOwnProperty(obj, u)) {\n      const v = obj[u];\n      if (v === undefined || v === null) continue;\n      normalized[normalizer(u)] = asNumber(v);\n    }\n  }\n  return normalized;\n}\n\n/**\n * Returns the offset's value as a string\n * @param {number} ts - Epoch milliseconds for which to get the offset\n * @param {string} format - What style of offset to return.\n *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n * @return {string}\n */\nexport function formatOffset(offset, format) {\n  const hours = Math.trunc(Math.abs(offset / 60)),\n    minutes = Math.trunc(Math.abs(offset % 60)),\n    sign = offset >= 0 ? \"+\" : \"-\";\n\n  switch (format) {\n    case \"short\":\n      return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;\n    case \"narrow\":\n      return `${sign}${hours}${minutes > 0 ? `:${minutes}` : \"\"}`;\n    case \"techie\":\n      return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;\n    default:\n      throw new RangeError(`Value format ${format} is out of range for property format`);\n  }\n}\n\nexport function timeObject(obj) {\n  return pick(obj, [\"hour\", \"minute\", \"second\", \"millisecond\"]);\n}\n","import * as Formats from \"./formats.js\";\nimport { pick } from \"./util.js\";\n\nfunction stringify(obj) {\n  return JSON.stringify(obj, Object.keys(obj).sort());\n}\n\n/**\n * @private\n */\n\nexport const monthsLong = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nexport const monthsShort = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n\nexport const monthsNarrow = [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"];\n\nexport function months(length) {\n  switch (length) {\n    case \"narrow\":\n      return [...monthsNarrow];\n    case \"short\":\n      return [...monthsShort];\n    case \"long\":\n      return [...monthsLong];\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"];\n    case \"2-digit\":\n      return [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\n    default:\n      return null;\n  }\n}\n\nexport const weekdaysLong = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\",\n];\n\nexport const weekdaysShort = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n\nexport const weekdaysNarrow = [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"];\n\nexport function weekdays(length) {\n  switch (length) {\n    case \"narrow\":\n      return [...weekdaysNarrow];\n    case \"short\":\n      return [...weekdaysShort];\n    case \"long\":\n      return [...weekdaysLong];\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"];\n    default:\n      return null;\n  }\n}\n\nexport const meridiems = [\"AM\", \"PM\"];\n\nexport const erasLong = [\"Before Christ\", \"Anno Domini\"];\n\nexport const erasShort = [\"BC\", \"AD\"];\n\nexport const erasNarrow = [\"B\", \"A\"];\n\nexport function eras(length) {\n  switch (length) {\n    case \"narrow\":\n      return [...erasNarrow];\n    case \"short\":\n      return [...erasShort];\n    case \"long\":\n      return [...erasLong];\n    default:\n      return null;\n  }\n}\n\nexport function meridiemForDateTime(dt) {\n  return meridiems[dt.hour < 12 ? 0 : 1];\n}\n\nexport function weekdayForDateTime(dt, length) {\n  return weekdays(length)[dt.weekday - 1];\n}\n\nexport function monthForDateTime(dt, length) {\n  return months(length)[dt.month - 1];\n}\n\nexport function eraForDateTime(dt, length) {\n  return eras(length)[dt.year < 0 ? 0 : 1];\n}\n\nexport function formatRelativeTime(unit, count, numeric = \"always\", narrow = false) {\n  const units = {\n    years: [\"year\", \"yr.\"],\n    quarters: [\"quarter\", \"qtr.\"],\n    months: [\"month\", \"mo.\"],\n    weeks: [\"week\", \"wk.\"],\n    days: [\"day\", \"day\", \"days\"],\n    hours: [\"hour\", \"hr.\"],\n    minutes: [\"minute\", \"min.\"],\n    seconds: [\"second\", \"sec.\"],\n  };\n\n  const lastable = [\"hours\", \"minutes\", \"seconds\"].indexOf(unit) === -1;\n\n  if (numeric === \"auto\" && lastable) {\n    const isDay = unit === \"days\";\n    switch (count) {\n      case 1:\n        return isDay ? \"tomorrow\" : `next ${units[unit][0]}`;\n      case -1:\n        return isDay ? \"yesterday\" : `last ${units[unit][0]}`;\n      case 0:\n        return isDay ? \"today\" : `this ${units[unit][0]}`;\n      default: // fall through\n    }\n  }\n\n  const isInPast = Object.is(count, -0) || count < 0,\n    fmtValue = Math.abs(count),\n    singular = fmtValue === 1,\n    lilUnits = units[unit],\n    fmtUnit = narrow\n      ? singular\n        ? lilUnits[1]\n        : lilUnits[2] || lilUnits[1]\n      : singular\n      ? units[unit][0]\n      : unit;\n  return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;\n}\n\nexport function formatString(knownFormat) {\n  // these all have the offsets removed because we don't have access to them\n  // without all the intl stuff this is backfilling\n  const filtered = pick(knownFormat, [\n      \"weekday\",\n      \"era\",\n      \"year\",\n      \"month\",\n      \"day\",\n      \"hour\",\n      \"minute\",\n      \"second\",\n      \"timeZoneName\",\n      \"hourCycle\",\n    ]),\n    key = stringify(filtered),\n    dateTimeHuge = \"EEEE, LLLL d, yyyy, h:mm a\";\n  switch (key) {\n    case stringify(Formats.DATE_SHORT):\n      return \"M/d/yyyy\";\n    case stringify(Formats.DATE_MED):\n      return \"LLL d, yyyy\";\n    case stringify(Formats.DATE_MED_WITH_WEEKDAY):\n      return \"EEE, LLL d, yyyy\";\n    case stringify(Formats.DATE_FULL):\n      return \"LLLL d, yyyy\";\n    case stringify(Formats.DATE_HUGE):\n      return \"EEEE, LLLL d, yyyy\";\n    case stringify(Formats.TIME_SIMPLE):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_WITH_SECONDS):\n      return \"h:mm:ss a\";\n    case stringify(Formats.TIME_WITH_SHORT_OFFSET):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_WITH_LONG_OFFSET):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_24_SIMPLE):\n      return \"HH:mm\";\n    case stringify(Formats.TIME_24_WITH_SECONDS):\n      return \"HH:mm:ss\";\n    case stringify(Formats.TIME_24_WITH_SHORT_OFFSET):\n      return \"HH:mm\";\n    case stringify(Formats.TIME_24_WITH_LONG_OFFSET):\n      return \"HH:mm\";\n    case stringify(Formats.DATETIME_SHORT):\n      return \"M/d/yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_MED):\n      return \"LLL d, yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_FULL):\n      return \"LLLL d, yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_HUGE):\n      return dateTimeHuge;\n    case stringify(Formats.DATETIME_SHORT_WITH_SECONDS):\n      return \"M/d/yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_MED_WITH_SECONDS):\n      return \"LLL d, yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_MED_WITH_WEEKDAY):\n      return \"EEE, d LLL yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_FULL_WITH_SECONDS):\n      return \"LLLL d, yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_HUGE_WITH_SECONDS):\n      return \"EEEE, LLLL d, yyyy, h:mm:ss a\";\n    default:\n      return dateTimeHuge;\n  }\n}\n","import * as English from \"./english.js\";\nimport * as Formats from \"./formats.js\";\nimport { padStart } from \"./util.js\";\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = \"\";\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\nconst macroTokenToFormatOpts = {\n  D: Formats.DATE_SHORT,\n  DD: Formats.DATE_MED,\n  DDD: Formats.DATE_FULL,\n  DDDD: Formats.DATE_HUGE,\n  t: Formats.TIME_SIMPLE,\n  tt: Formats.TIME_WITH_SECONDS,\n  ttt: Formats.TIME_WITH_SHORT_OFFSET,\n  tttt: Formats.TIME_WITH_LONG_OFFSET,\n  T: Formats.TIME_24_SIMPLE,\n  TT: Formats.TIME_24_WITH_SECONDS,\n  TTT: Formats.TIME_24_WITH_SHORT_OFFSET,\n  TTTT: Formats.TIME_24_WITH_LONG_OFFSET,\n  f: Formats.DATETIME_SHORT,\n  ff: Formats.DATETIME_MED,\n  fff: Formats.DATETIME_FULL,\n  ffff: Formats.DATETIME_HUGE,\n  F: Formats.DATETIME_SHORT_WITH_SECONDS,\n  FF: Formats.DATETIME_MED_WITH_SECONDS,\n  FFF: Formats.DATETIME_FULL_WITH_SECONDS,\n  FFFF: Formats.DATETIME_HUGE_WITH_SECONDS,\n};\n\n/**\n * @private\n */\n\nexport default class Formatter {\n  static create(locale, opts = {}) {\n    return new Formatter(locale, opts);\n  }\n\n  static parseFormat(fmt) {\n    // white-space is always considered a literal in user-provided formats\n    // the \" \" token has a special meaning (see unitForToken)\n\n    let current = null,\n      currentFull = \"\",\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed || /^\\s+$/.test(currentFull), val: currentFull });\n        }\n        current = null;\n        currentFull = \"\";\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: /^\\s+$/.test(currentFull), val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed || /^\\s+$/.test(currentFull), val: currentFull });\n    }\n\n    return splits;\n  }\n\n  static macroTokenToFormatOpts(token) {\n    return macroTokenToFormatOpts[token];\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n\n  formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n    const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.format();\n  }\n\n  dtFormatter(dt, opts = {}) {\n    return this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n  }\n\n  formatDateTime(dt, opts) {\n    return this.dtFormatter(dt, opts).format();\n  }\n\n  formatDateTimeParts(dt, opts) {\n    return this.dtFormatter(dt, opts).formatToParts();\n  }\n\n  formatInterval(interval, opts) {\n    const df = this.dtFormatter(interval.start, opts);\n    return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());\n  }\n\n  resolvedOptions(dt, opts) {\n    return this.dtFormatter(dt, opts).resolvedOptions();\n  }\n\n  num(n, p = 0) {\n    // we get some perf out of doing this here, annoyingly\n    if (this.opts.forceSimple) {\n      return padStart(n, p);\n    }\n\n    const opts = { ...this.opts };\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const knownEnglish = this.loc.listingMode() === \"en\",\n      useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== \"gregory\",\n      string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = (opts) => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return \"Z\";\n        }\n\n        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : \"\";\n      },\n      meridiem = () =>\n        knownEnglish\n          ? English.meridiemForDateTime(dt)\n          : string({ hour: \"numeric\", hourCycle: \"h12\" }, \"dayperiod\"),\n      month = (length, standalone) =>\n        knownEnglish\n          ? English.monthForDateTime(dt, length)\n          : string(standalone ? { month: length } : { month: length, day: \"numeric\" }, \"month\"),\n      weekday = (length, standalone) =>\n        knownEnglish\n          ? English.weekdayForDateTime(dt, length)\n          : string(\n              standalone ? { weekday: length } : { weekday: length, month: \"long\", day: \"numeric\" },\n              \"weekday\"\n            ),\n      maybeMacro = (token) => {\n        const formatOpts = Formatter.macroTokenToFormatOpts(token);\n        if (formatOpts) {\n          return this.formatWithSystemDefault(dt, formatOpts);\n        } else {\n          return token;\n        }\n      },\n      era = (length) =>\n        knownEnglish ? English.eraForDateTime(dt, length) : string({ era: length }, \"era\"),\n      tokenToString = (token) => {\n        // Where possible: https://cldr.unicode.org/translation/date-time/date-time-symbols\n        switch (token) {\n          // ms\n          case \"S\":\n            return this.num(dt.millisecond);\n          case \"u\":\n          // falls through\n          case \"SSS\":\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case \"s\":\n            return this.num(dt.second);\n          case \"ss\":\n            return this.num(dt.second, 2);\n          // fractional seconds\n          case \"uu\":\n            return this.num(Math.floor(dt.millisecond / 10), 2);\n          case \"uuu\":\n            return this.num(Math.floor(dt.millisecond / 100));\n          // minutes\n          case \"m\":\n            return this.num(dt.minute);\n          case \"mm\":\n            return this.num(dt.minute, 2);\n          // hours\n          case \"h\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n          case \"hh\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n          case \"H\":\n            return this.num(dt.hour);\n          case \"HH\":\n            return this.num(dt.hour, 2);\n          // offset\n          case \"Z\":\n            // like +6\n            return formatOffset({ format: \"narrow\", allowZ: this.opts.allowZ });\n          case \"ZZ\":\n            // like +06:00\n            return formatOffset({ format: \"short\", allowZ: this.opts.allowZ });\n          case \"ZZZ\":\n            // like +0600\n            return formatOffset({ format: \"techie\", allowZ: this.opts.allowZ });\n          case \"ZZZZ\":\n            // like EST\n            return dt.zone.offsetName(dt.ts, { format: \"short\", locale: this.loc.locale });\n          case \"ZZZZZ\":\n            // like Eastern Standard Time\n            return dt.zone.offsetName(dt.ts, { format: \"long\", locale: this.loc.locale });\n          // zone\n          case \"z\":\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n          case \"a\":\n            return meridiem();\n          // dates\n          case \"d\":\n            return useDateTimeFormatter ? string({ day: \"numeric\" }, \"day\") : this.num(dt.day);\n          case \"dd\":\n            return useDateTimeFormatter ? string({ day: \"2-digit\" }, \"day\") : this.num(dt.day, 2);\n          // weekdays - standalone\n          case \"c\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"ccc\":\n            // like 'Tues'\n            return weekday(\"short\", true);\n          case \"cccc\":\n            // like 'Tuesday'\n            return weekday(\"long\", true);\n          case \"ccccc\":\n            // like 'T'\n            return weekday(\"narrow\", true);\n          // weekdays - format\n          case \"E\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"EEE\":\n            // like 'Tues'\n            return weekday(\"short\", false);\n          case \"EEEE\":\n            // like 'Tuesday'\n            return weekday(\"long\", false);\n          case \"EEEEE\":\n            // like 'T'\n            return weekday(\"narrow\", false);\n          // months - standalone\n          case \"L\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"LL\":\n            // like 01, doesn't seem to work\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"LLL\":\n            // like Jan\n            return month(\"short\", true);\n          case \"LLLL\":\n            // like January\n            return month(\"long\", true);\n          case \"LLLLL\":\n            // like J\n            return month(\"narrow\", true);\n          // months - format\n          case \"M\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"MM\":\n            // like 01\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"MMM\":\n            // like Jan\n            return month(\"short\", false);\n          case \"MMMM\":\n            // like January\n            return month(\"long\", false);\n          case \"MMMMM\":\n            // like J\n            return month(\"narrow\", false);\n          // years\n          case \"y\":\n            // like 2014\n            return useDateTimeFormatter ? string({ year: \"numeric\" }, \"year\") : this.num(dt.year);\n          case \"yy\":\n            // like 14\n            return useDateTimeFormatter\n              ? string({ year: \"2-digit\" }, \"year\")\n              : this.num(dt.year.toString().slice(-2), 2);\n          case \"yyyy\":\n            // like 0012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 4);\n          case \"yyyyyy\":\n            // like 000012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 6);\n          // eras\n          case \"G\":\n            // like AD\n            return era(\"short\");\n          case \"GG\":\n            // like Anno Domini\n            return era(\"long\");\n          case \"GGGGG\":\n            return era(\"narrow\");\n          case \"kk\":\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case \"kkkk\":\n            return this.num(dt.weekYear, 4);\n          case \"W\":\n            return this.num(dt.weekNumber);\n          case \"WW\":\n            return this.num(dt.weekNumber, 2);\n          case \"n\":\n            return this.num(dt.localWeekNumber);\n          case \"nn\":\n            return this.num(dt.localWeekNumber, 2);\n          case \"ii\":\n            return this.num(dt.localWeekYear.toString().slice(-2), 2);\n          case \"iiii\":\n            return this.num(dt.localWeekYear, 4);\n          case \"o\":\n            return this.num(dt.ordinal);\n          case \"ooo\":\n            return this.num(dt.ordinal, 3);\n          case \"q\":\n            // like 1\n            return this.num(dt.quarter);\n          case \"qq\":\n            // like 01\n            return this.num(dt.quarter, 2);\n          case \"X\":\n            return this.num(Math.floor(dt.ts / 1000));\n          case \"x\":\n            return this.num(dt.ts);\n          default:\n            return maybeMacro(token);\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = (token) => {\n        switch (token[0]) {\n          case \"S\":\n            return \"millisecond\";\n          case \"s\":\n            return \"second\";\n          case \"m\":\n            return \"minute\";\n          case \"h\":\n            return \"hour\";\n          case \"d\":\n            return \"day\";\n          case \"w\":\n            return \"week\";\n          case \"M\":\n            return \"month\";\n          case \"y\":\n            return \"year\";\n          default:\n            return null;\n        }\n      },\n      tokenToString = (lildur) => (token) => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n","import {\n  untruncateYear,\n  signedOffset,\n  parseInteger,\n  parseMillis,\n  isUndefined,\n  parseFloating,\n} from \"./util.js\";\nimport * as English from \"./english.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n\n/*\n * This file handles parsing for well-specified formats. Here's how it works:\n * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.\n * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object\n * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.\n * Extractors can take a \"cursor\" representing the offset in the match to look at. This makes it easy to combine extractors.\n * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.\n * Some extractions are super dumb and simpleParse and fromStrings help DRY them.\n */\n\nconst ianaRegex = /[A-Za-z_+-]{1,256}(?::?\\/[A-Za-z0-9_+-]{1,256}(?:\\/[A-Za-z0-9_+-]{1,256})?)?/;\n\nfunction combineRegexes(...regexes) {\n  const full = regexes.reduce((f, r) => f + r.source, \"\");\n  return RegExp(`^${full}$`);\n}\n\nfunction combineExtractors(...extractors) {\n  return (m) =>\n    extractors\n      .reduce(\n        ([mergedVals, mergedZone, cursor], ex) => {\n          const [val, zone, next] = ex(m, cursor);\n          return [{ ...mergedVals, ...val }, zone || mergedZone, next];\n        },\n        [{}, null, 1]\n      )\n      .slice(0, 2);\n}\n\nfunction parse(s, ...patterns) {\n  if (s == null) {\n    return [null, null];\n  }\n\n  for (const [regex, extractor] of patterns) {\n    const m = regex.exec(s);\n    if (m) {\n      return extractor(m);\n    }\n  }\n  return [null, null];\n}\n\nfunction simpleParse(...keys) {\n  return (match, cursor) => {\n    const ret = {};\n    let i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInteger(match[cursor + i]);\n    }\n    return [ret, null, cursor + i];\n  };\n}\n\n// ISO and SQL parsing\nconst offsetRegex = /(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)/;\nconst isoExtendedZone = `(?:${offsetRegex.source}?(?:\\\\[(${ianaRegex.source})\\\\])?)?`;\nconst isoTimeBaseRegex = /(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d{1,30}))?)?)?/;\nconst isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);\nconst isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);\nconst isoYmdRegex = /([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/;\nconst isoWeekRegex = /(\\d{4})-?W(\\d\\d)(?:-?(\\d))?/;\nconst isoOrdinalRegex = /(\\d{4})-?(\\d{3})/;\nconst extractISOWeekData = simpleParse(\"weekYear\", \"weekNumber\", \"weekDay\");\nconst extractISOOrdinalData = simpleParse(\"year\", \"ordinal\");\nconst sqlYmdRegex = /(\\d{4})-(\\d\\d)-(\\d\\d)/; // dumbed-down version of the ISO one\nconst sqlTimeRegex = RegExp(\n  `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`\n);\nconst sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);\n\nfunction int(match, pos, fallback) {\n  const m = match[pos];\n  return isUndefined(m) ? fallback : parseInteger(m);\n}\n\nfunction extractISOYmd(match, cursor) {\n  const item = {\n    year: int(match, cursor),\n    month: int(match, cursor + 1, 1),\n    day: int(match, cursor + 2, 1),\n  };\n\n  return [item, null, cursor + 3];\n}\n\nfunction extractISOTime(match, cursor) {\n  const item = {\n    hours: int(match, cursor, 0),\n    minutes: int(match, cursor + 1, 0),\n    seconds: int(match, cursor + 2, 0),\n    milliseconds: parseMillis(match[cursor + 3]),\n  };\n\n  return [item, null, cursor + 4];\n}\n\nfunction extractISOOffset(match, cursor) {\n  const local = !match[cursor] && !match[cursor + 1],\n    fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),\n    zone = local ? null : FixedOffsetZone.instance(fullOffset);\n  return [{}, zone, cursor + 3];\n}\n\nfunction extractIANAZone(match, cursor) {\n  const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;\n  return [{}, zone, cursor + 1];\n}\n\n// ISO time parsing\n\nconst isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);\n\n// ISO duration parsing\n\nconst isoDuration =\n  /^-?P(?:(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)Y)?(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)M)?(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)W)?(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)D)?(?:T(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)H)?(?:(-?\\d{1,20}(?:\\.\\d{1,20})?)M)?(?:(-?\\d{1,20})(?:[.,](-?\\d{1,20}))?S)?)?)$/;\n\nfunction extractISODuration(match) {\n  const [s, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] =\n    match;\n\n  const hasNegativePrefix = s[0] === \"-\";\n  const negativeSeconds = secondStr && secondStr[0] === \"-\";\n\n  const maybeNegate = (num, force = false) =>\n    num !== undefined && (force || (num && hasNegativePrefix)) ? -num : num;\n\n  return [\n    {\n      years: maybeNegate(parseFloating(yearStr)),\n      months: maybeNegate(parseFloating(monthStr)),\n      weeks: maybeNegate(parseFloating(weekStr)),\n      days: maybeNegate(parseFloating(dayStr)),\n      hours: maybeNegate(parseFloating(hourStr)),\n      minutes: maybeNegate(parseFloating(minuteStr)),\n      seconds: maybeNegate(parseFloating(secondStr), secondStr === \"-0\"),\n      milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds),\n    },\n  ];\n}\n\n// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\nconst obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60,\n};\n\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  const result = {\n    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),\n    month: English.monthsShort.indexOf(monthStr) + 1,\n    day: parseInteger(dayStr),\n    hour: parseInteger(hourStr),\n    minute: parseInteger(minuteStr),\n  };\n\n  if (secondStr) result.second = parseInteger(secondStr);\n  if (weekdayStr) {\n    result.weekday =\n      weekdayStr.length > 3\n        ? English.weekdaysLong.indexOf(weekdayStr) + 1\n        : English.weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  return result;\n}\n\n// RFC 2822/5322\nconst rfc2822 =\n  /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match) {\n  const [\n      ,\n      weekdayStr,\n      dayStr,\n      monthStr,\n      yearStr,\n      hourStr,\n      minuteStr,\n      secondStr,\n      obsOffset,\n      milOffset,\n      offHourStr,\n      offMinuteStr,\n    ] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n\n  let offset;\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s\n    .replace(/\\([^()]*\\)|[\\n\\t]/g, \" \")\n    .replace(/(\\s\\s+)/g, \" \")\n    .trim();\n}\n\n// http date\n\nconst rfc1123 =\n    /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  rfc850 =\n    /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  ascii =\n    /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match) {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match) {\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nconst isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);\nconst isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);\nconst isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);\nconst isoTimeCombinedRegex = combineRegexes(isoTimeRegex);\n\nconst extractISOYmdTimeAndOffset = combineExtractors(\n  extractISOYmd,\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\nconst extractISOWeekTimeAndOffset = combineExtractors(\n  extractISOWeekData,\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\nconst extractISOOrdinalDateAndTime = combineExtractors(\n  extractISOOrdinalData,\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\nconst extractISOTimeAndOffset = combineExtractors(\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\n\n/*\n * @private\n */\n\nexport function parseISODate(s) {\n  return parse(\n    s,\n    [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],\n    [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],\n    [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime],\n    [isoTimeCombinedRegex, extractISOTimeAndOffset]\n  );\n}\n\nexport function parseRFC2822Date(s) {\n  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n}\n\nexport function parseHTTPDate(s) {\n  return parse(\n    s,\n    [rfc1123, extractRFC1123Or850],\n    [rfc850, extractRFC1123Or850],\n    [ascii, extractASCII]\n  );\n}\n\nexport function parseISODuration(s) {\n  return parse(s, [isoDuration, extractISODuration]);\n}\n\nconst extractISOTimeOnly = combineExtractors(extractISOTime);\n\nexport function parseISOTimeOnly(s) {\n  return parse(s, [isoTimeOnly, extractISOTimeOnly]);\n}\n\nconst sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);\nconst sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);\n\nconst extractISOTimeOffsetAndIANAZone = combineExtractors(\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\n\nexport function parseSQL(s) {\n  return parse(\n    s,\n    [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],\n    [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]\n  );\n}\n","import { InvalidArgumentError, InvalidDurationError, InvalidUnitError } from \"./errors.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport Invalid from \"./impl/invalid.js\";\nimport Locale from \"./impl/locale.js\";\nimport { parseISODuration, parseISOTimeOnly } from \"./impl/regexParser.js\";\nimport {\n  asNumber,\n  hasOwnProperty,\n  isNumber,\n  isUndefined,\n  normalizeObject,\n  roundTo,\n} from \"./impl/util.js\";\nimport Settings from \"./settings.js\";\nimport DateTime from \"./datetime.js\";\n\nconst INVALID = \"Invalid Duration\";\n\n// unit conversion constants\nexport const lowOrderMatrix = {\n    weeks: {\n      days: 7,\n      hours: 7 * 24,\n      minutes: 7 * 24 * 60,\n      seconds: 7 * 24 * 60 * 60,\n      milliseconds: 7 * 24 * 60 * 60 * 1000,\n    },\n    days: {\n      hours: 24,\n      minutes: 24 * 60,\n      seconds: 24 * 60 * 60,\n      milliseconds: 24 * 60 * 60 * 1000,\n    },\n    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\n    minutes: { seconds: 60, milliseconds: 60 * 1000 },\n    seconds: { milliseconds: 1000 },\n  },\n  casualMatrix = {\n    years: {\n      quarters: 4,\n      months: 12,\n      weeks: 52,\n      days: 365,\n      hours: 365 * 24,\n      minutes: 365 * 24 * 60,\n      seconds: 365 * 24 * 60 * 60,\n      milliseconds: 365 * 24 * 60 * 60 * 1000,\n    },\n    quarters: {\n      months: 3,\n      weeks: 13,\n      days: 91,\n      hours: 91 * 24,\n      minutes: 91 * 24 * 60,\n      seconds: 91 * 24 * 60 * 60,\n      milliseconds: 91 * 24 * 60 * 60 * 1000,\n    },\n    months: {\n      weeks: 4,\n      days: 30,\n      hours: 30 * 24,\n      minutes: 30 * 24 * 60,\n      seconds: 30 * 24 * 60 * 60,\n      milliseconds: 30 * 24 * 60 * 60 * 1000,\n    },\n\n    ...lowOrderMatrix,\n  },\n  daysInYearAccurate = 146097.0 / 400,\n  daysInMonthAccurate = 146097.0 / 4800,\n  accurateMatrix = {\n    years: {\n      quarters: 4,\n      months: 12,\n      weeks: daysInYearAccurate / 7,\n      days: daysInYearAccurate,\n      hours: daysInYearAccurate * 24,\n      minutes: daysInYearAccurate * 24 * 60,\n      seconds: daysInYearAccurate * 24 * 60 * 60,\n      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000,\n    },\n    quarters: {\n      months: 3,\n      weeks: daysInYearAccurate / 28,\n      days: daysInYearAccurate / 4,\n      hours: (daysInYearAccurate * 24) / 4,\n      minutes: (daysInYearAccurate * 24 * 60) / 4,\n      seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,\n      milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4,\n    },\n    months: {\n      weeks: daysInMonthAccurate / 7,\n      days: daysInMonthAccurate,\n      hours: daysInMonthAccurate * 24,\n      minutes: daysInMonthAccurate * 24 * 60,\n      seconds: daysInMonthAccurate * 24 * 60 * 60,\n      milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000,\n    },\n    ...lowOrderMatrix,\n  };\n\n// units ordered by size\nconst orderedUnits = [\n  \"years\",\n  \"quarters\",\n  \"months\",\n  \"weeks\",\n  \"days\",\n  \"hours\",\n  \"minutes\",\n  \"seconds\",\n  \"milliseconds\",\n];\n\nconst reverseUnits = orderedUnits.slice(0).reverse();\n\n// clone really means \"create another instance just like this one, but with these changes\"\nfunction clone(dur, alts, clear = false) {\n  // deep merge for vals\n  const conf = {\n    values: clear ? alts.values : { ...dur.values, ...(alts.values || {}) },\n    loc: dur.loc.clone(alts.loc),\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,\n    matrix: alts.matrix || dur.matrix,\n  };\n  return new Duration(conf);\n}\n\nfunction durationToMillis(matrix, vals) {\n  let sum = vals.milliseconds ?? 0;\n  for (const unit of reverseUnits.slice(1)) {\n    if (vals[unit]) {\n      sum += vals[unit] * matrix[unit][\"milliseconds\"];\n    }\n  }\n  return sum;\n}\n\n// NB: mutates parameters\nfunction normalizeValues(matrix, vals) {\n  // the logic below assumes the overall value of the duration is positive\n  // if this is not the case, factor is used to make it so\n  const factor = durationToMillis(matrix, vals) < 0 ? -1 : 1;\n\n  orderedUnits.reduceRight((previous, current) => {\n    if (!isUndefined(vals[current])) {\n      if (previous) {\n        const previousVal = vals[previous] * factor;\n        const conv = matrix[current][previous];\n\n        // if (previousVal < 0):\n        // lower order unit is negative (e.g. { years: 2, days: -2 })\n        // normalize this by reducing the higher order unit by the appropriate amount\n        // and increasing the lower order unit\n        // this can never make the higher order unit negative, because this function only operates\n        // on positive durations, so the amount of time represented by the lower order unit cannot\n        // be larger than the higher order unit\n        // else:\n        // lower order unit is positive (e.g. { years: 2, days: 450 } or { years: -2, days: 450 })\n        // in this case we attempt to convert as much as possible from the lower order unit into\n        // the higher order one\n        //\n        // Math.floor takes care of both of these cases, rounding away from 0\n        // if previousVal < 0 it makes the absolute value larger\n        // if previousVal >= it makes the absolute value smaller\n        const rollUp = Math.floor(previousVal / conv);\n        vals[current] += rollUp * factor;\n        vals[previous] -= rollUp * conv * factor;\n      }\n      return current;\n    } else {\n      return previous;\n    }\n  }, null);\n\n  // try to convert any decimals into smaller units if possible\n  // for example for { years: 2.5, days: 0, seconds: 0 } we want to get { years: 2, days: 182, hours: 12 }\n  orderedUnits.reduce((previous, current) => {\n    if (!isUndefined(vals[current])) {\n      if (previous) {\n        const fraction = vals[previous] % 1;\n        vals[previous] -= fraction;\n        vals[current] += fraction * matrix[previous][current];\n      }\n      return current;\n    } else {\n      return previous;\n    }\n  }, null);\n}\n\n// Remove all properties with a value of 0 from an object\nfunction removeZeroes(vals) {\n  const newVals = {};\n  for (const [key, value] of Object.entries(vals)) {\n    if (value !== 0) {\n      newVals[key] = value;\n    }\n  }\n  return newVals;\n}\n\n/**\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.\n * * **Unit values** See the {@link Duration#years}, {@link Duration#months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.\n * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.\n * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}\n *\n * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\nexport default class Duration {\n  /**\n   * @private\n   */\n  constructor(config) {\n    const accurate = config.conversionAccuracy === \"longterm\" || false;\n    let matrix = accurate ? accurateMatrix : casualMatrix;\n\n    if (config.matrix) {\n      matrix = config.matrix;\n    }\n\n    /**\n     * @access private\n     */\n    this.values = config.values;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.conversionAccuracy = accurate ? \"longterm\" : \"casual\";\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.matrix = matrix;\n    /**\n     * @access private\n     */\n    this.isLuxonDuration = true;\n  }\n\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromMillis(count, opts) {\n    return Duration.fromObject({ milliseconds: count }, opts);\n  }\n\n  /**\n   * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.\n   * If this object is empty then a zero milliseconds duration is returned.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.years\n   * @param {number} obj.quarters\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {Object} [opts=[]] - options for creating this Duration\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use\n   * @param {string} [opts.matrix=Object] - the custom conversion system to use\n   * @return {Duration}\n   */\n  static fromObject(obj, opts = {}) {\n    if (obj == null || typeof obj !== \"object\") {\n      throw new InvalidArgumentError(\n        `Duration.fromObject: argument expected to be an object, got ${\n          obj === null ? \"null\" : typeof obj\n        }`\n      );\n    }\n\n    return new Duration({\n      values: normalizeObject(obj, Duration.normalizeUnit),\n      loc: Locale.fromObject(opts),\n      conversionAccuracy: opts.conversionAccuracy,\n      matrix: opts.matrix,\n    });\n  }\n\n  /**\n   * Create a Duration from DurationLike.\n   *\n   * @param {Object | number | Duration} durationLike\n   * One of:\n   * - object with keys like 'years' and 'hours'.\n   * - number representing milliseconds\n   * - Duration instance\n   * @return {Duration}\n   */\n  static fromDurationLike(durationLike) {\n    if (isNumber(durationLike)) {\n      return Duration.fromMillis(durationLike);\n    } else if (Duration.isDuration(durationLike)) {\n      return durationLike;\n    } else if (typeof durationLike === \"object\") {\n      return Duration.fromObject(durationLike);\n    } else {\n      throw new InvalidArgumentError(\n        `Unknown duration argument ${durationLike} of type ${typeof durationLike}`\n      );\n    }\n  }\n\n  /**\n   * Create a Duration from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use\n   * @param {string} [opts.matrix=Object] - the preset conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */\n  static fromISO(text, opts) {\n    const [parsed] = parseISODuration(text);\n    if (parsed) {\n      return Duration.fromObject(parsed, opts);\n    } else {\n      return Duration.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n    }\n  }\n\n  /**\n   * Create a Duration from an ISO 8601 time string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use\n   * @param {string} [opts.matrix=Object] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Times\n   * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }\n   * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }\n   * @return {Duration}\n   */\n  static fromISOTime(text, opts) {\n    const [parsed] = parseISOTimeOnly(text);\n    if (parsed) {\n      return Duration.fromObject(parsed, opts);\n    } else {\n      return Duration.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n    }\n  }\n\n  /**\n   * Create an invalid Duration.\n   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Duration}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Duration is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDurationError(invalid);\n    } else {\n      return new Duration({ invalid });\n    }\n  }\n\n  /**\n   * @private\n   */\n  static normalizeUnit(unit) {\n    const normalized = {\n      year: \"years\",\n      years: \"years\",\n      quarter: \"quarters\",\n      quarters: \"quarters\",\n      month: \"months\",\n      months: \"months\",\n      week: \"weeks\",\n      weeks: \"weeks\",\n      day: \"days\",\n      days: \"days\",\n      hour: \"hours\",\n      hours: \"hours\",\n      minute: \"minutes\",\n      minutes: \"minutes\",\n      second: \"seconds\",\n      seconds: \"seconds\",\n      millisecond: \"milliseconds\",\n      milliseconds: \"milliseconds\",\n    }[unit ? unit.toLowerCase() : unit];\n\n    if (!normalized) throw new InvalidUnitError(unit);\n\n    return normalized;\n  }\n\n  /**\n   * Check if an object is a Duration. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isDuration(o) {\n    return (o && o.isLuxonDuration) || false;\n  }\n\n  /**\n   * Get  the locale of a Duration, such 'en-GB'\n   * @type {string}\n   */\n  get locale() {\n    return this.isValid ? this.loc.locale : null;\n  }\n\n  /**\n   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.isValid ? this.loc.numberingSystem : null;\n  }\n\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:\n   * * `S` for milliseconds\n   * * `s` for seconds\n   * * `m` for minutes\n   * * `h` for hours\n   * * `d` for days\n   * * `w` for weeks\n   * * `M` for months\n   * * `y` for years\n   * Notes:\n   * * Add padding by repeating the token, e.g. \"yy\" pads the years to two digits, \"hhhh\" pads the hours out to four digits\n   * * Tokens can be escaped by wrapping with single quotes.\n   * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.\n   * @param {string} fmt - the format string\n   * @param {Object} opts - options\n   * @param {boolean} [opts.floor=true] - floor numerical values\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"y d s\") //=> \"1 6 2\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"yy dd sss\") //=> \"01 06 002\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"M S\") //=> \"12 518402000\"\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    // reverse-compat since 1.2; we always round down now, never up, and we do it by default\n    const fmtOpts = {\n      ...opts,\n      floor: opts.round !== false && opts.floor !== false,\n    };\n    return this.isValid\n      ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a string representation of a Duration with all units included.\n   * To modify its behavior, use `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options\n   * @param {Object} opts - Formatting options. Accepts the same keys as the options parameter of the native `Intl.NumberFormat` constructor, as well as `listStyle`.\n   * @param {string} [opts.listStyle='narrow'] - How to format the merged list. Corresponds to the `style` property of the options parameter of the native `Intl.ListFormat` constructor.\n   * @example\n   * ```js\n   * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })\n   * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'\n   * dur.toHuman({ listStyle: \"long\" }) //=> '1 day, 5 hours, and 6 minutes'\n   * dur.toHuman({ unitDisplay: \"short\" }) //=> '1 day, 5 hr, 6 min'\n   * ```\n   */\n  toHuman(opts = {}) {\n    if (!this.isValid) return INVALID;\n\n    const l = orderedUnits\n      .map((unit) => {\n        const val = this.values[unit];\n        if (isUndefined(val)) {\n          return null;\n        }\n        return this.loc\n          .numberFormatter({ style: \"unit\", unitDisplay: \"long\", ...opts, unit: unit.slice(0, -1) })\n          .format(val);\n      })\n      .filter((n) => n);\n\n    return this.loc\n      .listFormatter({ type: \"conjunction\", style: opts.listStyle || \"narrow\", ...opts })\n      .format(l);\n  }\n\n  /**\n   * Returns a JavaScript object with this Duration's values.\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {Object}\n   */\n  toObject() {\n    if (!this.isValid) return {};\n    return { ...this.values };\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\n   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'\n   * @return {string}\n   */\n  toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    if (!this.isValid) return null;\n\n    let s = \"P\";\n    if (this.years !== 0) s += this.years + \"Y\";\n    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + \"M\";\n    if (this.weeks !== 0) s += this.weeks + \"W\";\n    if (this.days !== 0) s += this.days + \"D\";\n    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)\n      s += \"T\";\n    if (this.hours !== 0) s += this.hours + \"H\";\n    if (this.minutes !== 0) s += this.minutes + \"M\";\n    if (this.seconds !== 0 || this.milliseconds !== 0)\n      // this will handle \"floating point madness\" by removing extra decimal places\n      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken\n      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + \"S\";\n    if (s === \"P\") s += \"T0S\";\n    return s;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.\n   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Times\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'\n   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'\n   * @return {string}\n   */\n  toISOTime(opts = {}) {\n    if (!this.isValid) return null;\n\n    const millis = this.toMillis();\n    if (millis < 0 || millis >= 86400000) return null;\n\n    opts = {\n      suppressMilliseconds: false,\n      suppressSeconds: false,\n      includePrefix: false,\n      format: \"extended\",\n      ...opts,\n      includeOffset: false,\n    };\n\n    const dateTime = DateTime.fromMillis(millis, { zone: \"UTC\" });\n    return dateTime.toISOTime(opts);\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */\n  toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a string representation of this Duration appropriate for the REPL.\n   * @return {string}\n   */\n  [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    if (this.isValid) {\n      return `Duration { values: ${JSON.stringify(this.values)} }`;\n    } else {\n      return `Duration { Invalid, reason: ${this.invalidReason} }`;\n    }\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration.\n   * @return {number}\n   */\n  toMillis() {\n    if (!this.isValid) return NaN;\n\n    return durationToMillis(this.matrix, this.values);\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}\n   * @return {number}\n   */\n  valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Duration.fromDurationLike(duration),\n      result = {};\n\n    for (const k of orderedUnits) {\n      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {\n        result[k] = dur.get(k) + this.get(k);\n      }\n    }\n\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Duration.fromDurationLike(duration);\n    return this.plus(dur.negate());\n  }\n\n  /**\n   * Scale this Duration by the specified amount. Return a newly-constructed Duration.\n   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === \"hours\" ? x * 2 : x) //=> { hours: 2, minutes: 30 }\n   * @return {Duration}\n   */\n  mapUnits(fn) {\n    if (!this.isValid) return this;\n    const result = {};\n    for (const k of Object.keys(this.values)) {\n      result[k] = asNumber(fn(this.values[k], k));\n    }\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3\n   * @return {number}\n   */\n  get(unit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n\n  /**\n   * \"Set\" the values of specified units. Return a newly-constructed Duration.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const mixed = { ...this.values, ...normalizeObject(values, Duration.normalizeUnit) };\n    return clone(this, { values: mixed });\n  }\n\n  /**\n   * \"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: 'en-GB' })\n   * @return {Duration}\n   */\n  reconfigure({ locale, numberingSystem, conversionAccuracy, matrix } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem });\n    const opts = { loc, matrix, conversionAccuracy };\n    return clone(this, opts);\n  }\n\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as 'minutes' or 'days'\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\n   * @return {number}\n   */\n  as(unit) {\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\n  }\n\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * Assuming the overall value of the Duration is positive, this means:\n   * - excessive values for lower-order units are converted to higher-order units (if possible, see first and second example)\n   * - negative lower-order units are converted to higher order units (there must be such a higher order unit, otherwise\n   *   the overall value would be negative, see third example)\n   * - fractional values for higher-order units are converted to lower-order units (if possible, see fourth example)\n   *\n   * If the overall value is negative, the result of this method is equivalent to `this.negate().normalize().negate()`.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ days: 5000 }).normalize().toObject() //=> { days: 5000 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @example Duration.fromObject({ years: 2.5, days: 0, hours: 0 }).normalize().toObject() //=> { years: 2, days: 182, hours: 12 }\n   * @return {Duration}\n   */\n  normalize() {\n    if (!this.isValid) return this;\n    const vals = this.toObject();\n    normalizeValues(this.matrix, vals);\n    return clone(this, { values: vals }, true);\n  }\n\n  /**\n   * Rescale units to its largest representation\n   * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }\n   * @return {Duration}\n   */\n  rescale() {\n    if (!this.isValid) return this;\n    const vals = removeZeroes(this.normalize().shiftToAll().toObject());\n    return clone(this, { values: vals }, true);\n  }\n\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */\n  shiftTo(...units) {\n    if (!this.isValid) return this;\n\n    if (units.length === 0) {\n      return this;\n    }\n\n    units = units.map((u) => Duration.normalizeUnit(u));\n\n    const built = {},\n      accumulated = {},\n      vals = this.toObject();\n    let lastUnit;\n\n    for (const k of orderedUnits) {\n      if (units.indexOf(k) >= 0) {\n        lastUnit = k;\n\n        let own = 0;\n\n        // anything we haven't boiled down yet should get boiled to this unit\n        for (const ak in accumulated) {\n          own += this.matrix[ak][k] * accumulated[ak];\n          accumulated[ak] = 0;\n        }\n\n        // plus anything that's already in this unit\n        if (isNumber(vals[k])) {\n          own += vals[k];\n        }\n\n        // only keep the integer part for now in the hopes of putting any decimal part\n        // into a smaller unit later\n        const i = Math.trunc(own);\n        built[k] = i;\n        accumulated[k] = (own * 1000 - i * 1000) / 1000;\n\n        // otherwise, keep it in the wings to boil it later\n      } else if (isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    }\n\n    // anything leftover becomes the decimal for the last unit\n    // lastUnit must be defined since units is not empty\n    for (const key in accumulated) {\n      if (accumulated[key] !== 0) {\n        built[lastUnit] +=\n          key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];\n      }\n    }\n\n    normalizeValues(this.matrix, built);\n    return clone(this, { values: built }, true);\n  }\n\n  /**\n   * Shift this Duration to all available units.\n   * Same as shiftTo(\"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\")\n   * @return {Duration}\n   */\n  shiftToAll() {\n    if (!this.isValid) return this;\n    return this.shiftTo(\n      \"years\",\n      \"months\",\n      \"weeks\",\n      \"days\",\n      \"hours\",\n      \"minutes\",\n      \"seconds\",\n      \"milliseconds\"\n    );\n  }\n\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */\n  negate() {\n    if (!this.isValid) return this;\n    const negated = {};\n    for (const k of Object.keys(this.values)) {\n      negated[k] = this.values[k] === 0 ? 0 : -this.values[k];\n    }\n    return clone(this, { values: negated }, true);\n  }\n\n  /**\n   * Get the years.\n   * @type {number}\n   */\n  get years() {\n    return this.isValid ? this.values.years || 0 : NaN;\n  }\n\n  /**\n   * Get the quarters.\n   * @type {number}\n   */\n  get quarters() {\n    return this.isValid ? this.values.quarters || 0 : NaN;\n  }\n\n  /**\n   * Get the months.\n   * @type {number}\n   */\n  get months() {\n    return this.isValid ? this.values.months || 0 : NaN;\n  }\n\n  /**\n   * Get the weeks\n   * @type {number}\n   */\n  get weeks() {\n    return this.isValid ? this.values.weeks || 0 : NaN;\n  }\n\n  /**\n   * Get the days.\n   * @type {number}\n   */\n  get days() {\n    return this.isValid ? this.values.days || 0 : NaN;\n  }\n\n  /**\n   * Get the hours.\n   * @type {number}\n   */\n  get hours() {\n    return this.isValid ? this.values.hours || 0 : NaN;\n  }\n\n  /**\n   * Get the minutes.\n   * @type {number}\n   */\n  get minutes() {\n    return this.isValid ? this.values.minutes || 0 : NaN;\n  }\n\n  /**\n   * Get the seconds.\n   * @return {number}\n   */\n  get seconds() {\n    return this.isValid ? this.values.seconds || 0 : NaN;\n  }\n\n  /**\n   * Get the milliseconds.\n   * @return {number}\n   */\n  get milliseconds() {\n    return this.isValid ? this.values.milliseconds || 0 : NaN;\n  }\n\n  /**\n   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\n   * on invalid DateTimes or Intervals.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalid === null;\n  }\n\n  /**\n   * Returns an error code if this Duration became invalid, or null if the Duration is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    if (!this.loc.equals(other.loc)) {\n      return false;\n    }\n\n    function eq(v1, v2) {\n      // Consider 0 and undefined as equal\n      if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;\n      return v1 === v2;\n    }\n\n    for (const u of orderedUnits) {\n      if (!eq(this.values[u], other.values[u])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport * as Formats from \"./impl/formats.js\";\n\nconst INVALID = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\n      \"end before start\",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    );\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({ invalid });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd,\n      });\n    } else {\n      return validateError;\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n    if (s && e) {\n      let start, startIsValid;\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isInterval(o) {\n    return (o && o.isLuxonInterval) || false;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; this operation will always use the locale of the start DateTime\n   * @return {number}\n   */\n  count(unit = \"milliseconds\", opts) {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit, opts);\n    let end;\n    if (opts?.useLocaleWeeks) {\n      end = this.end.reconfigure({ locale: start.locale });\n    } else {\n      end = this.end;\n    }\n    end = end.startOf(unit, opts);\n    return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTime} dateTimes - the unit of time to count.\n   * @return {Array}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes\n        .map(friendlyDateTime)\n        .filter((d) => this.contains(d))\n        .sort((a, b) => a.toMillis() - b.toMillis()),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {Array}\n   */\n  splitBy(duration) {\n    const dur = Duration.fromDurationLike(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let { s } = this,\n      idx = 1,\n      next;\n\n    const results = [];\n    while (s < this.e) {\n      const added = this.start.plus(dur.mapUnits((x) => x * idx));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {Array}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Returns true if this Interval fully contains the specified Interval, specifically if the intersect (of this Interval and the other Interval) is equal to the other Interval; false otherwise.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals\n      .sort((a, b) => a.s - b.s)\n      .reduce(\n        ([sofar, current], item) => {\n          if (!current) {\n            return [sofar, item];\n          } else if (current.overlaps(item) || current.abutsStart(item)) {\n            return [sofar, current.union(item)];\n          } else {\n            return [sofar.concat([current]), item];\n          }\n        },\n        [[], null]\n      );\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map((i) => [\n        { time: i.s, type: \"s\" },\n        { time: i.e, type: \"e\" },\n      ]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Array}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map((i) => this.intersection(i))\n      .filter((i) => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for the REPL.\n   * @return {string}\n   */\n  [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    if (this.isValid) {\n      return `Interval { start: ${this.s.toISO()}, end: ${this.e.toISO()} }`;\n    } else {\n      return `Interval { Invalid, reason: ${this.invalidReason} }`;\n    }\n  }\n\n  /**\n   * Returns a localized string representing this Interval. Accepts the same options as the\n   * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as\n   * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method\n   * is browser-specific, but in general it will return an appropriate representation of the\n   * Interval in the assigned locale. Defaults to the system's locale if no locale has been\n   * specified.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or\n   * Intl.DateTimeFormat constructor options.\n   * @param {Object} opts - Options to override the configuration of the start DateTime.\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022\n   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM\n   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p\n   * @return {string}\n   */\n  toLocaleString(formatOpts = Formats.DATE_SHORT, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format\n   * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible\n   * formatting tool.\n   * @param {string} dateFormat - The format string. This string formats the start and end time.\n   * See {@link DateTime#toFormat} for details.\n   * @param {Object} opts - Options.\n   * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end\n   * representations.\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = \" – \" } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n}\n","import DateTime from \"./datetime.js\";\nimport Settings from \"./settings.js\";\nimport Locale from \"./impl/locale.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\n\nimport { hasLocaleWeekInfo, hasRelative } from \"./impl/util.js\";\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\nexport default class Info {\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.\n   * @return {boolean}\n   */\n  static hasDST(zone = Settings.defaultZone) {\n    const proto = DateTime.now().setZone(zone).set({ month: 12 });\n\n    return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;\n  }\n\n  /**\n   * Return whether the specified zone is a valid IANA specifier.\n   * @param {string} zone - Zone to check\n   * @return {boolean}\n   */\n  static isValidIANAZone(zone) {\n    return IANAZone.isValidZone(zone);\n  }\n\n  /**\n   * Converts the input into a {@link Zone} instance.\n   *\n   * * If `input` is already a Zone instance, it is returned unchanged.\n   * * If `input` is a string containing a valid time zone name, a Zone instance\n   *   with that name is returned.\n   * * If `input` is a string that doesn't refer to a known time zone, a Zone\n   *   instance with {@link Zone#isValid} == false is returned.\n   * * If `input is a number, a Zone instance with the specified fixed offset\n   *   in minutes is returned.\n   * * If `input` is `null` or `undefined`, the default zone is returned.\n   * @param {string|Zone|number} [input] - the value to be converted\n   * @return {Zone}\n   */\n  static normalizeZone(input) {\n    return normalizeZone(input, Settings.defaultZone);\n  }\n\n  /**\n   * Get the weekday on which the week starts according to the given locale.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @returns {number} the start of the week, 1 for Monday through 7 for Sunday\n   */\n  static getStartOfWeek({ locale = null, locObj = null } = {}) {\n    return (locObj || Locale.create(locale)).getStartOfWeek();\n  }\n\n  /**\n   * Get the minimum number of days necessary in a week before it is considered part of the next year according\n   * to the given locale.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @returns {number}\n   */\n  static getMinimumDaysInFirstWeek({ locale = null, locObj = null } = {}) {\n    return (locObj || Locale.create(locale)).getMinDaysInFirstWeek();\n  }\n\n  /**\n   * Get the weekdays, which are considered the weekend according to the given locale\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @returns {number[]} an array of weekdays, 1 for Monday through 7 for Sunday\n   */\n  static getWeekendWeekdays({ locale = null, locObj = null } = {}) {\n    // copy the array, because we cache it internally\n    return (locObj || Locale.create(locale)).getWeekendDays().slice();\n  }\n\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.months()[0] //=> 'January'\n   * @example Info.months('short')[0] //=> 'Jan'\n   * @example Info.months('numeric')[0] //=> '1'\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\n   * @return {Array}\n   */\n  static months(\n    length = \"long\",\n    { locale = null, numberingSystem = null, locObj = null, outputCalendar = \"gregory\" } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);\n  }\n\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link Info#months}\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {Array}\n   */\n  static monthsFormat(\n    length = \"long\",\n    { locale = null, numberingSystem = null, locObj = null, outputCalendar = \"gregory\" } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);\n  }\n\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the weekday representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @example Info.weekdays()[0] //=> 'Monday'\n   * @example Info.weekdays('short')[0] //=> 'Mon'\n   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'\n   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'\n   * @return {Array}\n   */\n  static weekdays(length = \"long\", { locale = null, numberingSystem = null, locObj = null } = {}) {\n    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);\n  }\n\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link Info#weekdays}\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale=null] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.locObj=null] - an existing locale object to use\n   * @return {Array}\n   */\n  static weekdaysFormat(\n    length = \"long\",\n    { locale = null, numberingSystem = null, locObj = null } = {}\n  ) {\n    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);\n  }\n\n  /**\n   * Return an array of meridiems.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\n   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]\n   * @return {Array}\n   */\n  static meridiems({ locale = null } = {}) {\n    return Locale.create(locale).meridiems();\n  }\n\n  /**\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\n   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n   * @return {Array}\n   */\n  static eras(length = \"short\", { locale = null } = {}) {\n    return Locale.create(locale, null, \"gregory\").eras(length);\n  }\n\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.\n   * Keys:\n   * * `relative`: whether this environment supports relative time formatting\n   * * `localeWeek`: whether this environment supports different weekdays for the start of the week based on the locale\n   * @example Info.features() //=> { relative: false, localeWeek: true }\n   * @return {Object}\n   */\n  static features() {\n    return { relative: hasRelative(), localeWeek: hasLocaleWeekInfo() };\n  }\n}\n","import Duration from \"../duration.js\";\n\nfunction dayDiff(earlier, later) {\n  const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf(\"day\").valueOf(),\n    ms = utcDayStart(later) - utcDayStart(earlier);\n  return Math.floor(Duration.fromMillis(ms).as(\"days\"));\n}\n\nfunction highOrderDiffs(cursor, later, units) {\n  const differs = [\n    [\"years\", (a, b) => b.year - a.year],\n    [\"quarters\", (a, b) => b.quarter - a.quarter + (b.year - a.year) * 4],\n    [\"months\", (a, b) => b.month - a.month + (b.year - a.year) * 12],\n    [\n      \"weeks\",\n      (a, b) => {\n        const days = dayDiff(a, b);\n        return (days - (days % 7)) / 7;\n      },\n    ],\n    [\"days\", dayDiff],\n  ];\n\n  const results = {};\n  const earlier = cursor;\n  let lowestOrder, highWater;\n\n  /* This loop tries to diff using larger units first.\n     If we overshoot, we backtrack and try the next smaller unit.\n     \"cursor\" starts out at the earlier timestamp and moves closer and closer to \"later\"\n     as we use smaller and smaller units.\n     highWater keeps track of where we would be if we added one more of the smallest unit,\n     this is used later to potentially convert any difference smaller than the smallest higher order unit\n     into a fraction of that smallest higher order unit\n  */\n  for (const [unit, differ] of differs) {\n    if (units.indexOf(unit) >= 0) {\n      lowestOrder = unit;\n\n      results[unit] = differ(cursor, later);\n      highWater = earlier.plus(results);\n\n      if (highWater > later) {\n        // we overshot the end point, backtrack cursor by 1\n        results[unit]--;\n        cursor = earlier.plus(results);\n\n        // if we are still overshooting now, we need to backtrack again\n        // this happens in certain situations when diffing times in different zones,\n        // because this calculation ignores time zones\n        if (cursor > later) {\n          // keep the \"overshot by 1\" around as highWater\n          highWater = cursor;\n          // backtrack cursor by 1\n          results[unit]--;\n          cursor = earlier.plus(results);\n        }\n      } else {\n        cursor = highWater;\n      }\n    }\n  }\n\n  return [cursor, results, highWater, lowestOrder];\n}\n\nexport default function (earlier, later, units, opts) {\n  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);\n\n  const remainingMillis = later - cursor;\n\n  const lowerOrderUnits = units.filter(\n    (u) => [\"hours\", \"minutes\", \"seconds\", \"milliseconds\"].indexOf(u) >= 0\n  );\n\n  if (lowerOrderUnits.length === 0) {\n    if (highWater < later) {\n      highWater = cursor.plus({ [lowestOrder]: 1 });\n    }\n\n    if (highWater !== cursor) {\n      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);\n    }\n  }\n\n  const duration = Duration.fromObject(results, opts);\n\n  if (lowerOrderUnits.length > 0) {\n    return Duration.fromMillis(remainingMillis, opts)\n      .shiftTo(...lowerOrderUnits)\n      .plus(duration);\n  } else {\n    return duration;\n  }\n}\n","import { parseMillis, isUndefined, untruncateYear, signedOffset, hasOwnProperty } from \"./util.js\";\nimport Formatter from \"./formatter.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\nimport DateTime from \"../datetime.js\";\nimport { digitRegex, parseDigits } from \"./digits.js\";\nimport { ConflictingSpecificationError } from \"../errors.js\";\n\nconst MISSING_FTP = \"missing Intl.DateTimeFormat.formatToParts support\";\n\nfunction intUnit(regex, post = (i) => i) {\n  return { regex, deser: ([s]) => post(parseDigits(s)) };\n}\n\nconst NBSP = String.fromCharCode(160);\nconst spaceOrNBSP = `[ ${NBSP}]`;\nconst spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, \"g\");\n\nfunction fixListRegex(s) {\n  // make dots optional and also make them literal\n  // make space and non breakable space characters interchangeable\n  return s.replace(/\\./g, \"\\\\.?\").replace(spaceOrNBSPRegExp, spaceOrNBSP);\n}\n\nfunction stripInsensitivities(s) {\n  return s\n    .replace(/\\./g, \"\") // ignore dots that were made optional\n    .replace(spaceOrNBSPRegExp, \" \") // interchange space and nbsp\n    .toLowerCase();\n}\n\nfunction oneOf(strings, startIndex) {\n  if (strings === null) {\n    return null;\n  } else {\n    return {\n      regex: RegExp(strings.map(fixListRegex).join(\"|\")),\n      deser: ([s]) =>\n        strings.findIndex((i) => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex,\n    };\n  }\n}\n\nfunction offset(regex, groups) {\n  return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };\n}\n\nfunction simple(regex) {\n  return { regex, deser: ([s]) => s };\n}\n\nfunction escapeToken(value) {\n  return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n}\n\n/**\n * @param token\n * @param {Locale} loc\n */\nfunction unitForToken(token, loc) {\n  const one = digitRegex(loc),\n    two = digitRegex(loc, \"{2}\"),\n    three = digitRegex(loc, \"{3}\"),\n    four = digitRegex(loc, \"{4}\"),\n    six = digitRegex(loc, \"{6}\"),\n    oneOrTwo = digitRegex(loc, \"{1,2}\"),\n    oneToThree = digitRegex(loc, \"{1,3}\"),\n    oneToSix = digitRegex(loc, \"{1,6}\"),\n    oneToNine = digitRegex(loc, \"{1,9}\"),\n    twoToFour = digitRegex(loc, \"{2,4}\"),\n    fourToSix = digitRegex(loc, \"{4,6}\"),\n    literal = (t) => ({ regex: RegExp(escapeToken(t.val)), deser: ([s]) => s, literal: true }),\n    unitate = (t) => {\n      if (token.literal) {\n        return literal(t);\n      }\n      switch (t.val) {\n        // era\n        case \"G\":\n          return oneOf(loc.eras(\"short\"), 0);\n        case \"GG\":\n          return oneOf(loc.eras(\"long\"), 0);\n        // years\n        case \"y\":\n          return intUnit(oneToSix);\n        case \"yy\":\n          return intUnit(twoToFour, untruncateYear);\n        case \"yyyy\":\n          return intUnit(four);\n        case \"yyyyy\":\n          return intUnit(fourToSix);\n        case \"yyyyyy\":\n          return intUnit(six);\n        // months\n        case \"M\":\n          return intUnit(oneOrTwo);\n        case \"MM\":\n          return intUnit(two);\n        case \"MMM\":\n          return oneOf(loc.months(\"short\", true), 1);\n        case \"MMMM\":\n          return oneOf(loc.months(\"long\", true), 1);\n        case \"L\":\n          return intUnit(oneOrTwo);\n        case \"LL\":\n          return intUnit(two);\n        case \"LLL\":\n          return oneOf(loc.months(\"short\", false), 1);\n        case \"LLLL\":\n          return oneOf(loc.months(\"long\", false), 1);\n        // dates\n        case \"d\":\n          return intUnit(oneOrTwo);\n        case \"dd\":\n          return intUnit(two);\n        // ordinals\n        case \"o\":\n          return intUnit(oneToThree);\n        case \"ooo\":\n          return intUnit(three);\n        // time\n        case \"HH\":\n          return intUnit(two);\n        case \"H\":\n          return intUnit(oneOrTwo);\n        case \"hh\":\n          return intUnit(two);\n        case \"h\":\n          return intUnit(oneOrTwo);\n        case \"mm\":\n          return intUnit(two);\n        case \"m\":\n          return intUnit(oneOrTwo);\n        case \"q\":\n          return intUnit(oneOrTwo);\n        case \"qq\":\n          return intUnit(two);\n        case \"s\":\n          return intUnit(oneOrTwo);\n        case \"ss\":\n          return intUnit(two);\n        case \"S\":\n          return intUnit(oneToThree);\n        case \"SSS\":\n          return intUnit(three);\n        case \"u\":\n          return simple(oneToNine);\n        case \"uu\":\n          return simple(oneOrTwo);\n        case \"uuu\":\n          return intUnit(one);\n        // meridiem\n        case \"a\":\n          return oneOf(loc.meridiems(), 0);\n        // weekYear (k)\n        case \"kkkk\":\n          return intUnit(four);\n        case \"kk\":\n          return intUnit(twoToFour, untruncateYear);\n        // weekNumber (W)\n        case \"W\":\n          return intUnit(oneOrTwo);\n        case \"WW\":\n          return intUnit(two);\n        // weekdays\n        case \"E\":\n        case \"c\":\n          return intUnit(one);\n        case \"EEE\":\n          return oneOf(loc.weekdays(\"short\", false), 1);\n        case \"EEEE\":\n          return oneOf(loc.weekdays(\"long\", false), 1);\n        case \"ccc\":\n          return oneOf(loc.weekdays(\"short\", true), 1);\n        case \"cccc\":\n          return oneOf(loc.weekdays(\"long\", true), 1);\n        // offset/zone\n        case \"Z\":\n        case \"ZZ\":\n          return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);\n        case \"ZZZ\":\n          return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);\n        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\n        // because we don't have any way to figure out what they are\n        case \"z\":\n          return simple(/[a-z_+-/]{1,256}?/i);\n        // this special-case \"token\" represents a place where a macro-token expanded into a white-space literal\n        // in this case we accept any non-newline white-space\n        case \" \":\n          return simple(/[^\\S\\n\\r]/);\n        default:\n          return literal(t);\n      }\n    };\n\n  const unit = unitate(token) || {\n    invalidReason: MISSING_FTP,\n  };\n\n  unit.token = token;\n\n  return unit;\n}\n\nconst partTypeStyleToTokenVal = {\n  year: {\n    \"2-digit\": \"yy\",\n    numeric: \"yyyyy\",\n  },\n  month: {\n    numeric: \"M\",\n    \"2-digit\": \"MM\",\n    short: \"MMM\",\n    long: \"MMMM\",\n  },\n  day: {\n    numeric: \"d\",\n    \"2-digit\": \"dd\",\n  },\n  weekday: {\n    short: \"EEE\",\n    long: \"EEEE\",\n  },\n  dayperiod: \"a\",\n  dayPeriod: \"a\",\n  hour12: {\n    numeric: \"h\",\n    \"2-digit\": \"hh\",\n  },\n  hour24: {\n    numeric: \"H\",\n    \"2-digit\": \"HH\",\n  },\n  minute: {\n    numeric: \"m\",\n    \"2-digit\": \"mm\",\n  },\n  second: {\n    numeric: \"s\",\n    \"2-digit\": \"ss\",\n  },\n  timeZoneName: {\n    long: \"ZZZZZ\",\n    short: \"ZZZ\",\n  },\n};\n\nfunction tokenForPart(part, formatOpts, resolvedOpts) {\n  const { type, value } = part;\n\n  if (type === \"literal\") {\n    const isSpace = /^\\s+$/.test(value);\n    return {\n      literal: !isSpace,\n      val: isSpace ? \" \" : value,\n    };\n  }\n\n  const style = formatOpts[type];\n\n  // The user might have explicitly specified hour12 or hourCycle\n  // if so, respect their decision\n  // if not, refer back to the resolvedOpts, which are based on the locale\n  let actualType = type;\n  if (type === \"hour\") {\n    if (formatOpts.hour12 != null) {\n      actualType = formatOpts.hour12 ? \"hour12\" : \"hour24\";\n    } else if (formatOpts.hourCycle != null) {\n      if (formatOpts.hourCycle === \"h11\" || formatOpts.hourCycle === \"h12\") {\n        actualType = \"hour12\";\n      } else {\n        actualType = \"hour24\";\n      }\n    } else {\n      // tokens only differentiate between 24 hours or not,\n      // so we do not need to check hourCycle here, which is less supported anyways\n      actualType = resolvedOpts.hour12 ? \"hour12\" : \"hour24\";\n    }\n  }\n  let val = partTypeStyleToTokenVal[actualType];\n  if (typeof val === \"object\") {\n    val = val[style];\n  }\n\n  if (val) {\n    return {\n      literal: false,\n      val,\n    };\n  }\n\n  return undefined;\n}\n\nfunction buildRegex(units) {\n  const re = units.map((u) => u.regex).reduce((f, r) => `${f}(${r.source})`, \"\");\n  return [`^${re}$`, units];\n}\n\nfunction match(input, regex, handlers) {\n  const matches = input.match(regex);\n\n  if (matches) {\n    const all = {};\n    let matchIndex = 1;\n    for (const i in handlers) {\n      if (hasOwnProperty(handlers, i)) {\n        const h = handlers[i],\n          groups = h.groups ? h.groups + 1 : 1;\n        if (!h.literal && h.token) {\n          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\n        }\n        matchIndex += groups;\n      }\n    }\n    return [matches, all];\n  } else {\n    return [matches, {}];\n  }\n}\n\nfunction dateTimeFromMatches(matches) {\n  const toField = (token) => {\n    switch (token) {\n      case \"S\":\n        return \"millisecond\";\n      case \"s\":\n        return \"second\";\n      case \"m\":\n        return \"minute\";\n      case \"h\":\n      case \"H\":\n        return \"hour\";\n      case \"d\":\n        return \"day\";\n      case \"o\":\n        return \"ordinal\";\n      case \"L\":\n      case \"M\":\n        return \"month\";\n      case \"y\":\n        return \"year\";\n      case \"E\":\n      case \"c\":\n        return \"weekday\";\n      case \"W\":\n        return \"weekNumber\";\n      case \"k\":\n        return \"weekYear\";\n      case \"q\":\n        return \"quarter\";\n      default:\n        return null;\n    }\n  };\n\n  let zone = null;\n  let specificOffset;\n  if (!isUndefined(matches.z)) {\n    zone = IANAZone.create(matches.z);\n  }\n\n  if (!isUndefined(matches.Z)) {\n    if (!zone) {\n      zone = new FixedOffsetZone(matches.Z);\n    }\n    specificOffset = matches.Z;\n  }\n\n  if (!isUndefined(matches.q)) {\n    matches.M = (matches.q - 1) * 3 + 1;\n  }\n\n  if (!isUndefined(matches.h)) {\n    if (matches.h < 12 && matches.a === 1) {\n      matches.h += 12;\n    } else if (matches.h === 12 && matches.a === 0) {\n      matches.h = 0;\n    }\n  }\n\n  if (matches.G === 0 && matches.y) {\n    matches.y = -matches.y;\n  }\n\n  if (!isUndefined(matches.u)) {\n    matches.S = parseMillis(matches.u);\n  }\n\n  const vals = Object.keys(matches).reduce((r, k) => {\n    const f = toField(k);\n    if (f) {\n      r[f] = matches[k];\n    }\n\n    return r;\n  }, {});\n\n  return [vals, zone, specificOffset];\n}\n\nlet dummyDateTimeCache = null;\n\nfunction getDummyDateTime() {\n  if (!dummyDateTimeCache) {\n    dummyDateTimeCache = DateTime.fromMillis(1555555555555);\n  }\n\n  return dummyDateTimeCache;\n}\n\nfunction maybeExpandMacroToken(token, locale) {\n  if (token.literal) {\n    return token;\n  }\n\n  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);\n  const tokens = formatOptsToTokens(formatOpts, locale);\n\n  if (tokens == null || tokens.includes(undefined)) {\n    return token;\n  }\n\n  return tokens;\n}\n\nexport function expandMacroTokens(tokens, locale) {\n  return Array.prototype.concat(...tokens.map((t) => maybeExpandMacroToken(t, locale)));\n}\n\n/**\n * @private\n */\n\nexport class TokenParser {\n  constructor(locale, format) {\n    this.locale = locale;\n    this.format = format;\n    this.tokens = expandMacroTokens(Formatter.parseFormat(format), locale);\n    this.units = this.tokens.map((t) => unitForToken(t, locale));\n    this.disqualifyingUnit = this.units.find((t) => t.invalidReason);\n\n    if (!this.disqualifyingUnit) {\n      const [regexString, handlers] = buildRegex(this.units);\n      this.regex = RegExp(regexString, \"i\");\n      this.handlers = handlers;\n    }\n  }\n\n  explainFromTokens(input) {\n    if (!this.isValid) {\n      return { input, tokens: this.tokens, invalidReason: this.invalidReason };\n    } else {\n      const [rawMatches, matches] = match(input, this.regex, this.handlers),\n        [result, zone, specificOffset] = matches\n          ? dateTimeFromMatches(matches)\n          : [null, null, undefined];\n      if (hasOwnProperty(matches, \"a\") && hasOwnProperty(matches, \"H\")) {\n        throw new ConflictingSpecificationError(\n          \"Can't include meridiem when specifying 24-hour format\"\n        );\n      }\n      return {\n        input,\n        tokens: this.tokens,\n        regex: this.regex,\n        rawMatches,\n        matches,\n        result,\n        zone,\n        specificOffset,\n      };\n    }\n  }\n\n  get isValid() {\n    return !this.disqualifyingUnit;\n  }\n\n  get invalidReason() {\n    return this.disqualifyingUnit ? this.disqualifyingUnit.invalidReason : null;\n  }\n}\n\nexport function explainFromTokens(locale, input, format) {\n  const parser = new TokenParser(locale, format);\n  return parser.explainFromTokens(input);\n}\n\nexport function parseFromTokens(locale, input, format) {\n  const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format);\n  return [result, zone, specificOffset, invalidReason];\n}\n\nexport function formatOptsToTokens(formatOpts, locale) {\n  if (!formatOpts) {\n    return null;\n  }\n\n  const formatter = Formatter.create(locale, formatOpts);\n  const df = formatter.dtFormatter(getDummyDateTime());\n  const parts = df.formatToParts();\n  const resolvedOpts = df.resolvedOptions();\n  return parts.map((p) => tokenForPart(p, formatOpts, resolvedOpts));\n}\n","import Duration from \"./duration.js\";\nimport Interval from \"./interval.js\";\nimport Settings from \"./settings.js\";\nimport Info from \"./info.js\";\nimport Formatter from \"./impl/formatter.js\";\nimport FixedOffsetZone from \"./zones/fixedOffsetZone.js\";\nimport Locale from \"./impl/locale.js\";\nimport {\n  isUndefined,\n  maybeArray,\n  isDate,\n  isNumber,\n  bestBy,\n  daysInMonth,\n  daysInYear,\n  isLeapYear,\n  weeksInWeekYear,\n  normalizeObject,\n  roundTo,\n  objToLocalTS,\n  padStart,\n} from \"./impl/util.js\";\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\nimport diff from \"./impl/diff.js\";\nimport { parseRFC2822Date, parseISODate, parseHTTPDate, parseSQL } from \"./impl/regexParser.js\";\nimport {\n  parseFromTokens,\n  explainFromTokens,\n  formatOptsToTokens,\n  expandMacroTokens,\n  TokenParser,\n} from \"./impl/tokenParser.js\";\nimport {\n  gregorianToWeek,\n  weekToGregorian,\n  gregorianToOrdinal,\n  ordinalToGregorian,\n  hasInvalidGregorianData,\n  hasInvalidWeekData,\n  hasInvalidOrdinalData,\n  hasInvalidTimeData,\n  usesLocalWeekValues,\n  isoWeekdayToLocal,\n} from \"./impl/conversions.js\";\nimport * as Formats from \"./impl/formats.js\";\nimport {\n  InvalidArgumentError,\n  ConflictingSpecificationError,\n  InvalidUnitError,\n  InvalidDateTimeError,\n} from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\n\nconst INVALID = \"Invalid DateTime\";\nconst MAX_DATE = 8.64e15;\n\nfunction unsupportedZone(zone) {\n  return new Invalid(\"unsupported zone\", `the zone \"${zone.name}\" is not supported`);\n}\n\n// we cache week data on the DT object and this intermediates the cache\n/**\n * @param {DateTime} dt\n */\nfunction possiblyCachedWeekData(dt) {\n  if (dt.weekData === null) {\n    dt.weekData = gregorianToWeek(dt.c);\n  }\n  return dt.weekData;\n}\n\n/**\n * @param {DateTime} dt\n */\nfunction possiblyCachedLocalWeekData(dt) {\n  if (dt.localWeekData === null) {\n    dt.localWeekData = gregorianToWeek(\n      dt.c,\n      dt.loc.getMinDaysInFirstWeek(),\n      dt.loc.getStartOfWeek()\n    );\n  }\n  return dt.localWeekData;\n}\n\n// clone really means, \"make a new object with these modifications\". all \"setters\" really use this\n// to create a new object while only changing some of the properties\nfunction clone(inst, alts) {\n  const current = {\n    ts: inst.ts,\n    zone: inst.zone,\n    c: inst.c,\n    o: inst.o,\n    loc: inst.loc,\n    invalid: inst.invalid,\n  };\n  return new DateTime({ ...current, ...alts, old: current });\n}\n\n// find the right offset a given local time. The o input is our guess, which determines which\n// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)\nfunction fixOffset(localTS, o, tz) {\n  // Our UTC time is just a guess because our offset is just a guess\n  let utcGuess = localTS - o * 60 * 1000;\n\n  // Test whether the zone matches the offset for this ts\n  const o2 = tz.offset(utcGuess);\n\n  // If so, offset didn't change and we're done\n  if (o === o2) {\n    return [utcGuess, o];\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= (o2 - o) * 60 * 1000;\n\n  // If that gives us the local time we want, we're done\n  const o3 = tz.offset(utcGuess);\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  }\n\n  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n}\n\n// convert an epoch timestamp into a calendar object with the given offset\nfunction tsToObj(ts, offset) {\n  ts += offset * 60 * 1000;\n\n  const d = new Date(ts);\n\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds(),\n  };\n}\n\n// convert a calendar object to a epoch timestamp\nfunction objToTS(obj, offset, zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n}\n\n// create a new DT instance by adding a duration, adjusting for DSTs\nfunction adjustTime(inst, dur) {\n  const oPre = inst.o,\n    year = inst.c.year + Math.trunc(dur.years),\n    month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,\n    c = {\n      ...inst.c,\n      year,\n      month,\n      day:\n        Math.min(inst.c.day, daysInMonth(year, month)) +\n        Math.trunc(dur.days) +\n        Math.trunc(dur.weeks) * 7,\n    },\n    millisToAdd = Duration.fromObject({\n      years: dur.years - Math.trunc(dur.years),\n      quarters: dur.quarters - Math.trunc(dur.quarters),\n      months: dur.months - Math.trunc(dur.months),\n      weeks: dur.weeks - Math.trunc(dur.weeks),\n      days: dur.days - Math.trunc(dur.days),\n      hours: dur.hours,\n      minutes: dur.minutes,\n      seconds: dur.seconds,\n      milliseconds: dur.milliseconds,\n    }).as(\"milliseconds\"),\n    localTS = objToLocalTS(c);\n\n  let [ts, o] = fixOffset(localTS, oPre, inst.zone);\n\n  if (millisToAdd !== 0) {\n    ts += millisToAdd;\n    // that could have changed the offset by going over a DST, but we want to keep the ts the same\n    o = inst.zone.offset(ts);\n  }\n\n  return { ts, o };\n}\n\n// helper useful in turning the results of parsing into real dates\n// by handling the zone options\nfunction parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {\n  const { setZone, zone } = opts;\n  if ((parsed && Object.keys(parsed).length !== 0) || parsedZone) {\n    const interpretationZone = parsedZone || zone,\n      inst = DateTime.fromObject(parsed, {\n        ...opts,\n        zone: interpretationZone,\n        specificOffset,\n      });\n    return setZone ? inst : inst.setZone(zone);\n  } else {\n    return DateTime.invalid(\n      new Invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ${format}`)\n    );\n  }\n}\n\n// if you want to output a technical format (e.g. RFC 2822), this helper\n// helps handle the details\nfunction toTechFormat(dt, format, allowZ = true) {\n  return dt.isValid\n    ? Formatter.create(Locale.create(\"en-US\"), {\n        allowZ,\n        forceSimple: true,\n      }).formatDateTimeFromString(dt, format)\n    : null;\n}\n\nfunction toISODate(o, extended) {\n  const longFormat = o.c.year > 9999 || o.c.year < 0;\n  let c = \"\";\n  if (longFormat && o.c.year >= 0) c += \"+\";\n  c += padStart(o.c.year, longFormat ? 6 : 4);\n\n  if (extended) {\n    c += \"-\";\n    c += padStart(o.c.month);\n    c += \"-\";\n    c += padStart(o.c.day);\n  } else {\n    c += padStart(o.c.month);\n    c += padStart(o.c.day);\n  }\n  return c;\n}\n\nfunction toISOTime(\n  o,\n  extended,\n  suppressSeconds,\n  suppressMilliseconds,\n  includeOffset,\n  extendedZone\n) {\n  let c = padStart(o.c.hour);\n  if (extended) {\n    c += \":\";\n    c += padStart(o.c.minute);\n    if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {\n      c += \":\";\n    }\n  } else {\n    c += padStart(o.c.minute);\n  }\n\n  if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {\n    c += padStart(o.c.second);\n\n    if (o.c.millisecond !== 0 || !suppressMilliseconds) {\n      c += \".\";\n      c += padStart(o.c.millisecond, 3);\n    }\n  }\n\n  if (includeOffset) {\n    if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {\n      c += \"Z\";\n    } else if (o.o < 0) {\n      c += \"-\";\n      c += padStart(Math.trunc(-o.o / 60));\n      c += \":\";\n      c += padStart(Math.trunc(-o.o % 60));\n    } else {\n      c += \"+\";\n      c += padStart(Math.trunc(o.o / 60));\n      c += \":\";\n      c += padStart(Math.trunc(o.o % 60));\n    }\n  }\n\n  if (extendedZone) {\n    c += \"[\" + o.zone.ianaName + \"]\";\n  }\n  return c;\n}\n\n// defaults for unspecified units in the supported calendars\nconst defaultUnitValues = {\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n  },\n  defaultWeekUnitValues = {\n    weekNumber: 1,\n    weekday: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n  },\n  defaultOrdinalUnitValues = {\n    ordinal: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n  };\n\n// Units in the supported calendars, sorted by bigness\nconst orderedUnits = [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\"],\n  orderedWeekUnits = [\n    \"weekYear\",\n    \"weekNumber\",\n    \"weekday\",\n    \"hour\",\n    \"minute\",\n    \"second\",\n    \"millisecond\",\n  ],\n  orderedOrdinalUnits = [\"year\", \"ordinal\", \"hour\", \"minute\", \"second\", \"millisecond\"];\n\n// standardize case and plurality in units\nfunction normalizeUnit(unit) {\n  const normalized = {\n    year: \"year\",\n    years: \"year\",\n    month: \"month\",\n    months: \"month\",\n    day: \"day\",\n    days: \"day\",\n    hour: \"hour\",\n    hours: \"hour\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    quarter: \"quarter\",\n    quarters: \"quarter\",\n    second: \"second\",\n    seconds: \"second\",\n    millisecond: \"millisecond\",\n    milliseconds: \"millisecond\",\n    weekday: \"weekday\",\n    weekdays: \"weekday\",\n    weeknumber: \"weekNumber\",\n    weeksnumber: \"weekNumber\",\n    weeknumbers: \"weekNumber\",\n    weekyear: \"weekYear\",\n    weekyears: \"weekYear\",\n    ordinal: \"ordinal\",\n  }[unit.toLowerCase()];\n\n  if (!normalized) throw new InvalidUnitError(unit);\n\n  return normalized;\n}\n\nfunction normalizeUnitWithLocalWeeks(unit) {\n  switch (unit.toLowerCase()) {\n    case \"localweekday\":\n    case \"localweekdays\":\n      return \"localWeekday\";\n    case \"localweeknumber\":\n    case \"localweeknumbers\":\n      return \"localWeekNumber\";\n    case \"localweekyear\":\n    case \"localweekyears\":\n      return \"localWeekYear\";\n    default:\n      return normalizeUnit(unit);\n  }\n}\n\n// cache offsets for zones based on the current timestamp when this function is\n// first called. When we are handling a datetime from components like (year,\n// month, day, hour) in a time zone, we need a guess about what the timezone\n// offset is so that we can convert into a UTC timestamp. One way is to find the\n// offset of now in the zone. The actual date may have a different offset (for\n// example, if we handle a date in June while we're in December in a zone that\n// observes DST), but we can check and adjust that.\n//\n// When handling many dates, calculating the offset for now every time is\n// expensive. It's just a guess, so we can cache the offset to use even if we\n// are right on a time change boundary (we'll just correct in the other\n// direction). Using a timestamp from first read is a slight optimization for\n// handling dates close to the current date, since those dates will usually be\n// in the same offset (we could set the timestamp statically, instead). We use a\n// single timestamp for all zones to make things a bit more predictable.\n//\n// This is safe for quickDT (used by local() and utc()) because we don't fill in\n// higher-order units from tsNow (as we do in fromObject, this requires that\n// offset is calculated from tsNow).\nfunction guessOffsetForZone(zone) {\n  if (!zoneOffsetGuessCache[zone]) {\n    if (zoneOffsetTs === undefined) {\n      zoneOffsetTs = Settings.now();\n    }\n\n    zoneOffsetGuessCache[zone] = zone.offset(zoneOffsetTs);\n  }\n  return zoneOffsetGuessCache[zone];\n}\n\n// this is a dumbed down version of fromObject() that runs about 60% faster\n// but doesn't do any validation, makes a bunch of assumptions about what units\n// are present, and so on.\nfunction quickDT(obj, opts) {\n  const zone = normalizeZone(opts.zone, Settings.defaultZone);\n  if (!zone.isValid) {\n    return DateTime.invalid(unsupportedZone(zone));\n  }\n\n  const loc = Locale.fromObject(opts);\n\n  let ts, o;\n\n  // assume we have the higher-order units\n  if (!isUndefined(obj.year)) {\n    for (const u of orderedUnits) {\n      if (isUndefined(obj[u])) {\n        obj[u] = defaultUnitValues[u];\n      }\n    }\n\n    const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    }\n\n    const offsetProvis = guessOffsetForZone(zone);\n    [ts, o] = objToTS(obj, offsetProvis, zone);\n  } else {\n    ts = Settings.now();\n  }\n\n  return new DateTime({ ts, zone, loc, o });\n}\n\nfunction diffRelative(start, end, opts) {\n  const round = isUndefined(opts.round) ? true : opts.round,\n    format = (c, unit) => {\n      c = roundTo(c, round || opts.calendary ? 0 : 2, true);\n      const formatter = end.loc.clone(opts).relFormatter(opts);\n      return formatter.format(c, unit);\n    },\n    differ = (unit) => {\n      if (opts.calendary) {\n        if (!end.hasSame(start, unit)) {\n          return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);\n        } else return 0;\n      } else {\n        return end.diff(start, unit).get(unit);\n      }\n    };\n\n  if (opts.unit) {\n    return format(differ(opts.unit), opts.unit);\n  }\n\n  for (const unit of opts.units) {\n    const count = differ(unit);\n    if (Math.abs(count) >= 1) {\n      return format(count, unit);\n    }\n  }\n  return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);\n}\n\nfunction lastOpts(argList) {\n  let opts = {},\n    args;\n  if (argList.length > 0 && typeof argList[argList.length - 1] === \"object\") {\n    opts = argList[argList.length - 1];\n    args = Array.from(argList).slice(0, argList.length - 1);\n  } else {\n    args = Array.from(argList);\n  }\n  return [opts, args];\n}\n\n/**\n * Timestamp to use for cached zone offset guesses (exposed for test)\n */\nlet zoneOffsetTs;\n/**\n * Cache for zone offset guesses (exposed for test).\n *\n * This optimizes quickDT via guessOffsetForZone to avoid repeated calls of\n * zone.offset().\n */\nlet zoneOffsetGuessCache = {};\n\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},\n * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.\n * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime.plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.\n * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.\n *\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\nexport default class DateTime {\n  /**\n   * @access private\n   */\n  constructor(config) {\n    const zone = config.zone || Settings.defaultZone;\n\n    let invalid =\n      config.invalid ||\n      (Number.isNaN(config.ts) ? new Invalid(\"invalid input\") : null) ||\n      (!zone.isValid ? unsupportedZone(zone) : null);\n    /**\n     * @access private\n     */\n    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;\n\n    let c = null,\n      o = null;\n    if (!invalid) {\n      const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);\n\n      if (unchanged) {\n        [c, o] = [config.old.c, config.old.o];\n      } else {\n        // If an offset has been passed and we have not been called from\n        // clone(), we can trust it and avoid the offset calculation.\n        const ot = isNumber(config.o) && !config.old ? config.o : zone.offset(this.ts);\n        c = tsToObj(this.ts, ot);\n        invalid = Number.isNaN(c.year) ? new Invalid(\"invalid input\") : null;\n        c = invalid ? null : c;\n        o = invalid ? null : ot;\n      }\n    }\n\n    /**\n     * @access private\n     */\n    this._zone = zone;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.invalid = invalid;\n    /**\n     * @access private\n     */\n    this.weekData = null;\n    /**\n     * @access private\n     */\n    this.localWeekData = null;\n    /**\n     * @access private\n     */\n    this.c = c;\n    /**\n     * @access private\n     */\n    this.o = o;\n    /**\n     * @access private\n     */\n    this.isLuxonDateTime = true;\n  }\n\n  // CONSTRUCT\n\n  /**\n   * Create a DateTime for the current instant, in the system's time zone.\n   *\n   * Use Settings to override these default values if needed.\n   * @example DateTime.now().toISO() //~> now in the ISO format\n   * @return {DateTime}\n   */\n  static now() {\n    return new DateTime({});\n  }\n\n  /**\n   * Create a local DateTime\n   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month, 1-indexed\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @example DateTime.local()                                  //~> now\n   * @example DateTime.local({ zone: \"America/New_York\" })      //~> now, in US east coast time\n   * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12, { locale: \"fr\" })     //~> 2017-03-12T00:00:00, with a French locale\n   * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, { zone: \"utc\" })   //~> 2017-03-12T05:00:00, in UTC\n   * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765\n   * @return {DateTime}\n   */\n  static local() {\n    const [opts, args] = lastOpts(arguments),\n      [year, month, day, hour, minute, second, millisecond] = args;\n    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);\n  }\n\n  /**\n   * Create a DateTime in UTC\n   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {string} [options.weekSettings] - the week settings to set on the resulting DateTime instance\n   * @example DateTime.utc()                                              //~> now\n   * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: \"fr\" })          //~> 2017-03-12T05:45:00Z with a French locale\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: \"fr\" }) //~> 2017-03-12T05:45:10.765Z with a French locale\n   * @return {DateTime}\n   */\n  static utc() {\n    const [opts, args] = lastOpts(arguments),\n      [year, month, day, hour, minute, second, millisecond] = args;\n\n    opts.zone = FixedOffsetZone.utcInstance;\n    return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);\n  }\n\n  /**\n   * Create a DateTime from a JavaScript Date object. Uses the default zone.\n   * @param {Date} date - a JavaScript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @return {DateTime}\n   */\n  static fromJSDate(date, options = {}) {\n    const ts = isDate(date) ? date.valueOf() : NaN;\n    if (Number.isNaN(ts)) {\n      return DateTime.invalid(\"invalid input\");\n    }\n\n    const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n\n    return new DateTime({\n      ts: ts,\n      zone: zoneToUse,\n      loc: Locale.fromObject(options),\n    });\n  }\n\n  /**\n   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromMillis(milliseconds, options = {}) {\n    if (!isNumber(milliseconds)) {\n      throw new InvalidArgumentError(\n        `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`\n      );\n    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {\n      // this isn't perfect because we can still end up out of range because of additional shifting, but it's a start\n      return DateTime.invalid(\"Timestamp out of range\");\n    } else {\n      return new DateTime({\n        ts: milliseconds,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options),\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} seconds - a number of seconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromSeconds(seconds, options = {}) {\n    if (!isNumber(seconds)) {\n      throw new InvalidArgumentError(\"fromSeconds requires a numerical input\");\n    } else {\n      return new DateTime({\n        ts: seconds * 1000,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options),\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.localWeekYear - a week year, according to the locale\n   * @param {number} obj.localWeekNumber - a week number, between 1 and 52 or 53, depending on the year, according to the locale\n   * @param {number} obj.localWeekday - a weekday, 1-7, where 1 is the first and 7 is the last day of the week, according to the locale\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {Object} opts - options for creating this DateTime\n   * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [opts.locale='system\\'s locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\n   * @example DateTime.fromObject({ localWeekYear: 2022, localWeekNumber: 1, localWeekday: 1 }, { locale: \"en-US\" }).toISODate() //=> '2021-12-26'\n   * @return {DateTime}\n   */\n  static fromObject(obj, opts = {}) {\n    obj = obj || {};\n    const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n\n    const loc = Locale.fromObject(opts);\n    const normalized = normalizeObject(obj, normalizeUnitWithLocalWeeks);\n    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, loc);\n\n    const tsNow = Settings.now(),\n      offsetProvis = !isUndefined(opts.specificOffset)\n        ? opts.specificOffset\n        : zoneToUse.offset(tsNow),\n      containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber;\n\n    // cases:\n    // just a weekday -> this week's instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);\n\n    // configure ourselves to deal with gregorian dates or week stuff\n    let units,\n      defaultValues,\n      objNow = tsToObj(tsNow, offsetProvis);\n    if (useWeekData) {\n      units = orderedWeekUnits;\n      defaultValues = defaultWeekUnitValues;\n      objNow = gregorianToWeek(objNow, minDaysInFirstWeek, startOfWeek);\n    } else if (containsOrdinal) {\n      units = orderedOrdinalUnits;\n      defaultValues = defaultOrdinalUnitValues;\n      objNow = gregorianToOrdinal(objNow);\n    } else {\n      units = orderedUnits;\n      defaultValues = defaultUnitValues;\n    }\n\n    // set default values for missing stuff\n    let foundFirst = false;\n    for (const u of units) {\n      const v = normalized[u];\n      if (!isUndefined(v)) {\n        foundFirst = true;\n      } else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      } else {\n        normalized[u] = objNow[u];\n      }\n    }\n\n    // make sure the values we have are in range\n    const higherOrderInvalid = useWeekData\n        ? hasInvalidWeekData(normalized, minDaysInFirstWeek, startOfWeek)\n        : containsOrdinal\n        ? hasInvalidOrdinalData(normalized)\n        : hasInvalidGregorianData(normalized),\n      invalid = higherOrderInvalid || hasInvalidTimeData(normalized);\n\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    }\n\n    // compute the actual time\n    const gregorian = useWeekData\n        ? weekToGregorian(normalized, minDaysInFirstWeek, startOfWeek)\n        : containsOrdinal\n        ? ordinalToGregorian(normalized)\n        : normalized,\n      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),\n      inst = new DateTime({\n        ts: tsFinal,\n        zone: zoneToUse,\n        o: offsetFinal,\n        loc,\n      });\n\n    // gregorian data + weekday serves only to validate\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\n      return DateTime.invalid(\n        \"mismatched weekday\",\n        `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`\n      );\n    }\n\n    if (!inst.isValid) {\n      return DateTime.invalid(inst.invalid);\n    }\n\n    return inst;\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance\n   * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance\n   * @param {string} [opts.weekSettings] - the week settings to set on the resulting DateTime instance\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})\n   * @example DateTime.fromISO('2016-W05-4')\n   * @return {DateTime}\n   */\n  static fromISO(text, opts = {}) {\n    const [vals, parsedZone] = parseISODate(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"ISO 8601\", text);\n  }\n\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\n   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\n   * @return {DateTime}\n   */\n  static fromRFC2822(text, opts = {}) {\n    const [vals, parsedZone] = parseRFC2822Date(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"RFC 2822\", text);\n  }\n\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\n   * @return {DateTime}\n   */\n  static fromHTTP(text, opts = {}) {\n    const [vals, parsedZone] = parseHTTPDate(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"HTTP\", opts);\n  }\n\n  /**\n   * Create a DateTime from an input string and format string.\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromFormat(text, fmt, opts = {}) {\n    if (isUndefined(text) || isUndefined(fmt)) {\n      throw new InvalidArgumentError(\"fromFormat requires an input string and a format\");\n    }\n\n    const { locale = null, numberingSystem = null } = opts,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true,\n      }),\n      [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    } else {\n      return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);\n    }\n  }\n\n  /**\n   * @deprecated use fromFormat instead\n   */\n  static fromString(text, fmt, opts = {}) {\n    return DateTime.fromFormat(text, fmt, opts);\n  }\n\n  /**\n   * Create a DateTime from a SQL date, time, or datetime\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} text - the string to parse\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @example DateTime.fromSQL('2017-05-15')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })\n   * @example DateTime.fromSQL('09:12:34.342')\n   * @return {DateTime}\n   */\n  static fromSQL(text, opts = {}) {\n    const [vals, parsedZone] = parseSQL(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"SQL\", text);\n  }\n\n  /**\n   * Create an invalid DateTime.\n   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent.\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {DateTime}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the DateTime is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDateTimeError(invalid);\n    } else {\n      return new DateTime({ invalid });\n    }\n  }\n\n  /**\n   * Check if an object is an instance of DateTime. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isDateTime(o) {\n    return (o && o.isLuxonDateTime) || false;\n  }\n\n  /**\n   * Produce the format string for a set of options\n   * @param formatOpts\n   * @param localeOpts\n   * @returns {string}\n   */\n  static parseFormatForOpts(formatOpts, localeOpts = {}) {\n    const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));\n    return !tokenList ? null : tokenList.map((t) => (t ? t.val : null)).join(\"\");\n  }\n\n  /**\n   * Produce the the fully expanded format token for the locale\n   * Does NOT quote characters, so quoted tokens will not round trip correctly\n   * @param fmt\n   * @param localeOpts\n   * @returns {string}\n   */\n  static expandFormat(fmt, localeOpts = {}) {\n    const expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));\n    return expanded.map((t) => t.val).join(\"\");\n  }\n\n  static resetCache() {\n    zoneOffsetTs = undefined;\n    zoneOffsetGuessCache = {};\n  }\n\n  // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\n   * @return {number}\n   */\n  get(unit) {\n    return this[unit];\n  }\n\n  /**\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\n   * * The DateTime was created by an operation on another invalid date\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalid === null;\n  }\n\n  /**\n   * Returns an error code if this DateTime is invalid, or null if the DateTime is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get locale() {\n    return this.isValid ? this.loc.locale : null;\n  }\n\n  /**\n   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.isValid ? this.loc.numberingSystem : null;\n  }\n\n  /**\n   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get outputCalendar() {\n    return this.isValid ? this.loc.outputCalendar : null;\n  }\n\n  /**\n   * Get the time zone associated with this DateTime.\n   * @type {Zone}\n   */\n  get zone() {\n    return this._zone;\n  }\n\n  /**\n   * Get the name of the time zone.\n   * @type {string}\n   */\n  get zoneName() {\n    return this.isValid ? this.zone.name : null;\n  }\n\n  /**\n   * Get the year\n   * @example DateTime.local(2017, 5, 25).year //=> 2017\n   * @type {number}\n   */\n  get year() {\n    return this.isValid ? this.c.year : NaN;\n  }\n\n  /**\n   * Get the quarter\n   * @example DateTime.local(2017, 5, 25).quarter //=> 2\n   * @type {number}\n   */\n  get quarter() {\n    return this.isValid ? Math.ceil(this.c.month / 3) : NaN;\n  }\n\n  /**\n   * Get the month (1-12).\n   * @example DateTime.local(2017, 5, 25).month //=> 5\n   * @type {number}\n   */\n  get month() {\n    return this.isValid ? this.c.month : NaN;\n  }\n\n  /**\n   * Get the day of the month (1-30ish).\n   * @example DateTime.local(2017, 5, 25).day //=> 25\n   * @type {number}\n   */\n  get day() {\n    return this.isValid ? this.c.day : NaN;\n  }\n\n  /**\n   * Get the hour of the day (0-23).\n   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n   * @type {number}\n   */\n  get hour() {\n    return this.isValid ? this.c.hour : NaN;\n  }\n\n  /**\n   * Get the minute of the hour (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n   * @type {number}\n   */\n  get minute() {\n    return this.isValid ? this.c.minute : NaN;\n  }\n\n  /**\n   * Get the second of the minute (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n   * @type {number}\n   */\n  get second() {\n    return this.isValid ? this.c.second : NaN;\n  }\n\n  /**\n   * Get the millisecond of the second (0-999).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n   * @type {number}\n   */\n  get millisecond() {\n    return this.isValid ? this.c.millisecond : NaN;\n  }\n\n  /**\n   * Get the week year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 12, 31).weekYear //=> 2015\n   * @type {number}\n   */\n  get weekYear() {\n    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the week number of the week year (1-52ish).\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n   * @type {number}\n   */\n  get weekNumber() {\n    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the day of the week.\n   * 1 is Monday and 7 is Sunday\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekday //=> 4\n   * @type {number}\n   */\n  get weekday() {\n    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Returns true if this date is on a weekend according to the locale, false otherwise\n   * @returns {boolean}\n   */\n  get isWeekend() {\n    return this.isValid && this.loc.getWeekendDays().includes(this.weekday);\n  }\n\n  /**\n   * Get the day of the week according to the locale.\n   * 1 is the first day of the week and 7 is the last day of the week.\n   * If the locale assigns Sunday as the first day of the week, then a date which is a Sunday will return 1,\n   * @returns {number}\n   */\n  get localWeekday() {\n    return this.isValid ? possiblyCachedLocalWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Get the week number of the week year according to the locale. Different locales assign week numbers differently,\n   * because the week can start on different days of the week (see localWeekday) and because a different number of days\n   * is required for a week to count as the first week of a year.\n   * @returns {number}\n   */\n  get localWeekNumber() {\n    return this.isValid ? possiblyCachedLocalWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the week year according to the locale. Different locales assign week numbers (and therefor week years)\n   * differently, see localWeekNumber.\n   * @returns {number}\n   */\n  get localWeekYear() {\n    return this.isValid ? possiblyCachedLocalWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the ordinal (meaning the day of the year)\n   * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n   * @type {number|DateTime}\n   */\n  get ordinal() {\n    return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;\n  }\n\n  /**\n   * Get the human readable short month name, such as 'Oct'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct\n   * @type {string}\n   */\n  get monthShort() {\n    return this.isValid ? Info.months(\"short\", { locObj: this.loc })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable long month name, such as 'October'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthLong //=> October\n   * @type {string}\n   */\n  get monthLong() {\n    return this.isValid ? Info.months(\"long\", { locObj: this.loc })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable short weekday, such as 'Mon'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon\n   * @type {string}\n   */\n  get weekdayShort() {\n    return this.isValid ? Info.weekdays(\"short\", { locObj: this.loc })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the human readable long weekday, such as 'Monday'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday\n   * @type {string}\n   */\n  get weekdayLong() {\n    return this.isValid ? Info.weekdays(\"long\", { locObj: this.loc })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the UTC offset of this DateTime in minutes\n   * @example DateTime.now().offset //=> -240\n   * @example DateTime.utc().offset //=> 0\n   * @type {number}\n   */\n  get offset() {\n    return this.isValid ? +this.o : NaN;\n  }\n\n  /**\n   * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\n   * Defaults to the system's locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameShort() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: \"short\",\n        locale: this.locale,\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\n   * Defaults to the system's locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameLong() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: \"long\",\n        locale: this.locale,\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get whether this zone's offset ever changes, as in a DST.\n   * @type {boolean}\n   */\n  get isOffsetFixed() {\n    return this.isValid ? this.zone.isUniversal : null;\n  }\n\n  /**\n   * Get whether the DateTime is in a DST.\n   * @type {boolean}\n   */\n  get isInDST() {\n    if (this.isOffsetFixed) {\n      return false;\n    } else {\n      return (\n        this.offset > this.set({ month: 1, day: 1 }).offset ||\n        this.offset > this.set({ month: 5 }).offset\n      );\n    }\n  }\n\n  /**\n   * Get those DateTimes which have the same local time as this DateTime, but a different offset from UTC\n   * in this DateTime's zone. During DST changes local time can be ambiguous, for example\n   * `2023-10-29T02:30:00` in `Europe/Berlin` can have offset `+01:00` or `+02:00`.\n   * This method will return both possible DateTimes if this DateTime's local time is ambiguous.\n   * @returns {DateTime[]}\n   */\n  getPossibleOffsets() {\n    if (!this.isValid || this.isOffsetFixed) {\n      return [this];\n    }\n    const dayMs = 86400000;\n    const minuteMs = 60000;\n    const localTS = objToLocalTS(this.c);\n    const oEarlier = this.zone.offset(localTS - dayMs);\n    const oLater = this.zone.offset(localTS + dayMs);\n\n    const o1 = this.zone.offset(localTS - oEarlier * minuteMs);\n    const o2 = this.zone.offset(localTS - oLater * minuteMs);\n    if (o1 === o2) {\n      return [this];\n    }\n    const ts1 = localTS - o1 * minuteMs;\n    const ts2 = localTS - o2 * minuteMs;\n    const c1 = tsToObj(ts1, o1);\n    const c2 = tsToObj(ts2, o2);\n    if (\n      c1.hour === c2.hour &&\n      c1.minute === c2.minute &&\n      c1.second === c2.second &&\n      c1.millisecond === c2.millisecond\n    ) {\n      return [clone(this, { ts: ts1 }), clone(this, { ts: ts2 })];\n    }\n    return [this];\n  }\n\n  /**\n   * Returns true if this DateTime is in a leap year, false otherwise\n   * @example DateTime.local(2016).isInLeapYear //=> true\n   * @example DateTime.local(2013).isInLeapYear //=> false\n   * @type {boolean}\n   */\n  get isInLeapYear() {\n    return isLeapYear(this.year);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's month\n   * @example DateTime.local(2016, 2).daysInMonth //=> 29\n   * @example DateTime.local(2016, 3).daysInMonth //=> 31\n   * @type {number}\n   */\n  get daysInMonth() {\n    return daysInMonth(this.year, this.month);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's year\n   * @example DateTime.local(2016).daysInYear //=> 366\n   * @example DateTime.local(2013).daysInYear //=> 365\n   * @type {number}\n   */\n  get daysInYear() {\n    return this.isValid ? daysInYear(this.year) : NaN;\n  }\n\n  /**\n   * Returns the number of weeks in this DateTime's year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2004).weeksInWeekYear //=> 53\n   * @example DateTime.local(2013).weeksInWeekYear //=> 52\n   * @type {number}\n   */\n  get weeksInWeekYear() {\n    return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;\n  }\n\n  /**\n   * Returns the number of weeks in this DateTime's local week year\n   * @example DateTime.local(2020, 6, {locale: 'en-US'}).weeksInLocalWeekYear //=> 52\n   * @example DateTime.local(2020, 6, {locale: 'de-DE'}).weeksInLocalWeekYear //=> 53\n   * @type {number}\n   */\n  get weeksInLocalWeekYear() {\n    return this.isValid\n      ? weeksInWeekYear(\n          this.localWeekYear,\n          this.loc.getMinDaysInFirstWeek(),\n          this.loc.getStartOfWeek()\n        )\n      : NaN;\n  }\n\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of formatting methods\n   * @param {Object} opts - the same options as toLocaleString\n   * @return {Object}\n   */\n  resolvedLocaleOptions(opts = {}) {\n    const { locale, numberingSystem, calendar } = Formatter.create(\n      this.loc.clone(opts),\n      opts\n    ).resolvedOptions(this);\n    return { locale, numberingSystem, outputCalendar: calendar };\n  }\n\n  // TRANSFORM\n\n  /**\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link DateTime#setZone}('utc')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {Object} [opts={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */\n  toUTC(offset = 0, opts = {}) {\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to `setZone('local')`\n   * @return {DateTime}\n   */\n  toLocal() {\n    return this.setZone(Settings.defaultZone);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */\n  setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {\n    zone = normalizeZone(zone, Settings.defaultZone);\n    if (zone.equals(this.zone)) {\n      return this;\n    } else if (!zone.isValid) {\n      return DateTime.invalid(unsupportedZone(zone));\n    } else {\n      let newTS = this.ts;\n      if (keepLocalTime || keepCalendarTime) {\n        const offsetGuess = zone.offset(this.ts);\n        const asObj = this.toObject();\n        [newTS] = objToTS(asObj, offsetGuess, zone);\n      }\n      return clone(this, { ts: newTS, zone });\n    }\n  }\n\n  /**\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {Object} properties - the properties to set\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })\n   * @return {DateTime}\n   */\n  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });\n    return clone(this, { loc });\n  }\n\n  /**\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')\n   * @return {DateTime}\n   */\n  setLocale(locale) {\n    return this.reconfigure({ locale });\n  }\n\n  /**\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\n   * You can only set units with this method; for \"setting\" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.\n   *\n   * This method also supports setting locale-based week units, i.e. `localWeekday`, `localWeekNumber` and `localWeekYear`.\n   * They cannot be mixed with ISO-week units like `weekday`.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @return {DateTime}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const normalized = normalizeObject(values, normalizeUnitWithLocalWeeks);\n    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, this.loc);\n\n    const settingWeekStuff =\n        !isUndefined(normalized.weekYear) ||\n        !isUndefined(normalized.weekNumber) ||\n        !isUndefined(normalized.weekday),\n      containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber;\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    let mixed;\n    if (settingWeekStuff) {\n      mixed = weekToGregorian(\n        { ...gregorianToWeek(this.c, minDaysInFirstWeek, startOfWeek), ...normalized },\n        minDaysInFirstWeek,\n        startOfWeek\n      );\n    } else if (!isUndefined(normalized.ordinal)) {\n      mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });\n    } else {\n      mixed = { ...this.toObject(), ...normalized };\n\n      // if we didn't set the day but we ended up on an overflow date,\n      // use the last day of the right month\n      if (isUndefined(normalized.day)) {\n        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);\n      }\n    }\n\n    const [ts, o] = objToTS(mixed, this.o, this.zone);\n    return clone(this, { ts, o });\n  }\n\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @example DateTime.now().plus(123) //~> in 123 milliseconds\n   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday\n   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min\n   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min\n   * @return {DateTime}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n    const dur = Duration.fromDurationLike(duration);\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link DateTime#plus}\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   @return {DateTime}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n    const dur = Duration.fromDurationLike(duration).negate();\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * \"Set\" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\n   * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\n   * @return {DateTime}\n   */\n  startOf(unit, { useLocaleWeeks = false } = {}) {\n    if (!this.isValid) return this;\n\n    const o = {},\n      normalizedUnit = Duration.normalizeUnit(unit);\n    switch (normalizedUnit) {\n      case \"years\":\n        o.month = 1;\n      // falls through\n      case \"quarters\":\n      case \"months\":\n        o.day = 1;\n      // falls through\n      case \"weeks\":\n      case \"days\":\n        o.hour = 0;\n      // falls through\n      case \"hours\":\n        o.minute = 0;\n      // falls through\n      case \"minutes\":\n        o.second = 0;\n      // falls through\n      case \"seconds\":\n        o.millisecond = 0;\n        break;\n      case \"milliseconds\":\n        break;\n      // no default, invalid units throw in normalizeUnit()\n    }\n\n    if (normalizedUnit === \"weeks\") {\n      if (useLocaleWeeks) {\n        const startOfWeek = this.loc.getStartOfWeek();\n        const { weekday } = this;\n        if (weekday < startOfWeek) {\n          o.weekNumber = this.weekNumber - 1;\n        }\n        o.weekday = startOfWeek;\n      } else {\n        o.weekday = 1;\n      }\n    }\n\n    if (normalizedUnit === \"quarters\") {\n      const q = Math.ceil(this.month / 3);\n      o.month = (q - 1) * 3 + 1;\n    }\n\n    return this.set(o);\n  }\n\n  /**\n   * \"Set\" this DateTime to the end (meaning the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\n   * @return {DateTime}\n   */\n  endOf(unit, opts) {\n    return this.isValid\n      ? this.plus({ [unit]: 1 })\n          .startOf(unit, opts)\n          .minus(1)\n      : this;\n  }\n\n  // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale.\n   * @param {string} fmt - the format string\n   * @param {Object} opts - opts to override the configuration options on this DateTime\n   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'\n   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'\n   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: \"fr\" }) //=> '2017 avr. 22'\n   * @example DateTime.now().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation\n   * of the DateTime in the assigned locale.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options\n   * @param {Object} opts - opts to override the configuration options on this DateTime\n   * @example DateTime.now().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\n   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\n   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'\n   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\n   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\n   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'\n   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'\n   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'\n   * @return {string}\n   */\n  toLocaleString(formatOpts = Formats.DATE_SHORT, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an array of format \"parts\", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.\n   * @example DateTime.now().toLocaleParts(); //=> [\n   *                                   //=>   { type: 'day', value: '25' },\n   *                                   //=>   { type: 'literal', value: '/' },\n   *                                   //=>   { type: 'month', value: '05' },\n   *                                   //=>   { type: 'literal', value: '/' },\n   *                                   //=>   { type: 'year', value: '1982' }\n   *                                   //=> ]\n   */\n  toLocaleParts(opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)\n      : [];\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.extendedZone=false] - add the time zone format extension\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\n   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'\n   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'\n   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'\n   * @return {string}\n   */\n  toISO({\n    format = \"extended\",\n    suppressSeconds = false,\n    suppressMilliseconds = false,\n    includeOffset = true,\n    extendedZone = false,\n  } = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    const ext = format === \"extended\";\n\n    let c = toISODate(this, ext);\n    c += \"T\";\n    c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);\n    return c;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\n   * @param {Object} opts - options\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'\n   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'\n   * @return {string}\n   */\n  toISODate({ format = \"extended\" } = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return toISODate(this, format === \"extended\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\n   * @return {string}\n   */\n  toISOWeekDate() {\n    return toTechFormat(this, \"kkkk-'W'WW-c\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.extendedZone=true] - add the time zone format extension\n   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'\n   * @return {string}\n   */\n  toISOTime({\n    suppressMilliseconds = false,\n    suppressSeconds = false,\n    includeOffset = true,\n    includePrefix = false,\n    extendedZone = false,\n    format = \"extended\",\n  } = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    let c = includePrefix ? \"T\" : \"\";\n    return (\n      c +\n      toISOTime(\n        this,\n        format === \"extended\",\n        suppressSeconds,\n        suppressMilliseconds,\n        includeOffset,\n        extendedZone\n      )\n    );\n  }\n\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\n   * @return {string}\n   */\n  toRFC2822() {\n    return toTechFormat(this, \"EEE, dd LLL yyyy HH:mm:ss ZZZ\", false);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\n   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'\n   * @return {string}\n   */\n  toHTTP() {\n    return toTechFormat(this.toUTC(), \"EEE, dd LLL yyyy HH:mm:ss 'GMT'\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Date\n   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'\n   * @return {string}\n   */\n  toSQLDate() {\n    if (!this.isValid) {\n      return null;\n    }\n    return toISODate(this, true);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Time\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'\n   * @example DateTime.utc().toSQL() //=> '05:15:16.345'\n   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'\n   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'\n   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'\n   * @return {string}\n   */\n  toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {\n    let fmt = \"HH:mm:ss.SSS\";\n\n    if (includeZone || includeOffset) {\n      if (includeOffsetSpace) {\n        fmt += \" \";\n      }\n      if (includeZone) {\n        fmt += \"z\";\n      } else if (includeOffset) {\n        fmt += \"ZZ\";\n      }\n    }\n\n    return toTechFormat(this, fmt, true);\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'\n   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'\n   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'\n   * @return {string}\n   */\n  toSQL(opts = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */\n  toString() {\n    return this.isValid ? this.toISO() : INVALID;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for the REPL.\n   * @return {string}\n   */\n  [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    if (this.isValid) {\n      return `DateTime { ts: ${this.toISO()}, zone: ${this.zone.name}, locale: ${this.locale} }`;\n    } else {\n      return `DateTime { Invalid, reason: ${this.invalidReason} }`;\n    }\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}\n   * @return {number}\n   */\n  valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime.\n   * @return {number}\n   */\n  toMillis() {\n    return this.isValid ? this.ts : NaN;\n  }\n\n  /**\n   * Returns the epoch seconds of this DateTime.\n   * @return {number}\n   */\n  toSeconds() {\n    return this.isValid ? this.ts / 1000 : NaN;\n  }\n\n  /**\n   * Returns the epoch seconds (as a whole number) of this DateTime.\n   * @return {number}\n   */\n  toUnixInteger() {\n    return this.isValid ? Math.floor(this.ts / 1000) : NaN;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a BSON serializable equivalent to this DateTime.\n   * @return {Date}\n   */\n  toBSON() {\n    return this.toJSDate();\n  }\n\n  /**\n   * Returns a JavaScript object with this DateTime's year, month, day, and so on.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {Object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = { ...this.c };\n\n    if (opts.includeConfig) {\n      base.outputCalendar = this.outputCalendar;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns a JavaScript Date equivalent to this DateTime.\n   * @return {Date}\n   */\n  toJSDate() {\n    return new Date(this.isValid ? this.ts : NaN);\n  }\n\n  // COMPARE\n\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */\n  diff(otherDateTime, unit = \"milliseconds\", opts = {}) {\n    if (!this.isValid || !otherDateTime.isValid) {\n      return Duration.invalid(\"created by diffing an invalid DateTime\");\n    }\n\n    const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };\n\n    const units = maybeArray(unit).map(Duration.normalizeUnit),\n      otherIsLater = otherDateTime.valueOf() > this.valueOf(),\n      earlier = otherIsLater ? this : otherDateTime,\n      later = otherIsLater ? otherDateTime : this,\n      diffed = diff(earlier, later, units, durOpts);\n\n    return otherIsLater ? diffed.negate() : diffed;\n  }\n\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link DateTime#diff}\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  diffNow(unit = \"milliseconds\", opts = {}) {\n    return this.diff(DateTime.now(), unit, opts);\n  }\n\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} otherDateTime - the other end point of the Interval\n   * @return {Interval}\n   */\n  until(otherDateTime) {\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\n  }\n\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime.\n   * Higher-order units must also be identical for this function to return `true`.\n   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.\n   * @param {DateTime} otherDateTime - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @param {Object} opts - options\n   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; only the locale of this DateTime is used\n   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day\n   * @return {boolean}\n   */\n  hasSame(otherDateTime, unit, opts) {\n    if (!this.isValid) return false;\n\n    const inputMs = otherDateTime.valueOf();\n    const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });\n    return (\n      adjustedToZone.startOf(unit, opts) <= inputMs && inputMs <= adjustedToZone.endOf(unit, opts)\n    );\n  }\n\n  /**\n   * Equality check\n   * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.\n   * To compare just the millisecond values, use `+dt1 === +dt2`.\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */\n  equals(other) {\n    return (\n      this.isValid &&\n      other.isValid &&\n      this.valueOf() === other.valueOf() &&\n      this.zone.equals(other.zone) &&\n      this.loc.equals(other.loc)\n    );\n  }\n\n  /**\n   * Returns a string representation of a this time relative to now, such as \"in two days\". Can only internationalize if your\n   * platform supports Intl.RelativeTimeFormat. Rounds down by default.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} [options.style=\"long\"] - the style of units, must be \"long\", \"short\", or \"narrow\"\n   * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of \"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", or \"seconds\"\n   * @param {boolean} [options.round=true] - whether to round the numbers in the output.\n   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.\n   * @param {string} options.locale - override the locale of this DateTime\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> \"in 1 day\"\n   * @example DateTime.now().setLocale(\"es\").toRelative({ days: 1 }) //=> \"dentro de 1 día\"\n   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: \"fr\" }) //=> \"dans 23 heures\"\n   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> \"2 days ago\"\n   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: \"hours\" }) //=> \"48 hours ago\"\n   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> \"1.5 days ago\"\n   */\n  toRelative(options = {}) {\n    if (!this.isValid) return null;\n    const base = options.base || DateTime.fromObject({}, { zone: this.zone }),\n      padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;\n    let units = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\"];\n    let unit = options.unit;\n    if (Array.isArray(options.unit)) {\n      units = options.unit;\n      unit = undefined;\n    }\n    return diffRelative(base, this.plus(padding), {\n      ...options,\n      numeric: \"always\",\n      units,\n      unit,\n    });\n  }\n\n  /**\n   * Returns a string representation of this date relative to today, such as \"yesterday\" or \"next month\".\n   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.\n   * @param {Object} options - options that affect the output\n   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\n   * @param {string} options.locale - override the locale of this DateTime\n   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of \"years\", \"quarters\", \"months\", \"weeks\", or \"days\"\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> \"tomorrow\"\n   * @example DateTime.now().setLocale(\"es\").plus({ days: 1 }).toRelative() //=> \"\"mañana\"\n   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: \"fr\" }) //=> \"demain\"\n   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> \"2 days ago\"\n   */\n  toRelativeCalendar(options = {}) {\n    if (!this.isValid) return null;\n\n    return diffRelative(options.base || DateTime.fromObject({}, { zone: this.zone }), this, {\n      ...options,\n      numeric: \"auto\",\n      units: [\"years\", \"months\", \"days\"],\n      calendary: true,\n    });\n  }\n\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime} the min DateTime, or undefined if called with no argument\n   */\n  static min(...dateTimes) {\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError(\"min requires all arguments be DateTimes\");\n    }\n    return bestBy(dateTimes, (i) => i.valueOf(), Math.min);\n  }\n\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime} the max DateTime, or undefined if called with no argument\n   */\n  static max(...dateTimes) {\n    if (!dateTimes.every(DateTime.isDateTime)) {\n      throw new InvalidArgumentError(\"max requires all arguments be DateTimes\");\n    }\n    return bestBy(dateTimes, (i) => i.valueOf(), Math.max);\n  }\n\n  // MISC\n\n  /**\n   * Explain how a string would be parsed by fromFormat()\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} options - options taken by fromFormat()\n   * @return {Object}\n   */\n  static fromFormatExplain(text, fmt, options = {}) {\n    const { locale = null, numberingSystem = null } = options,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true,\n      });\n    return explainFromTokens(localeToUse, text, fmt);\n  }\n\n  /**\n   * @deprecated use fromFormatExplain instead\n   */\n  static fromStringExplain(text, fmt, options = {}) {\n    return DateTime.fromFormatExplain(text, fmt, options);\n  }\n\n  /**\n   * Build a parser for `fmt` using the given locale. This parser can be passed\n   * to {@link DateTime.fromFormatParser} to a parse a date in this format. This\n   * can be used to optimize cases where many dates need to be parsed in a\n   * specific format.\n   *\n   * @param {String} fmt - the format the string is expected to be in (see\n   * description)\n   * @param {Object} options - options used to set locale and numberingSystem\n   * for parser\n   * @returns {TokenParser} - opaque object to be used\n   */\n  static buildFormatParser(fmt, options = {}) {\n    const { locale = null, numberingSystem = null } = options,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true,\n      });\n    return new TokenParser(localeToUse, fmt);\n  }\n\n  /**\n   * Create a DateTime from an input string and format parser.\n   *\n   * The format parser must have been created with the same locale as this call.\n   *\n   * @param {String} text - the string to parse\n   * @param {TokenParser} formatParser - parser from {@link DateTime.buildFormatParser}\n   * @param {Object} opts - options taken by fromFormat()\n   * @returns {DateTime}\n   */\n  static fromFormatParser(text, formatParser, opts = {}) {\n    if (isUndefined(text) || isUndefined(formatParser)) {\n      throw new InvalidArgumentError(\n        \"fromFormatParser requires an input string and a format parser\"\n      );\n    }\n    const { locale = null, numberingSystem = null } = opts,\n      localeToUse = Locale.fromOpts({\n        locale,\n        numberingSystem,\n        defaultToEN: true,\n      });\n\n    if (!localeToUse.equals(formatParser.locale)) {\n      throw new InvalidArgumentError(\n        `fromFormatParser called with a locale of ${localeToUse}, ` +\n          `but the format parser was created for ${formatParser.locale}`\n      );\n    }\n\n    const { result, zone, specificOffset, invalidReason } = formatParser.explainFromTokens(text);\n\n    if (invalidReason) {\n      return DateTime.invalid(invalidReason);\n    } else {\n      return parseDataToDateTime(\n        result,\n        zone,\n        opts,\n        `format ${formatParser.format}`,\n        text,\n        specificOffset\n      );\n    }\n  }\n\n  // FORMAT PRESETS\n\n  /**\n   * {@link DateTime#toLocaleString} format like 10/14/1983\n   * @type {Object}\n   */\n  static get DATE_SHORT() {\n    return Formats.DATE_SHORT;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_MED() {\n    return Formats.DATE_MED;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_MED_WITH_WEEKDAY() {\n    return Formats.DATE_MED_WITH_WEEKDAY;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_FULL() {\n    return Formats.DATE_FULL;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_HUGE() {\n    return Formats.DATE_HUGE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_SIMPLE() {\n    return Formats.TIME_SIMPLE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SECONDS() {\n    return Formats.TIME_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SHORT_OFFSET() {\n    return Formats.TIME_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_LONG_OFFSET() {\n    return Formats.TIME_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_SIMPLE() {\n    return Formats.TIME_24_SIMPLE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SECONDS() {\n    return Formats.TIME_24_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SHORT_OFFSET() {\n    return Formats.TIME_24_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_LONG_OFFSET() {\n    return Formats.TIME_24_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT() {\n    return Formats.DATETIME_SHORT;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT_WITH_SECONDS() {\n    return Formats.DATETIME_SHORT_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED() {\n    return Formats.DATETIME_MED;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED_WITH_SECONDS() {\n    return Formats.DATETIME_MED_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED_WITH_WEEKDAY() {\n    return Formats.DATETIME_MED_WITH_WEEKDAY;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL() {\n    return Formats.DATETIME_FULL;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL_WITH_SECONDS() {\n    return Formats.DATETIME_FULL_WITH_SECONDS;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE() {\n    return Formats.DATETIME_HUGE;\n  }\n\n  /**\n   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE_WITH_SECONDS() {\n    return Formats.DATETIME_HUGE_WITH_SECONDS;\n  }\n}\n\n/**\n * @private\n */\nexport function friendlyDateTime(dateTimeish) {\n  if (DateTime.isDateTime(dateTimeish)) {\n    return dateTimeish;\n  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {\n    return DateTime.fromJSDate(dateTimeish);\n  } else if (dateTimeish && typeof dateTimeish === \"object\") {\n    return DateTime.fromObject(dateTimeish);\n  } else {\n    throw new InvalidArgumentError(\n      `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`\n    );\n  }\n}\n","import DateTime from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Interval from \"./interval.js\";\nimport Info from \"./info.js\";\nimport Zone from \"./zone.js\";\nimport FixedOffsetZone from \"./zones/fixedOffsetZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport InvalidZone from \"./zones/invalidZone.js\";\nimport SystemZone from \"./zones/systemZone.js\";\nimport Settings from \"./settings.js\";\n\nconst VERSION = \"3.5.0\";\n\nexport {\n  VERSION,\n  DateTime,\n  Duration,\n  Interval,\n  Info,\n  Zone,\n  FixedOffsetZone,\n  IANAZone,\n  InvalidZone,\n  SystemZone,\n  Settings,\n};\n","import { css } from 'lit';\n\nexport default css`\n    ha-card {\n        --page-width: 1920px;\n        --page-height: 1080px;\n        --day-per-week: 7;\n        --rows: 36;\n        width: var(--page-width);\n        height: var(--page-height);\n        \n    }\n\n    ha-card.nobackground {\n        border: none !important;\n        background-color: transparent !important;\n        box-shadow: none !important;\n    }\n\n    .card-content {\n        /* grid-template-columns: repeat(7, 14%);\n        grid-template-rows: repeat(20, 3%); */\n        display: grid;\n        background-color: black;    \n        padding: 0px;\n        grid-template-columns: repeat(var(--day-per-week), calc(var(--page-width) / var(--day-per-week)));\n        grid-template-rows: repeat(var(--rows) , calc(var(--page-height) / var(--rows)));\n    }\n\n    .grid-item {\n        position: relative;    \n        text-align: center;\n        margin: 4px;\n    }\n\n    span.icon {\n        vertical-align: middle;\n        height: 100%;\n        display: inline-block;\n    }\n\n    img.icon {\n        height: 100%;\n    }\n\n    .event {\n        background-color: antiquewhite;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n\n    .date {\n        background-color: aquamarine;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n    \n    .today {\n        background-color: red;\n    }   \n\n    .text, .month, .number {\n        margin: 2px;\n    }\n\n    .container.hasActions {\n      cursor: pointer;\n    }\n\n    .container .legend {\n        width: 100%;\n    }\n\n    .container .legend ul {\n        display: flex;\n        flex-wrap: wrap;\n        gap: var(--legend-spacing);\n        margin: 0;\n        padding: 0;\n        list-style: none;\n    }\n    \n    .container .legend ul li {\n        display: block;\n        --mdc-icon-size: 16px;\n    }\n    \n    .container .legend ul li.hasToggle {\n        cursor: pointer;\n    }\n\n    .container .legend ul li.hidden {\n        opacity: .5;\n    }\n\n    .container .legend ul li ha-icon {\n        color: var(--legend-calendar-color, var(--divider-color, #ffffff));\n    }\n\n    .container .legend ul li.hidden ha-icon {\n        color: var(--divider-color, #ffffff);\n    }\n\n    .container .legend ul li.noIcon:before {\n        content: '';\n        display: inline-block;\n        width: var(--legend-dot-size);\n        height: var(--legend-dot-size);\n        background-color: var(--legend-calendar-color, var(--divider-color, #ffffff));\n        border-radius: 50%;\n        margin: 0 5px 0 0;\n        vertical-align: middle;\n    }\n\n    .container .legend ul li.hidden.noIcon:before {\n        background-color: var(--divider-color, #ffffff);\n    }\n\n    .container .day {\n        position: relative;\n        margin: 0 0 var(--days-spacing) 0;\n    }\n\n    .container .day .date {\n        position: relative;\n        z-index: 1;\n    }\n\n    .container .day .date .number {\n        font-size: var(--day-date-number-font-size);\n        line-height: var(--day-date-number-line-height);\n    }\n\n    .container .day .date .text {\n        font-size: var(--day-date-text-font-size);\n    }\n\n    .container .day .weather {\n        position: absolute;\n        top: 0;\n        right: 0;\n        z-index: 2;\n        font-size: var(--weather-temperature-font-size);\n        cursor: pointer;\n    }\n\n    .container .day .weather .icon {\n        display: inline-block;\n        vertical-align: middle;\n    }\n\n    .container .day .weather .icon img {\n        max-width: var(--weather-icon-size);\n        max-height: var(--weather-icon-size);\n    }\n\n    .container .day .weather div.temperature {\n        display: inline-block;\n        margin: 0 5px 0 0;\n        vertical-align: middle;\n    }\n\n    .container .day .weather .temperature:has(.high) .low:before {\n        content: var(--weather-temperature-separator);\n    }\n\n    .container .day .events {\n        margin-top: var(--events-margin-top);\n    }\n\n    .container .day .events .none,\n    .container .day .events .more,\n    .container .day .events .event {\n        margin-bottom: var(--event-spacing);\n        background-color: var(--event-background-color);\n        border-radius: 0 var(--event-border-radius) var(--event-border-radius) 0;\n        font-size: var(--event-font-size);\n        line-height: var(--event-line-height);\n    }\n\n    .container .day .events .none,\n    .container .day .events .more {\n        padding: var(--event-padding);\n        border-radius: var(--event-border-radius);\n    }\n\n    .container .day .events .event {\n        display: flex;\n        border-left: var(--event-border-width) solid var(--border-color, var(--divider-color, #ffffff));\n        cursor: pointer;\n    }\n\n    .container .day .events .event .additionalColor {\n        width: var(--event-border-width);\n        background-color: var(--event-additional-color);\n    }\n\n    .container .day .events .event .icon {\n        padding: var(--event-padding);\n    }\n\n    .container .day .events .event .inner {\n        flex-grow: 1;\n        padding: var(--event-padding);\n    }\n\n    .container .day .events .event .time {\n        color: var(--secondary-text-color, #aaaaaa);\n        margin: 0 0 3px 0;\n    }\n\n    .container .day .events .event .location {\n        margin: 3px 0 0 0;\n        --mdc-icon-size: var(--event-icon-size);\n    }\n\n    .loader {\n        position: absolute;\n        top: 16px;\n        right: 16px;\n        width: 40px;\n        height: 40px;\n    }\n\n    .loader:after {\n        content: \" \";\n        display: block;\n        width: 24px;\n        height: 24px;\n        margin: 4px;\n        border-radius: 50%;\n        border: 3px solid var(--primary-text-color);\n        border-color: var(--primary-text-color) transparent var(--primary-text-color) transparent;\n        animation: loader 1.2s linear infinite;\n    }\n\n    ha-dialog .calendar,\n    ha-dialog .datetime,\n    ha-dialog .location {\n        display: flex;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    ha-dialog .calendar ha-icon,\n    ha-dialog .datetime ha-icon,\n    ha-dialog .location ha-icon {\n        margin-right: 8px;\n    }\n\n    ha-dialog .location .info a {\n        color: var(--primary-text-color);\n    }\n\n    ha-dialog .description {\n        border-top: 1px solid var(--primary-text-color);\n        margin-top: 16px;\n        padding-top: 16px;\n    }\n\n    @keyframes loader {\n        0% {\n            transform: rotate(0deg);\n        }\n        100% {\n            transform: rotate(360deg);\n        }\n    }\n\n    @container weekplanner (width <= 1920px) {\n        ha-card .container .day {\n            --days-columns: var(--days-columns-lg, 7);\n        }\n        ha-card.compact .container .day {\n            --days-columns: var(--days-columns-lg, 7);\n        }\n    }\n    \n    @container weekplanner (width <= 1280px) {\n        ha-card .container .day {\n            --days-columns: var(--days-columns-md, 5);\n        }\n        ha-card.compact .container .day {\n            --days-columns: var(--days-columns-md, 7);\n        }\n    }\n\n    @container weekplanner (width <= 1024px) {\n        ha-card .container .day {\n            --days-columns: var(--days-columns-sm, 3);\n        }\n        ha-card.compact .container .day {\n            --days-columns: var(--days-columns-sm, 4);\n        }\n    }\n  \n    @container weekplanner (width <= 640px) {\n        ha-card .container .day {\n            --days-columns: var(--days-columns-xs, 1);\n        }\n        ha-card.compact .container .day {\n            --days-columns: var(--days-columns-xs, 2);\n        }\n    }\n`;\n","module.exports = \"351e0e11d8def79e\";","module.exports = \"6a2494a47e0110b1\";","module.exports = \"f19d39b001eaca3d\";","module.exports = \"fadb970b81dd1e8b\";","module.exports = \"c7ce3daecad1b318\";","module.exports = \"2a4415927295e646\";","module.exports = \"6ed021849478a191\";","module.exports = \"02c1144c3dd597d0\";","module.exports = \"9247561f510a92a1\";","module.exports = \"d46edf60c720da64\";","module.exports = \"0c3f0995346724f8\";","module.exports = \"3594317b5db1d8dd\";","module.exports = \"cfeecab8ba073599\";","module.exports = \"e4b9b1d68601365a\";","import { html, LitElement } from \"lit\";\r\nimport styles from './editor.styles';\r\n\r\nexport class FourWeekPlannerCardEditor extends LitElement {\r\n    static styles = styles;\r\n\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this.loadCustomElements();\r\n    }\r\n\r\n    async loadCustomElements() {\r\n        if (!customElements.get(\"ha-entity-picker\")) {\r\n            await customElements.get(\"hui-entities-card\").getConfigElement();\r\n        }\r\n    }\r\n\r\n    static get properties() {\r\n        return {\r\n            hass: {},\r\n            _config: {},\r\n        };\r\n    }\r\n\r\n    setConfig(config) {\r\n        this._config = config;\r\n    }\r\n\r\n    render() {\r\n        if (!this.hass || !this._config) {\r\n            return html``;\r\n        }\r\n\r\n        return html`\r\n            <div style=\"display: flex; flex-direction: column\">\r\n                ${this.addTextField('title', 'Title')}\r\n                ${this.addExpansionPanel(\r\n                    'Calendars',\r\n                    html`\r\n                        ${this.getConfigValue('calendars').map((calendar, index) => {\r\n                            return html`\r\n                                ${this.addExpansionPanel(\r\n                                    `Calendar: ${calendar.name ?? calendar.entity}`,\r\n                                    html`\r\n                                        ${this.addEntityPickerField('calendars.' + index + '.entity', 'Entity', ['calendar'])}\r\n                                        ${this.addTextField('calendars.' + index + '.name', 'Name')}\r\n                                        ${this.addTextField('calendars.' + index + '.color', 'Color')}\r\n                                        ${this.addIconPickerField('calendars.' + index + '.icon', 'Icon')}\r\n                                        ${this.addTextField('calendars.' + index + '.eventTitleField', 'Event title field', 'text', 'summary')}\r\n                                        ${this.addTextField('calendars.' + index + '.filter', 'Filter events (regex)')}\r\n                                        ${this.addTextField('calendars.' + index + '.filterText', 'Filter event text (regex)')}\r\n                                        ${this.addBooleanField('calendars.' + index + '.hideInLegend', 'Hide in legend')}\r\n                                        ${this.addButton('Remove calendar', 'mdi:trash-can', () => {\r\n                                            const config = JSON.parse(JSON.stringify(this._config));\r\n                                            if (config.calendars.length === 1) {\r\n                                                config.calendars = [];\r\n                                            } else {\r\n                                                delete config.calendars[index];\r\n                                                config.calendars = config.calendars.filter(Boolean);\r\n                                            }\r\n                                            this._config = config;\r\n                                            this.dispatchConfigChangedEvent();\r\n                                        })}\r\n                                    `\r\n                                )}\r\n                            `\r\n                        })}\r\n                        ${this.addButton('Add calendar', 'mdi:plus', () => {\r\n                            const index = this.getConfigValue('calendars').length;\r\n                            this.setConfigValue('calendars.' + index, {});\r\n                        })}\r\n                    `\r\n                )}\r\n                ${this.addExpansionPanel(\r\n                    'Days',\r\n                    html`\r\n                        ${this.addTextField('days', 'Days')}\r\n                        ${this.addSelectField('startingDay', 'Starting day', [\r\n                            {\r\n                                value: 'today',\r\n                                label: 'Today',\r\n                            }, {\r\n                                value: 'tomorrow',\r\n                                label: 'Tomorrow',\r\n                            }, {\r\n                                value: 'yesterday',\r\n                                label: 'Yesterday',\r\n                            }, {\r\n                                value: 'sunday',\r\n                                label: 'Sunday',\r\n                            }, {\r\n                                value: 'monday',\r\n                                label: 'Monday',\r\n                            }, {\r\n                                value: 'tuesday',\r\n                                label: 'Tuesday',\r\n                            }, {\r\n                                value: 'wednesday',\r\n                                label: 'Wednesday',\r\n                            }, {\r\n                                value: 'thursday',\r\n                                label: 'Thursday',\r\n                            }, {\r\n                                value: 'friday',\r\n                                label: 'Friday',\r\n                            }, {\r\n                                value: 'saturday',\r\n                                label: 'Saturday',\r\n                            }\r\n                        ], true)}\r\n                        ${this.addTextField('startingDayOffset', 'Starting day offset', 'number')}\r\n                        ${this.addBooleanField('hideWeekend', 'Hide weekend')}\r\n                        ${this.addBooleanField('hideDaysWithoutEvents', 'Hide days without events except for today')}\r\n                        ${this.addBooleanField('hideTodayWithoutEvents', 'Also hide today without events')}\r\n                        ${this.addTextField('maxDayEvents', 'Maximum number of events per day (0 is no maximum)', 'number', 0)}\r\n                    `\r\n                )}\r\n                ${this.addExpansionPanel(\r\n                    'Events',\r\n                    html`\r\n                        ${this.addTextField('maxEvents', 'Maximum number of events (0 is no maximum)', 'number', 0)}\r\n                        ${this.addBooleanField('hidePastEvents', 'Hide past events')}\r\n                        ${this.addTextField('filter', 'Filter events (regex)')}\r\n                        ${this.addTextField('filterText', 'Filter event text (regex)')}\r\n                        ${this.addBooleanField('combineSimilarEvents', 'Combine similar events')}\r\n                        ${this.addBooleanField('showTitle', 'Show title in overview', true)}\r\n                        ${this.addBooleanField('showDescription', 'Show description in overview')}\r\n                        ${this.addBooleanField('showLocation', 'Show location in overview')}\r\n                        ${this.addTextField('locationLink', 'Override location link base URL')}\r\n                    `\r\n                )}\r\n                ${this.addExpansionPanel(\r\n                    'Date/time formats',\r\n                    html`\r\n                        <p>These formats use <a href=\"https://moment.github.io/luxon/#/formatting?id=table-of-tokens\" target=\"_blank\">Luxon format tokens</a></p>\r\n                        ${this.addTextField('locale', 'Locale')}\r\n                        ${this.addTextField('dateFormat', 'Date format')}\r\n                        ${this.addTextField('timeFormat', 'Time format')}\r\n                        ${this.addTextField('dayFormat', 'Override day number')}\r\n                    `\r\n                )}\r\n                ${this.addExpansionPanel(\r\n                    'Weather',\r\n                    html`\r\n                        ${this.addEntityPickerField('weather.entity', 'Weather entity', ['weather'])}\r\n                        ${this.addBooleanField('weather.showCondition', 'Show condition icon')}\r\n                        ${this.addBooleanField('weather.showTemperature', 'Show temperature')}\r\n                        ${this.addBooleanField('weather.showLowTemperature', 'Show low temperature')}\r\n                        ${this.addBooleanField('weather.useTwiceDaily', 'Use twice daily if entity does not support daily')}\r\n                    `\r\n                )}\r\n                ${this.addExpansionPanel(\r\n                    'Override columns',\r\n                    html`\r\n                        <p>The number of columns is based on the size of the card.</p>\r\n                        ${this.addTextField('columns.extraLarge', 'Extra large (>= 1920px)', 'number')}\r\n                        ${this.addTextField('columns.large', 'Large (>= 1280px)', 'number')}\r\n                        ${this.addTextField('columns.medium', 'Medium (>= 1024px)', 'number')}\r\n                        ${this.addTextField('columns.small', 'Small (>= 640px)', 'number')}\r\n                        ${this.addTextField('columns.extraSmall', 'Extra small (< 640px)', 'number')}\r\n                    `\r\n                )}\r\n                ${this.addExpansionPanel(\r\n                    'Appearance',\r\n                    html`\r\n                        ${this.addBooleanField('noCardBackground', 'No card background')}\r\n                        ${this.addTextField('eventBackground', 'Override events background color')}\r\n                        ${this.addBooleanField('compact', 'Compact mode')}\r\n                    `\r\n                )}\r\n                ${this.addExpansionPanel(\r\n                    'Legend',\r\n                    html`\r\n                        ${this.addBooleanField('showLegend', 'Show legend')}\r\n                        ${this.addBooleanField('legendToggle', 'Toggle calendars by clicking on the legend')}\r\n                    `\r\n                )}\r\n                ${this.addExpansionPanel(\r\n                    'Texts',\r\n                    html`\r\n                        ${this.addTextField('texts.fullDay', 'Entire day')}\r\n                        ${this.addTextField('texts.noEvents', 'No events')}\r\n                        ${this.addTextField('texts.moreEvents', 'More events')}\r\n                        ${this.addTextField('texts.today', 'Today')}\r\n                        ${this.addTextField('texts.tomorrow', 'Tomorrow')}\r\n                        ${this.addTextField('texts.yesterday', 'Yesterday')}\r\n                        ${this.addTextField('texts.sunday', 'Sunday')}\r\n                        ${this.addTextField('texts.monday', 'Monday')}\r\n                        ${this.addTextField('texts.tuesday', 'Tuesday')}\r\n                        ${this.addTextField('texts.wednesday', 'Wednesday')}\r\n                        ${this.addTextField('texts.thursday', 'Thursday')}\r\n                        ${this.addTextField('texts.friday', 'Friday')}\r\n                        ${this.addTextField('texts.saturday', 'Saturday')}\r\n                    `\r\n                )}\r\n                ${this.addExpansionPanel(\r\n                    'Miscellaneous',\r\n                    html`\r\n                        ${this.addTextField('updateInterval', 'Override update interval', 'number')}\r\n                    `\r\n                )}\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    addTextField(name, label, type, defaultValue) {\r\n        return html`\r\n            <ha-textfield\r\n                name=\"${name}\"\r\n                label=\"${label ?? name}\"\r\n                type=\"${type ?? 'text'}\"\r\n                value=\"${this.getConfigValue(name, defaultValue)}\"\r\n                @keyup=\"${this._valueChanged}\"\r\n                @change=\"${this._valueChanged}\"\r\n            />\r\n        `;\r\n    }\r\n\r\n    addEntityPickerField(name, label, includeDomains, defaultValue) {\r\n        return html`\r\n            <ha-entity-picker\r\n                .hass=\"${this.hass}\"\r\n                name=\"${name}\"\r\n                label=\"${label ?? name}\"\r\n                value=\"${this.getConfigValue(name, defaultValue)}\"\r\n                .includeDomains=\"${includeDomains}\"\r\n                @change=\"${this._valueChanged}\"\r\n            />\r\n        `;\r\n    }\r\n\r\n    addIconPickerField(name, label, defaultValue) {\r\n        return html`\r\n            <ha-icon-picker\r\n                .hass=\"${this.hass}\"\r\n                name=\"${name}\"\r\n                label=\"${label ?? name}\"\r\n                value=\"${this.getConfigValue(name, defaultValue)}\"\r\n                @change=\"${this._valueChanged}\"\r\n            />\r\n        `;\r\n    }\r\n\r\n    addSelectField(name, label, options, clearable, defaultValue) {\r\n        return html`\r\n            <ha-select\r\n                name=\"${name}\"\r\n                label=\"${label ?? name}\"\r\n                value=\"${this.getConfigValue(name, defaultValue)}\"\r\n                .clearable=\"${clearable}\"\r\n                @change=\"${this._valueChanged}\"\r\n                @closed=\"${(event) => { event.stopPropagation(); } /* Prevent a bug where the editor dialog also closes. See https://github.com/material-components/material-web/issues/1150 */}\"\r\n            >\r\n                ${options.map((option) => {\r\n                    return html`\r\n                        <mwc-list-item\r\n                            value=\"${option.value}\"\r\n                        >${option.label ?? option.value}</mwc-list-item>\r\n                    `;\r\n                })}\r\n            </ha-select>\r\n        `;\r\n    }\r\n\r\n    addBooleanField(name, label, defaultValue) {\r\n        return html`\r\n            <ha-formfield\r\n                label=\"${label ?? name}\"\r\n            >\r\n                <ha-switch\r\n                    name=\"${name}\"\r\n                    .checked=\"${this.getConfigValue(name, defaultValue)}\"\r\n                    value=\"true\"\r\n                    @change=\"${this._valueChanged}\"\r\n                />\r\n            </ha-formfield>\r\n        `;\r\n    }\r\n\r\n    addExpansionPanel(header, content, expanded) {\r\n        return html`\r\n            <ha-expansion-panel\r\n                header=\"${header}\"\r\n                .expanded=\"${expanded ?? false}\"\r\n                outlined=\"true\"\r\n            >\r\n                <div style=\"display: flex; flex-direction: column\">\r\n                    ${content}\r\n                </div>\r\n            </ha-expansion-panel>\r\n        `;\r\n    }\r\n\r\n    addButton(text, icon, clickFunction) {\r\n        return html`\r\n            <ha-button\r\n                @click=\"${clickFunction}\"\r\n            >\r\n                <ha-icon icon=\"${icon}\"></ha-icon>\r\n                ${text}\r\n            </ha-button>\r\n        `;\r\n    }\r\n\r\n    _valueChanged(event) {\r\n        const target = event.target;\r\n        let value = target.value;\r\n\r\n        if (target.tagName === 'HA-SWITCH') {\r\n            value = target.checked;\r\n        }\r\n\r\n        this.setConfigValue(target.attributes.name.value, value);\r\n    }\r\n\r\n    getConfigValue(key, defaultValue) {\r\n        if (!this._config) {\r\n            return '';\r\n        }\r\n\r\n        defaultValue = defaultValue ?? '';\r\n\r\n        return key.split('.').reduce((o, i) => o[i] ?? defaultValue, this._config) ?? defaultValue;\r\n    }\r\n\r\n    setConfigValue(key, value) {\r\n        const config = JSON.parse(JSON.stringify(this._config));\r\n        const keyParts = key.split('.');\r\n        const lastKeyPart = keyParts.pop();\r\n        const lastObject = keyParts.reduce((objectPart, keyPart) => {\r\n            if (!objectPart[keyPart]) {\r\n                objectPart[keyPart] = {};\r\n            }\r\n            return objectPart[keyPart];\r\n        }, config);\r\n        if (value === '') {\r\n            delete lastObject[lastKeyPart];\r\n        } else {\r\n            lastObject[lastKeyPart] = value;\r\n        }\r\n        this._config = config;\r\n\r\n        this.dispatchConfigChangedEvent();\r\n    }\r\n\r\n    dispatchConfigChangedEvent() {\r\n        const configChangedEvent = new CustomEvent(\"config-changed\", {\r\n            detail: { config: this._config },\r\n            bubbles: true,\r\n            composed: true,\r\n        });\r\n        this.dispatchEvent(configChangedEvent);\r\n    }\r\n}\r\n","import { css } from 'lit';\n\nexport default css`\n    ha-textfield,\n    ha-select,\n    ha-formfield,\n    ha-expansion-panel,\n    ha-button,\n    ha-entity-picker,\n    ha-icon-picker {\n      margin: 8px 0;\n    }\n`;\n","{\n  \"name\": \"four-week-planner-card\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Custom Home Assistant card to display events for 4 weeks from one or several calendars.\",\n  \"source\": \"src/index.js\",\n  \"module\": \"dist/four-week-planner-card.js\",\n  \"targets\": {\n    \"module\": {\n      \"includeNodeModules\": true\n    }\n  },\n  \"scripts\": {\n    \"watch\": \"parcel watch\",\n    \"build\": \"parcel build\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/NH-Pro-Wifi/four-week-planner-card.git\"\n  },\n  \"keywords\": [\n    \"lovelace\"\n  ],\n  \"author\": \"Rudy Gnodde\",\n  \"licence\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/NH-Pro-Wifi/four-week-planner-card/issues\"\n  },\n  \"homepage\": \"https://github.com/NH-Pro-Wifi/four-week-planner-card\",\n  \"devDependencies\": {\n    \"@parcel/optimizer-data-url\": \"^2.12.0\",\n    \"@parcel/transformer-inline-string\": \"^2.11.0\",\n    \"parcel\": \"^2.11.0\",\n    \"svgo\": \"^3.3.2\"\n  },\n  \"dependencies\": {\n    \"lit\": \"^3.1.2\",\n    \"luxon\": \"^3.4.4\",\n    \"bootstrap\": \"5.0.2\"\n  }\n}\n"],"names":["is","defineProperty","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","getPrototypeOf","Object","global","globalThis","trustedTypes","emptyStringForBooleanAttribute","emptyScript","polyfillSupport","reactiveElementPolyfillSupport","JSCompiler_renameProperty","prop","_obj","defaultConverter","toAttribute","value","type","Boolean","Array","JSON","stringify","fromAttribute","fromValue","Number","parse","e","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","hasChanged","Symbol","metadata","litPropertyMetadata","WeakMap","ReactiveElement","HTMLElement","addInitializer","initializer","this","__prepare","_initializers","push","observedAttributes","finalize","__attributeToPropertyMap","keys","createProperty","name","options","state","elementProperties","set","noAccessor","key","descriptor","getPropertyDescriptor","undefined","prototype","get","v","call","oldValue","requestUpdate","configurable","enumerable","getPropertyOptions","hasOwnProperty","superCtor","Map","finalized","props","properties","propKeys","p","attr","__attributeNameForProperty","elementStyles","finalizeStyles","styles","isArray","Set","flat","Infinity","reverse","s","unshift","getCompatibleStyle","toLowerCase","constructor","super","__instanceProperties","isUpdatePending","hasUpdated","__reflectingProperty","__initialize","__updatePromise","Promise","res","enableUpdating","_$changedProperties","__saveInstanceProperties","forEach","i","addController","controller","__controllers","add","renderRoot","isConnected","hostConnected","removeController","delete","instanceProperties","size","createRenderRoot","shadowRoot","attachShadow","shadowRootOptions","adoptStyles","connectedCallback","c","_requestedUpdate","disconnectedCallback","hostDisconnected","attributeChangedCallback","_old","_$attributeToProperty","__propertyToAttribute","attrValue","removeAttribute","setAttribute","ctor","propName","_$changeProperty","__enqueueUpdate","has","__reflectingProperties","reject","result","scheduleUpdate","performUpdate","wrapped","shouldUpdate","changedProperties","willUpdate","hostUpdate","update","__markUpdated","_$didUpdate","_changedProperties","hostUpdated","firstUpdated","updated","updateComplete","getUpdateComplete","mode","reactiveElementVersions","supportsAdoptingStyleSheets","ShadowRoot","ShadyCSS","nativeShadow","Document","CSSStyleSheet","constructionToken","cssTagCache","CSSResult","cssText","strings","safeToken","Error","_strings","styleSheet","_styleSheet","cacheable","length","replaceSync","toString","unsafeCSS","css","values","reduce","acc","idx","textFromCSSResult","adoptedStyleSheets","map","style","document","createElement","nonce","textContent","appendChild","sheet","rule","cssRules","cssResultFromStyleSheet","policy","createPolicy","createHTML","boundAttributeSuffix","marker","Math","random","toFixed","slice","markerMatch","nodeMarker","d","createMarker","createComment","isPrimitive","isIterable","iterator","SPACE_CHAR","textEndRegex","commentEndRegex","comment2EndRegex","tagEndRegex","RegExp","singleQuoteAttrEndRegex","doubleQuoteAttrEndRegex","rawTextElement","tag","_$litType$","html","svg","mathml","noChange","for","nothing","templateCache","walker","createTreeWalker","trustFromTemplateString","tsa","stringFromTSA","getTemplateHtml","l","attrNames","rawTextEndRegex","regex","attrName","match","attrNameEndIndex","lastIndex","exec","test","end","startsWith","Template","node","parts","nodeIndex","attrNameIndex","partCount","el","currentNode","content","wrapper","firstChild","replaceWith","childNodes","nextNode","nodeType","hasAttributes","getAttributeNames","endsWith","realName","statics","getAttribute","split","m","index","PropertyPart","BooleanAttributePart","EventPart","AttributePart","tagName","append","data","indexOf","_options","innerHTML","resolveDirective","part","parent","attributeIndex","currentDirective","__directives","__directive","nextDirectiveConstructor","_$initialize","_$resolve","TemplateInstance","template","_$parts","_$disconnectableChildren","_$template","_$parent","parentNode","_$isConnected","_clone","fragment","creationScope","importNode","partIndex","templatePart","ChildPart","nextSibling","ElementPart","_update","_$setValue","__isConnected","startNode","endNode","_$committedValue","_$startNode","_$endNode","directiveParent","_$clear","_commitText","_commitTemplateResult","_commitNode","_commitIterable","_insert","insertBefore","createTextNode","_$getTemplate","h","instance","itemParts","itemPart","item","start","from","_$notifyConnectionChanged","n","remove","setConnected","element","fill","valueIndex","noCommit","change","_commitValue","toggleAttribute","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","removeEventListener","addEventListener","handleEvent","event","host","_$LH","_boundAttributeSuffix","_marker","_markerMatch","_HTML_RESULT","_getTemplateHtml","_TemplateInstance","_isIterable","_resolveDirective","_ChildPart","_AttributePart","_BooleanAttributePart","_EventPart","_PropertyPart","_ElementPart","litHtmlPolyfillSupport","litHtmlVersions","render","container","partOwnerNode","renderBefore","LitElement","renderOptions","__childPart","litElementHydrateSupport","litElementPolyfillSupport","_$LE","litElementVersions","isServer","UnsafeHTMLDirective","Directive","partInfo","_value","PartType","CHILD","directiveName","_templateResult","raw","resultType","unsafeHTML","directive","ATTRIBUTE","PROPERTY","BOOLEAN_ATTRIBUTE","EVENT","ELEMENT","_$litDirective$","_partInfo","__part","__attributeIndex","_part","LuxonError","_Error","_inheritsLoose","apply","arguments","_wrapNativeSuper","InvalidDateTimeError","_LuxonError","reason","toMessage","InvalidIntervalError","_LuxonError2","InvalidDurationError","_LuxonError3","ConflictingSpecificationError","_LuxonError4","InvalidUnitError","_LuxonError5","unit","InvalidArgumentError","_LuxonError6","ZoneIsAbstractError","_LuxonError7","DATE_SHORT","year","month","day","DATE_MED","DATE_MED_WITH_WEEKDAY","weekday","DATE_FULL","DATE_HUGE","TIME_SIMPLE","hour","minute","TIME_WITH_SECONDS","second","TIME_WITH_SHORT_OFFSET","timeZoneName","TIME_WITH_LONG_OFFSET","TIME_24_SIMPLE","hourCycle","TIME_24_WITH_SECONDS","TIME_24_WITH_SHORT_OFFSET","TIME_24_WITH_LONG_OFFSET","DATETIME_SHORT","DATETIME_SHORT_WITH_SECONDS","DATETIME_MED","DATETIME_MED_WITH_SECONDS","DATETIME_MED_WITH_WEEKDAY","DATETIME_FULL","DATETIME_FULL_WITH_SECONDS","DATETIME_HUGE","DATETIME_HUGE_WITH_SECONDS","Zone","_proto","offsetName","ts","opts","formatOffset","format","offset","equals","otherZone","_createClass","singleton","SystemZone","_Zone","_ref","locale","parseZoneInfo","Date","getTimezoneOffset","Intl","DateTimeFormat","resolvedOptions","timeZone","dtfCache","makeDTF","zone","hour12","era","typeToPos","hackyOffset","dtf","date","formatted","replace","parsed","fMonth","fDay","fYear","fadOrBc","fHour","fMinute","fSecond","partsOffset","formatToParts","filled","_formatted$i","pos","isUndefined","parseInt","ianaZoneCache","IANAZone","create","resetCache","isValidSpecifier","isValidZone","_this","zoneName","valid","isNaN","NaN","_ref2","adOrBc","abs","adjustedHour","asUTC","objToLocalTS","millisecond","asTS","over","intlLFCache","getCachedLF","locString","ListFormat","intlDTCache","getCachedDTF","intlNumCache","getCachedINF","inf","NumberFormat","intlRelCache","getCachedRTF","_opts","base","cacheKeyOpts","_objectWithoutPropertiesLoose","_excluded","RelativeTimeFormat","sysLocaleCache","systemLocale","weekInfoCache","getCachedWeekInfo","Locale","getWeekInfo","weekInfo","parseLocaleString","localeStr","xIndex","substring","uIndex","selectedStr","smaller","numberingSystem","calendar","intlConfigString","outputCalendar","includes","mapMonths","f","ms","dt","DateTime","utc","mapWeekdays","listStuff","loc","englishFn","intlFn","listingMode","supportsFastNumbers","intl","PolyNumberFormatter","forceSimple","padTo","floor","otherOpts","_excluded2","intlOpts","_extends","useGrouping","minimumIntegerDigits","fixed","roundTo","padStart","PolyDateFormatter","originalZone","z","gmtOffset","offsetZ","setZone","plus","minutes","_proto2","join","toJSDate","PolyRelFormatter","isEnglish","hasRelative","rtf","_proto3","count","English","numeric","fallbackWeekSettings","firstDay","minimalDays","weekend","fromOpts","weekSettings","defaultToEN","specifiedLocale","Settings","defaultLocale","localeR","numberingSystemR","defaultNumberingSystem","outputCalendarR","defaultOutputCalendar","weekSettingsR","validateWeekSettings","defaultWeekSettings","fromObject","_temp","numbering","_parseLocaleString","parsedLocale","parsedNumberingSystem","parsedOutputCalendar","weekdaysCache","standalone","monthsCache","meridiemCache","eraCache","fastNumbersCached","_proto4","isActuallyEn","hasNoWeirdness","clone","alts","redefaultToEN","redefaultToSystem","months","_this2","formatStr","extract","weekdays","_this3","meridiems","_this4","eras","_this5","field","df","dtFormatter","results","matching","find","numberFormatter","fastNumbers","relFormatter","listFormatter","getWeekSettings","hasLocaleWeekInfo","getStartOfWeek","getMinDaysInFirstWeek","getWeekendDays","other","FixedOffsetZone","utcInstance","parseSpecifier","r","signedOffset","InvalidZone","normalizeZone","input","defaultZone","isString","lowered","isNumber","numberingSystems","arab","arabext","bali","beng","deva","fullwide","gujr","hanidec","khmr","knda","laoo","limb","mlym","mong","mymr","orya","tamldec","telu","thai","tibt","latn","numberingSystemsUTF16","hanidecChars","parseDigits","str","code","charCodeAt","search","_numberingSystemsUTF","min","max","digitRegexCache","resetDigitRegexCache","digitRegex","ns","now","twoDigitCutoffYear","throwOnInvalid","resetCaches","cutoffYear","t","Invalid","explanation","nonLeapLadder","leapLadder","unitOutOfRange","dayOfWeek","UTC","setUTCFullYear","getUTCFullYear","js","getUTCDay","computeOrdinal","isLeapYear","uncomputeOrdinal","ordinal","table","month0","findIndex","isoWeekdayToLocal","isoWeekday","startOfWeek","gregorianToWeek","gregObj","minDaysInFirstWeek","weekNumber","weekYear","weeksInWeekYear","timeObject","weekToGregorian","weekData","weekdayOfJan4","yearInDays","daysInYear","_uncomputeOrdinal","gregorianToOrdinal","gregData","ordinalToGregorian","ordinalData","_uncomputeOrdinal2","usesLocalWeekValues","obj","hasLocaleWeekData","localWeekday","localWeekNumber","localWeekYear","hasIsoWeekData","hasInvalidWeekData","validYear","isInteger","validWeek","integerBetween","validWeekday","hasInvalidOrdinalData","validOrdinal","hasInvalidGregorianData","validMonth","validDay","daysInMonth","hasInvalidTimeData","validHour","validMinute","validSecond","validMillisecond","o","isDate","maybeArray","thing","bestBy","arr","by","compare","best","next","pair","pick","a","k","settings","some","bottom","top","floorMod","x","isNeg","padded","parseInteger","string","parseFloating","parseFloat","parseMillis","fraction","number","digits","towardZero","factor","pow","rounder","trunc","round","modMonth","modYear","firstWeekOffset","fwdlw","weekOffset","weekOffsetNext","untruncateYear","offsetFormat","modified","offHourStr","offMinuteStr","offHour","offMin","offMinSigned","asNumber","numericValue","normalizeObject","normalizer","normalized","u","hours","sign","RangeError","monthsLong","monthsShort","monthsNarrow","concat","weekdaysLong","weekdaysShort","weekdaysNarrow","erasLong","erasShort","erasNarrow","meridiemForDateTime","weekdayForDateTime","monthForDateTime","eraForDateTime","formatRelativeTime","narrow","units","years","quarters","weeks","days","seconds","lastable","isDay","isInPast","fmtValue","singular","lilUnits","fmtUnit","stringifyTokens","splits","tokenToString","_iterator","_createForOfIteratorHelperLoose","_step","done","token","literal","val","macroTokenToFormatOpts","D","Formats","DD","DDD","DDDD","tt","ttt","tttt","T","TT","TTT","TTTT","ff","fff","ffff","F","FF","FFF","FFFF","Formatter","parseFormat","fmt","current","currentFull","bracketed","charAt","formatOpts","systemLoc","formatWithSystemDefault","formatDateTime","formatDateTimeParts","formatInterval","interval","formatRange","num","formatDateTimeFromString","knownEnglish","useDateTimeFormatter","isOffsetFixed","allowZ","isValid","meridiem","maybeMacro","quarter","formatDurationFromString","dur","tokenToField","lildur","mapped","tokens","realTokens","found","collapsed","shiftTo","filter","ianaRegex","combineRegexes","_len","regexes","_key","full","source","combineExtractors","_len2","extractors","_key2","ex","mergedVals","mergedZone","cursor","_ex","_len3","patterns","_key3","_i","_patterns","_patterns$_i","extractor","simpleParse","_len4","_key4","ret","offsetRegex","isoExtendedZone","isoTimeBaseRegex","isoTimeRegex","isoTimeExtensionRegex","isoYmdRegex","isoWeekRegex","isoOrdinalRegex","extractISOWeekData","extractISOOrdinalData","sqlYmdRegex","sqlTimeRegex","sqlTimeExtensionRegex","int","fallback","extractISOYmd","extractISOTime","milliseconds","extractISOOffset","local","fullOffset","extractIANAZone","isoTimeOnly","isoDuration","extractISODuration","yearStr","monthStr","weekStr","dayStr","hourStr","minuteStr","secondStr","millisecondsStr","hasNegativePrefix","negativeSeconds","maybeNegate","force","obsOffsets","GMT","EDT","EST","CDT","CST","MDT","MST","PDT","PST","fromStrings","weekdayStr","rfc2822","extractRFC2822","obsOffset","milOffset","preprocessRFC2822","trim","rfc1123","rfc850","ascii","extractRFC1123Or850","extractASCII","isoYmdWithTimeExtensionRegex","isoWeekWithTimeExtensionRegex","isoOrdinalWithTimeExtensionRegex","isoTimeCombinedRegex","extractISOYmdTimeAndOffset","extractISOWeekTimeAndOffset","extractISOOrdinalDateAndTime","extractISOTimeAndOffset","parseISODate","parseRFC2822Date","parseHTTPDate","parseISODuration","extractISOTimeOnly","parseISOTimeOnly","sqlYmdWithTimeExtensionRegex","sqlTimeCombinedRegex","extractISOTimeOffsetAndIANAZone","parseSQL","INVALID","lowOrderMatrix","casualMatrix","daysInYearAccurate","daysInMonthAccurate","accurateMatrix","orderedUnits","reverseUnits","clear","conf","conversionAccuracy","matrix","Duration","durationToMillis","vals","_vals$milliseconds","sum","normalizeValues","reduceRight","previous","previousVal","conv","rollUp","removeZeroes","newVals","_Object$entries","entries","_Object$entries$_i","_Symbol$for","config","accurate","invalid","isLuxonDuration","fromMillis","normalizeUnit","fromDurationLike","durationLike","isDuration","fromISO","text","_parseISODuration","fromISOTime","_parseISOTimeOnly","week","toFormat","fmtOpts","toHuman","unitDisplay","listStyle","toObject","toISO","toISOTime","millis","toMillis","suppressMilliseconds","suppressSeconds","includePrefix","includeOffset","dateTime","toJSON","invalidReason","valueOf","duration","_i2","_orderedUnits","minus","negate","mapUnits","fn","_i3","_Object$keys","mixed","reconfigure","as","normalize","rescale","shiftToAll","built","accumulated","lastUnit","_i4","_orderedUnits2","own","ak","negated","_i5","_Object$keys2","eq","v1","v2","_i6","_orderedUnits3","validateStartEnd","Interval","isLuxonInterval","fromDateTimes","builtStart","friendlyDateTime","builtEnd","validateError","after","before","_split","startIsValid","endIsValid","isInterval","toDuration","startOf","useLocaleWeeks","diff","hasSame","isEmpty","isAfter","isBefore","contains","splitAt","dateTimes","sorted","sort","b","added","splitBy","divideEqually","numberOfParts","overlaps","abutsStart","abutsEnd","engulfs","intersection","union","merge","intervals","_intervals$sort$reduc","sofar","final","xor","_Array$prototype","currentCount","ends","time","flattened","difference","toLocaleString","toISODate","dateFormat","_temp2","_ref3","_ref3$separator","separator","mapEndpoints","mapFn","Info","hasDST","proto","isUniversal","isValidIANAZone","_ref$locale","_ref$locObj","locObj","getMinimumDaysInFirstWeek","_ref2$locale","_ref2$locObj","getWeekendWeekdays","_temp3","_ref3$locale","_ref3$locObj","_temp4","_ref4","_ref4$locale","_ref4$numberingSystem","_ref4$locObj","_ref4$outputCalendar","monthsFormat","_temp5","_ref5","_ref5$locale","_ref5$numberingSystem","_ref5$locObj","_ref5$outputCalendar","_temp6","_ref6","_ref6$locale","_ref6$numberingSystem","_ref6$locObj","weekdaysFormat","_temp7","_ref7","_ref7$locale","_ref7$numberingSystem","_ref7$locObj","_temp8","_ref8","_ref8$locale","_temp9","_ref9","_ref9$locale","features","relative","localeWeek","dayDiff","earlier","later","utcDayStart","toUTC","keepLocalTime","highOrderDiffs","differs","lowestOrder","highWater","_differs","_differs$_i","differ","_highOrderDiffs","remainingMillis","lowerOrderUnits","_cursor$plus","_Duration$fromMillis","MISSING_FTP","intUnit","post","deser","NBSP","fromCharCode","spaceOrNBSP","spaceOrNBSPRegExp","fixListRegex","stripInsensitivities","oneOf","startIndex","groups","simple","escapeToken","unitForToken","one","two","three","four","six","oneOrTwo","oneToThree","oneToSix","oneToNine","twoToFour","fourToSix","unitate","partTypeStyleToTokenVal","short","long","dayperiod","dayPeriod","hour24","tokenForPart","resolvedOpts","isSpace","actualType","buildRegex","re","handlers","matches","all","matchIndex","dateTimeFromMatches","toField","specificOffset","Z","q","M","G","y","S","dummyDateTimeCache","getDummyDateTime","maybeExpandMacroToken","formatOptsToTokens","expandMacroTokens","TokenParser","disqualifyingUnit","_buildRegex","regexString","explainFromTokens","_match","rawMatches","parser","parseFromTokens","_explainFromTokens","formatter","MAX_DATE","unsupportedZone","possiblyCachedWeekData","possiblyCachedLocalWeekData","localWeekData","inst","fixOffset","localTS","tz","utcGuess","o2","o3","tsToObj","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","objToTS","adjustTime","oPre","millisToAdd","_fixOffset","parseDataToDateTime","parsedZone","interpretationZone","toTechFormat","extended","longFormat","extendedZone","ianaName","defaultUnitValues","defaultWeekUnitValues","defaultOrdinalUnitValues","orderedWeekUnits","orderedOrdinalUnits","weeknumber","weeksnumber","weeknumbers","weekyear","weekyears","normalizeUnitWithLocalWeeks","guessOffsetForZone","zoneOffsetGuessCache","zoneOffsetTs","quickDT","offsetProvis","_objToTS","diffRelative","calendary","lastOpts","argList","args","unchanged","ot","_zone","isLuxonDateTime","_lastOpts","_lastOpts2","fromJSDate","zoneToUse","fromSeconds","_usesLocalWeekValues","tsNow","containsOrdinal","containsGregorYear","containsGregorMD","containsGregor","definiteWeekDef","useWeekData","defaultValues","objNow","foundFirst","_iterator2","_step2","higherOrderInvalid","gregorian","_objToTS2","tsFinal","offsetFinal","_parseISODate","fromRFC2822","_parseRFC2822Date","fromHTTP","_parseHTTPDate","fromFormat","_opts$locale","_opts$numberingSystem","localeToUse","_parseFromTokens","fromString","fromSQL","_parseSQL","isDateTime","parseFormatForOpts","localeOpts","tokenList","expandFormat","expanded","getPossibleOffsets","dayMs","minuteMs","oEarlier","oLater","o1","ts1","ts2","c1","c2","resolvedLocaleOptions","_Formatter$create$res","toLocal","_ref2$keepLocalTime","_ref2$keepCalendarTim","keepCalendarTime","newTS","offsetGuess","asObj","_objToTS3","setLocale","_usesLocalWeekValues2","settingWeekStuff","_objToTS4","_ref4$useLocaleWeeks","normalizedUnit","ceil","endOf","_this$plus","toLocaleParts","_ref5$format","_ref5$suppressSeconds","_ref5$suppressMillise","_ref5$includeOffset","_ref5$extendedZone","ext","_ref6$format","toISOWeekDate","_ref7$suppressMillise","_ref7$suppressSeconds","_ref7$includeOffset","_ref7$includePrefix","_ref7$extendedZone","_ref7$format","toRFC2822","toHTTP","toSQLDate","toSQLTime","_ref8$includeOffset","_ref8$includeZone","includeZone","_ref8$includeOffsetSp","includeOffsetSpace","toSQL","toSeconds","toUnixInteger","toBSON","includeConfig","otherDateTime","durOpts","otherIsLater","diffed","diffNow","until","inputMs","adjustedToZone","toRelative","padding","toRelativeCalendar","every","fromFormatExplain","_options$locale","_options$numberingSys","fromStringExplain","buildFormatParser","_options2","_options2$locale","_options2$numberingSy","fromFormatParser","formatParser","_opts2","_opts2$locale","_opts2$numberingSyste","_formatParser$explain","dateTimeish","VERSION"],"version":3,"file":"four-week-planner-card.js.map"}